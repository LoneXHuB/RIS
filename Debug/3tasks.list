
3tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fa4  08008fa4  000201c4  2**0
                  CONTENTS
  4 .ARM          00000008  08008fa4  08008fa4  00018fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fac  08008fac  000201c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fac  08008fac  00018fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fb0  08008fb0  00018fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08008fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000084  08009038  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000124  080090d8  00020124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000051d8  200001c4  08009178  000201c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000539c  08009178  0002539c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024d66  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003fd1  00000000  00000000  00044f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b80  00000000  00000000  00048f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001a08  00000000  00000000  0004aab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000044b9  00000000  00000000  0004c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020f96  00000000  00000000  00050971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104999  00000000  00000000  00071907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001762a0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007934  00000000  00000000  001762f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c4 	.word	0x200001c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008dd8 	.word	0x08008dd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001c8 	.word	0x200001c8
 800020c:	08008dd8 	.word	0x08008dd8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f001 f8c9 	bl	80016ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f862 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f9f0 	bl	8000904 <MX_GPIO_Init>
  MX_ETH_Init();
 8000524:	f000 f8c6 	bl	80006b4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000528:	f000 f98e 	bl	8000848 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800052c:	f000 f9bc 	bl	80008a8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000530:	f000 f90e 	bl	8000750 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000534:	f000 f94a 	bl	80007cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2110      	movs	r1, #16
 800053c:	481a      	ldr	r0, [pc, #104]	; (80005a8 <main+0x94>)
 800053e:	f001 febb 	bl	80022b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	2140      	movs	r1, #64	; 0x40
 8000546:	4818      	ldr	r0, [pc, #96]	; (80005a8 <main+0x94>)
 8000548:	f001 feb6 	bl	80022b8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800054c:	f004 ff66 	bl	800541c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem */
  myBinarySemHandle = osSemaphoreNew(1, 1, &myBinarySem_attributes);
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <main+0x98>)
 8000552:	2101      	movs	r1, #1
 8000554:	2001      	movs	r0, #1
 8000556:	f005 f871 	bl	800563c <osSemaphoreNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <main+0x9c>)
 800055e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Enable */
  EnableHandle = osThreadNew(StartEnable, NULL, &Enable_attributes);
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <main+0xa0>)
 8000562:	2100      	movs	r1, #0
 8000564:	4814      	ldr	r0, [pc, #80]	; (80005b8 <main+0xa4>)
 8000566:	f004 ffc3 	bl	80054f0 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a13      	ldr	r2, [pc, #76]	; (80005bc <main+0xa8>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of Init */
  InitHandle = osThreadNew(StartInit, NULL, &Init_attributes);
 8000570:	4a13      	ldr	r2, [pc, #76]	; (80005c0 <main+0xac>)
 8000572:	2100      	movs	r1, #0
 8000574:	4813      	ldr	r0, [pc, #76]	; (80005c4 <main+0xb0>)
 8000576:	f004 ffbb 	bl	80054f0 <osThreadNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <main+0xb4>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of Test */
  TestHandle = osThreadNew(StartTest, NULL, &Test_attributes);
 8000580:	4a12      	ldr	r2, [pc, #72]	; (80005cc <main+0xb8>)
 8000582:	2100      	movs	r1, #0
 8000584:	4812      	ldr	r0, [pc, #72]	; (80005d0 <main+0xbc>)
 8000586:	f004 ffb3 	bl	80054f0 <osThreadNew>
 800058a:	4603      	mov	r3, r0
 800058c:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <main+0xc0>)
 800058e:	6013      	str	r3, [r2, #0]

  /* creation of Update */
  UpdateHandle = osThreadNew(StartUpdate, NULL, &Update_attributes);
 8000590:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <main+0xc4>)
 8000592:	2100      	movs	r1, #0
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0xc8>)
 8000596:	f004 ffab 	bl	80054f0 <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <main+0xcc>)
 800059e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a0:	f004 ff70 	bl	8005484 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <main+0x90>
 80005a6:	bf00      	nop
 80005a8:	40020400 	.word	0x40020400
 80005ac:	08008f0c 	.word	0x08008f0c
 80005b0:	20000930 	.word	0x20000930
 80005b4:	08008e7c 	.word	0x08008e7c
 80005b8:	08000a49 	.word	0x08000a49
 80005bc:	20000920 	.word	0x20000920
 80005c0:	08008ea0 	.word	0x08008ea0
 80005c4:	08000b41 	.word	0x08000b41
 80005c8:	20000924 	.word	0x20000924
 80005cc:	08008ec4 	.word	0x08008ec4
 80005d0:	08000c85 	.word	0x08000c85
 80005d4:	20000928 	.word	0x20000928
 80005d8:	08008ee8 	.word	0x08008ee8
 80005dc:	08000de1 	.word	0x08000de1
 80005e0:	2000092c 	.word	0x2000092c

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	; 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	2230      	movs	r2, #48	; 0x30
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 fb26 	bl	8008c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000608:	f001 ffb8 	bl	800257c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <SystemClock_Config+0xc8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a26      	ldr	r2, [pc, #152]	; (80006ac <SystemClock_Config+0xc8>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	; 0x40
 8000618:	4b24      	ldr	r3, [pc, #144]	; (80006ac <SystemClock_Config+0xc8>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000620:	60bb      	str	r3, [r7, #8]
 8000622:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <SystemClock_Config+0xcc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <SystemClock_Config+0xcc>)
 800062e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4b1e      	ldr	r3, [pc, #120]	; (80006b0 <SystemClock_Config+0xcc>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000658:	2348      	movs	r3, #72	; 0x48
 800065a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000660:	2303      	movs	r3, #3
 8000662:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f001 ff97 	bl	800259c <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000674:	f000 fcd6 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2102      	movs	r1, #2
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fa25 	bl	8002ae4 <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006a0:	f000 fcc0 	bl	8001024 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	3750      	adds	r7, #80	; 0x50
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ETH_Init+0x84>)
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <MX_ETH_Init+0x88>)
 80006bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_ETH_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_ETH_Init+0x8c>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_ETH_Init+0x8c>)
 80006cc:	22e1      	movs	r2, #225	; 0xe1
 80006ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_ETH_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_ETH_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_ETH_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ETH_Init+0x84>)
 80006e4:	4a16      	ldr	r2, [pc, #88]	; (8000740 <MX_ETH_Init+0x8c>)
 80006e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_ETH_Init+0x84>)
 80006ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_ETH_Init+0x84>)
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <MX_ETH_Init+0x90>)
 80006f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_ETH_Init+0x84>)
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_ETH_Init+0x94>)
 80006fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_ETH_Init+0x84>)
 80006fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000702:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_ETH_Init+0x84>)
 8000706:	f001 f905 	bl	8001914 <HAL_ETH_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 fc88 	bl	8001024 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000714:	2238      	movs	r2, #56	; 0x38
 8000716:	2100      	movs	r1, #0
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_ETH_Init+0x98>)
 800071a:	f008 fa93 	bl	8008c44 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_ETH_Init+0x98>)
 8000720:	2221      	movs	r2, #33	; 0x21
 8000722:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_ETH_Init+0x98>)
 8000726:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800072a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_ETH_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000218 	.word	0x20000218
 800073c:	40028000 	.word	0x40028000
 8000740:	20000934 	.word	0x20000934
 8000744:	20000124 	.word	0x20000124
 8000748:	20000084 	.word	0x20000084
 800074c:	200001e0 	.word	0x200001e0

08000750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	; (80007c8 <MX_SPI1_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_SPI1_Init+0x74>)
 800075c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <MX_SPI1_Init+0x74>)
 800076a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800076e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000776:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_SPI1_Init+0x74>)
 800077e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000782:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000786:	2218      	movs	r2, #24
 8000788:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_SPI1_Init+0x74>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_SPI1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_SPI1_Init+0x74>)
 800079e:	2207      	movs	r2, #7
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_SPI1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_SPI1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_SPI1_Init+0x74>)
 80007b0:	f002 ffe0 	bl	8003774 <HAL_SPI_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007ba:	f000 fc33 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200002c8 	.word	0x200002c8
 80007c8:	40013000 	.word	0x40013000

080007cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_SPI2_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_SPI2_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_SPI2_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_SPI2_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_SPI2_Init+0x74>)
 80007e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80007ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_SPI2_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI2_Init+0x74>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI2_Init+0x74>)
 8000802:	2210      	movs	r2, #16
 8000804:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_SPI2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI2_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_SPI2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_SPI2_Init+0x74>)
 800082c:	f002 ffa2 	bl	8003774 <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fbf5 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000032c 	.word	0x2000032c
 8000844:	40003800 	.word	0x40003800

08000848 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_USART3_UART_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_USART3_UART_Init+0x58>)
 800088c:	f003 fdf4 	bl	8004478 <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 fbc5 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000390 	.word	0x20000390
 80008a4:	40004800 	.word	0x40004800

080008a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b6:	2206      	movs	r2, #6
 80008b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008bc:	2202      	movs	r2, #2
 80008be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ec:	f001 fcfd 	bl	80022ea <HAL_PCD_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 fb95 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000418 	.word	0x20000418

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08c      	sub	sp, #48	; 0x30
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b47      	ldr	r3, [pc, #284]	; (8000a38 <MX_GPIO_Init+0x134>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a46      	ldr	r2, [pc, #280]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b44      	ldr	r3, [pc, #272]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a40      	ldr	r2, [pc, #256]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	4b3b      	ldr	r3, [pc, #236]	; (8000a38 <MX_GPIO_Init+0x134>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a3a      	ldr	r2, [pc, #232]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a34      	ldr	r2, [pc, #208]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000968:	f043 0302 	orr.w	r3, r3, #2
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b32      	ldr	r3, [pc, #200]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0302 	and.w	r3, r3, #2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_GPIO_Init+0x134>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000980:	f043 0308 	orr.w	r3, r3, #8
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0308 	and.w	r3, r3, #8
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_GPIO_Init+0x134>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_GPIO_Init+0x134>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI1_CS_Pin|SPI2_CS_Pin
 80009aa:	2200      	movs	r2, #0
 80009ac:	f244 01d1 	movw	r1, #16593	; 0x40d1
 80009b0:	4822      	ldr	r0, [pc, #136]	; (8000a3c <MX_GPIO_Init+0x138>)
 80009b2:	f001 fc81 	bl	80022b8 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2140      	movs	r1, #64	; 0x40
 80009ba:	4821      	ldr	r0, [pc, #132]	; (8000a40 <MX_GPIO_Init+0x13c>)
 80009bc:	f001 fc7c 	bl	80022b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	481b      	ldr	r0, [pc, #108]	; (8000a44 <MX_GPIO_Init+0x140>)
 80009d8:	f001 fac2 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI1_CS_Pin SPI2_CS_Pin
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI1_CS_Pin|SPI2_CS_Pin
 80009dc:	f244 03d1 	movw	r3, #16593	; 0x40d1
 80009e0:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4811      	ldr	r0, [pc, #68]	; (8000a3c <MX_GPIO_Init+0x138>)
 80009f6:	f001 fab3 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fe:	2301      	movs	r3, #1
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 031c 	add.w	r3, r7, #28
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <MX_GPIO_Init+0x13c>)
 8000a12:	f001 faa5 	bl	8001f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a16:	2380      	movs	r3, #128	; 0x80
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_GPIO_Init+0x13c>)
 8000a2a:	f001 fa99 	bl	8001f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3730      	adds	r7, #48	; 0x30
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020400 	.word	0x40020400
 8000a40:	40021800 	.word	0x40021800
 8000a44:	40020800 	.word	0x40020800

08000a48 <StartEnable>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEnable */
void StartEnable(void *argument)
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	// CS_LOW
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2110      	movs	r1, #16
 8000a54:	482f      	ldr	r0, [pc, #188]	; (8000b14 <StartEnable+0xcc>)
 8000a56:	f001 fc2f 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	482d      	ldr	r0, [pc, #180]	; (8000b14 <StartEnable+0xcc>)
 8000a60:	f001 fc2a 	bl	80022b8 <HAL_GPIO_WritePin>
	// RISA
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[0].address, 1, 10);
 8000a64:	230a      	movs	r3, #10
 8000a66:	2201      	movs	r2, #1
 8000a68:	492b      	ldr	r1, [pc, #172]	; (8000b18 <StartEnable+0xd0>)
 8000a6a:	482c      	ldr	r0, [pc, #176]	; (8000b1c <StartEnable+0xd4>)
 8000a6c:	f002 ff2d 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[0].value, 1, 10);
 8000a70:	230a      	movs	r3, #10
 8000a72:	2201      	movs	r2, #1
 8000a74:	492a      	ldr	r1, [pc, #168]	; (8000b20 <StartEnable+0xd8>)
 8000a76:	4829      	ldr	r0, [pc, #164]	; (8000b1c <StartEnable+0xd4>)
 8000a78:	f002 ff27 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[1].address, 1, 10);
 8000a7c:	230a      	movs	r3, #10
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4928      	ldr	r1, [pc, #160]	; (8000b24 <StartEnable+0xdc>)
 8000a82:	4826      	ldr	r0, [pc, #152]	; (8000b1c <StartEnable+0xd4>)
 8000a84:	f002 ff21 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayConfig[1].value, 1, 10);
 8000a88:	230a      	movs	r3, #10
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4926      	ldr	r1, [pc, #152]	; (8000b28 <StartEnable+0xe0>)
 8000a8e:	4823      	ldr	r0, [pc, #140]	; (8000b1c <StartEnable+0xd4>)
 8000a90:	f002 ff1b 	bl	80038ca <HAL_SPI_Transmit>
	// RISB
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[0].address, 1, 10);
 8000a94:	230a      	movs	r3, #10
 8000a96:	2201      	movs	r2, #1
 8000a98:	491f      	ldr	r1, [pc, #124]	; (8000b18 <StartEnable+0xd0>)
 8000a9a:	4824      	ldr	r0, [pc, #144]	; (8000b2c <StartEnable+0xe4>)
 8000a9c:	f002 ff15 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[0].value, 1, 10);
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	491e      	ldr	r1, [pc, #120]	; (8000b20 <StartEnable+0xd8>)
 8000aa6:	4821      	ldr	r0, [pc, #132]	; (8000b2c <StartEnable+0xe4>)
 8000aa8:	f002 ff0f 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[1].address, 1, 10);
 8000aac:	230a      	movs	r3, #10
 8000aae:	2201      	movs	r2, #1
 8000ab0:	491c      	ldr	r1, [pc, #112]	; (8000b24 <StartEnable+0xdc>)
 8000ab2:	481e      	ldr	r0, [pc, #120]	; (8000b2c <StartEnable+0xe4>)
 8000ab4:	f002 ff09 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayConfig[1].value, 1, 10);
 8000ab8:	230a      	movs	r3, #10
 8000aba:	2201      	movs	r2, #1
 8000abc:	491a      	ldr	r1, [pc, #104]	; (8000b28 <StartEnable+0xe0>)
 8000abe:	481b      	ldr	r0, [pc, #108]	; (8000b2c <StartEnable+0xe4>)
 8000ac0:	f002 ff03 	bl	80038ca <HAL_SPI_Transmit>
	// CS_HIGHT
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4812      	ldr	r0, [pc, #72]	; (8000b14 <StartEnable+0xcc>)
 8000aca:	f001 fbf5 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	; 0x40
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <StartEnable+0xcc>)
 8000ad4:	f001 fbf0 	bl	80022b8 <HAL_GPIO_WritePin>
	uint8_t data[]= "Enable completed\n";
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <StartEnable+0xe8>)
 8000ada:	f107 040c 	add.w	r4, r7, #12
 8000ade:	461d      	mov	r5, r3
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart3, data, sizeof(data),500);
 8000ae8:	f107 010c 	add.w	r1, r7, #12
 8000aec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000af0:	2212      	movs	r2, #18
 8000af2:	4810      	ldr	r0, [pc, #64]	; (8000b34 <StartEnable+0xec>)
 8000af4:	f003 fd0e 	bl	8004514 <HAL_UART_Transmit>
    /* Give semaphore to Task 2 */
	osSemaphoreRelease(myBinarySemHandle);
 8000af8:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <StartEnable+0xf0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f004 fe9f 	bl	8005840 <osSemaphoreRelease>
    /* Delete Task 1 */
    vTaskDelete(EnableHandle);
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <StartEnable+0xf4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f006 f9f0 	bl	8006eec <vTaskDelete>
  /* USER CODE END 5 */
}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bdb0      	pop	{r4, r5, r7, pc}
 8000b14:	40020400 	.word	0x40020400
 8000b18:	08008f1c 	.word	0x08008f1c
 8000b1c:	200002c8 	.word	0x200002c8
 8000b20:	08008f1d 	.word	0x08008f1d
 8000b24:	08008f1e 	.word	0x08008f1e
 8000b28:	08008f1f 	.word	0x08008f1f
 8000b2c:	2000032c 	.word	0x2000032c
 8000b30:	08008e1c 	.word	0x08008e1c
 8000b34:	20000390 	.word	0x20000390
 8000b38:	20000930 	.word	0x20000930
 8000b3c:	20000920 	.word	0x20000920

08000b40 <StartInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInit */
void StartInit(void *argument)
{
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b089      	sub	sp, #36	; 0x24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartInit */
    /* Wait for semaphore from Task 1 */
	osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8000b48:	4b46      	ldr	r3, [pc, #280]	; (8000c64 <StartInit+0x124>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b50:	4618      	mov	r0, r3
 8000b52:	f004 fe0f 	bl	8005774 <osSemaphoreAcquire>
	uint8_t i = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	77fb      	strb	r3, [r7, #31]
	uint8_t data[]= "Init completed\n";
 8000b5a:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <StartInit+0x128>)
 8000b5c:	f107 040c 	add.w	r4, r7, #12
 8000b60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(i = 0; i < 6;i++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	77fb      	strb	r3, [r7, #31]
 8000b6a:	e06a      	b.n	8000c42 <StartInit+0x102>
	{
	// CS_LOW
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2110      	movs	r1, #16
 8000b70:	483e      	ldr	r0, [pc, #248]	; (8000c6c <StartInit+0x12c>)
 8000b72:	f001 fba1 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	483c      	ldr	r0, [pc, #240]	; (8000c6c <StartInit+0x12c>)
 8000b7c:	f001 fb9c 	bl	80022b8 <HAL_GPIO_WritePin>
	// RISA
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000b80:	7ffb      	ldrb	r3, [r7, #31]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4a3a      	ldr	r2, [pc, #232]	; (8000c70 <StartInit+0x130>)
 8000b86:	1899      	adds	r1, r3, r2
 8000b88:	230a      	movs	r3, #10
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4839      	ldr	r0, [pc, #228]	; (8000c74 <StartInit+0x134>)
 8000b8e:	f002 fe9c 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000b92:	7ffb      	ldrb	r3, [r7, #31]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <StartInit+0x130>)
 8000b98:	4413      	add	r3, r2
 8000b9a:	1c59      	adds	r1, r3, #1
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4834      	ldr	r0, [pc, #208]	; (8000c74 <StartInit+0x134>)
 8000ba2:	f002 fe92 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000ba6:	7ffb      	ldrb	r3, [r7, #31]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	4a31      	ldr	r2, [pc, #196]	; (8000c70 <StartInit+0x130>)
 8000bac:	1899      	adds	r1, r3, r2
 8000bae:	230a      	movs	r3, #10
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4830      	ldr	r0, [pc, #192]	; (8000c74 <StartInit+0x134>)
 8000bb4:	f002 fe89 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000bb8:	7ffb      	ldrb	r3, [r7, #31]
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4a2c      	ldr	r2, [pc, #176]	; (8000c70 <StartInit+0x130>)
 8000bbe:	4413      	add	r3, r2
 8000bc0:	1c59      	adds	r1, r3, #1
 8000bc2:	230a      	movs	r3, #10
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	482b      	ldr	r0, [pc, #172]	; (8000c74 <StartInit+0x134>)
 8000bc8:	f002 fe7f 	bl	80038ca <HAL_SPI_Transmit>
	// RISB
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000bcc:	7ffb      	ldrb	r3, [r7, #31]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	4a27      	ldr	r2, [pc, #156]	; (8000c70 <StartInit+0x130>)
 8000bd2:	1899      	adds	r1, r3, r2
 8000bd4:	230a      	movs	r3, #10
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	4827      	ldr	r0, [pc, #156]	; (8000c78 <StartInit+0x138>)
 8000bda:	f002 fe76 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000bde:	7ffb      	ldrb	r3, [r7, #31]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <StartInit+0x130>)
 8000be4:	4413      	add	r3, r2
 8000be6:	1c59      	adds	r1, r3, #1
 8000be8:	230a      	movs	r3, #10
 8000bea:	2201      	movs	r2, #1
 8000bec:	4822      	ldr	r0, [pc, #136]	; (8000c78 <StartInit+0x138>)
 8000bee:	f002 fe6c 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].address, 1, 10);
 8000bf2:	7ffb      	ldrb	r3, [r7, #31]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <StartInit+0x130>)
 8000bf8:	1899      	adds	r1, r3, r2
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	481e      	ldr	r0, [pc, #120]	; (8000c78 <StartInit+0x138>)
 8000c00:	f002 fe63 	bl	80038ca <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)&arrayInitialize[i].value, 1, 10);
 8000c04:	7ffb      	ldrb	r3, [r7, #31]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4a19      	ldr	r2, [pc, #100]	; (8000c70 <StartInit+0x130>)
 8000c0a:	4413      	add	r3, r2
 8000c0c:	1c59      	adds	r1, r3, #1
 8000c0e:	230a      	movs	r3, #10
 8000c10:	2201      	movs	r2, #1
 8000c12:	4819      	ldr	r0, [pc, #100]	; (8000c78 <StartInit+0x138>)
 8000c14:	f002 fe59 	bl	80038ca <HAL_SPI_Transmit>
	// CS_HIGHT
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	4813      	ldr	r0, [pc, #76]	; (8000c6c <StartInit+0x12c>)
 8000c1e:	f001 fb4b 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	4811      	ldr	r0, [pc, #68]	; (8000c6c <StartInit+0x12c>)
 8000c28:	f001 fb46 	bl	80022b8 <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart3, data, sizeof(data),500);
 8000c2c:	f107 010c 	add.w	r1, r7, #12
 8000c30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c34:	2210      	movs	r2, #16
 8000c36:	4811      	ldr	r0, [pc, #68]	; (8000c7c <StartInit+0x13c>)
 8000c38:	f003 fc6c 	bl	8004514 <HAL_UART_Transmit>
	for(i = 0; i < 6;i++)
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	77fb      	strb	r3, [r7, #31]
 8000c42:	7ffb      	ldrb	r3, [r7, #31]
 8000c44:	2b05      	cmp	r3, #5
 8000c46:	d991      	bls.n	8000b6c <StartInit+0x2c>
	}
    /* Give semaphore to Task 3 */
	osSemaphoreRelease(myBinarySemHandle);
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <StartInit+0x124>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f004 fdf7 	bl	8005840 <osSemaphoreRelease>
    /* Delete Task 2 */
    vTaskDelete(InitHandle);
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <StartInit+0x140>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f006 f948 	bl	8006eec <vTaskDelete>
  /* USER CODE END StartInit */
}
 8000c5c:	bf00      	nop
 8000c5e:	3724      	adds	r7, #36	; 0x24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd90      	pop	{r4, r7, pc}
 8000c64:	20000930 	.word	0x20000930
 8000c68:	08008e30 	.word	0x08008e30
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	08008f20 	.word	0x08008f20
 8000c74:	200002c8 	.word	0x200002c8
 8000c78:	2000032c 	.word	0x2000032c
 8000c7c:	20000390 	.word	0x20000390
 8000c80:	20000924 	.word	0x20000924

08000c84 <StartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTest */
void StartTest(void *argument)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTest */
  /* Wait for semaphore from Task 2 */
	osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <StartTest+0x140>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c94:	4618      	mov	r0, r3
 8000c96:	f004 fd6d 	bl	8005774 <osSemaphoreAcquire>
	uint8_t buffer[] = {0x24, 0x01};
 8000c9a:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000c9e:	83bb      	strh	r3, [r7, #28]
	uint8_t i = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	77fb      	strb	r3, [r7, #31]
	for(i = 0; i < 25; i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	77fb      	strb	r3, [r7, #31]
 8000ca8:	e07b      	b.n	8000da2 <StartTest+0x11e>
	{
		buffer[0] = 0x24 + i;
 8000caa:	7ffb      	ldrb	r3, [r7, #31]
 8000cac:	3324      	adds	r3, #36	; 0x24
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	773b      	strb	r3, [r7, #28]
		buffer[1] = 0x01;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	777b      	strb	r3, [r7, #29]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2110      	movs	r1, #16
 8000cba:	4843      	ldr	r0, [pc, #268]	; (8000dc8 <StartTest+0x144>)
 8000cbc:	f001 fafc 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	4840      	ldr	r0, [pc, #256]	; (8000dc8 <StartTest+0x144>)
 8000cc6:	f001 faf7 	bl	80022b8 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&buffer, 2, 10);
 8000cca:	f107 011c 	add.w	r1, r7, #28
 8000cce:	230a      	movs	r3, #10
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	483e      	ldr	r0, [pc, #248]	; (8000dcc <StartTest+0x148>)
 8000cd4:	f002 fdf9 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&buffer, 2, 10);
 8000cd8:	f107 011c 	add.w	r1, r7, #28
 8000cdc:	230a      	movs	r3, #10
 8000cde:	2202      	movs	r2, #2
 8000ce0:	483a      	ldr	r0, [pc, #232]	; (8000dcc <StartTest+0x148>)
 8000ce2:	f002 fdf2 	bl	80038ca <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&buffer, 2, 10);
 8000ce6:	f107 011c 	add.w	r1, r7, #28
 8000cea:	230a      	movs	r3, #10
 8000cec:	2202      	movs	r2, #2
 8000cee:	4838      	ldr	r0, [pc, #224]	; (8000dd0 <StartTest+0x14c>)
 8000cf0:	f002 fdeb 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&buffer, 2, 10);
 8000cf4:	f107 011c 	add.w	r1, r7, #28
 8000cf8:	230a      	movs	r3, #10
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <StartTest+0x14c>)
 8000cfe:	f002 fde4 	bl	80038ca <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000d02:	2201      	movs	r2, #1
 8000d04:	2110      	movs	r1, #16
 8000d06:	4830      	ldr	r0, [pc, #192]	; (8000dc8 <StartTest+0x144>)
 8000d08:	f001 fad6 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2140      	movs	r1, #64	; 0x40
 8000d10:	482d      	ldr	r0, [pc, #180]	; (8000dc8 <StartTest+0x144>)
 8000d12:	f001 fad1 	bl	80022b8 <HAL_GPIO_WritePin>
		vTaskDelay(100);
 8000d16:	2064      	movs	r0, #100	; 0x64
 8000d18:	f006 f95c 	bl	8006fd4 <vTaskDelay>
		//HAL_Delay(100);
		buffer[1] = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	777b      	strb	r3, [r7, #29]
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2110      	movs	r1, #16
 8000d24:	4828      	ldr	r0, [pc, #160]	; (8000dc8 <StartTest+0x144>)
 8000d26:	f001 fac7 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2140      	movs	r1, #64	; 0x40
 8000d2e:	4826      	ldr	r0, [pc, #152]	; (8000dc8 <StartTest+0x144>)
 8000d30:	f001 fac2 	bl	80022b8 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&buffer, 2, 10);
 8000d34:	f107 011c 	add.w	r1, r7, #28
 8000d38:	230a      	movs	r3, #10
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	4823      	ldr	r0, [pc, #140]	; (8000dcc <StartTest+0x148>)
 8000d3e:	f002 fdc4 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&buffer, 2, 10);
 8000d42:	f107 011c 	add.w	r1, r7, #28
 8000d46:	230a      	movs	r3, #10
 8000d48:	2202      	movs	r2, #2
 8000d4a:	4820      	ldr	r0, [pc, #128]	; (8000dcc <StartTest+0x148>)
 8000d4c:	f002 fdbd 	bl	80038ca <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&buffer, 2, 10);
 8000d50:	f107 011c 	add.w	r1, r7, #28
 8000d54:	230a      	movs	r3, #10
 8000d56:	2202      	movs	r2, #2
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <StartTest+0x14c>)
 8000d5a:	f002 fdb6 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&buffer, 2, 10);
 8000d5e:	f107 011c 	add.w	r1, r7, #28
 8000d62:	230a      	movs	r3, #10
 8000d64:	2202      	movs	r2, #2
 8000d66:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <StartTest+0x14c>)
 8000d68:	f002 fdaf 	bl	80038ca <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2110      	movs	r1, #16
 8000d70:	4815      	ldr	r0, [pc, #84]	; (8000dc8 <StartTest+0x144>)
 8000d72:	f001 faa1 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2140      	movs	r1, #64	; 0x40
 8000d7a:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <StartTest+0x144>)
 8000d7c:	f001 fa9c 	bl	80022b8 <HAL_GPIO_WritePin>

		uint8_t data[]= "Test completed\n";
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <StartTest+0x150>)
 8000d82:	f107 040c 	add.w	r4, r7, #12
 8000d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart3, data, sizeof(data),500);
 8000d8c:	f107 010c 	add.w	r1, r7, #12
 8000d90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d94:	2210      	movs	r2, #16
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <StartTest+0x154>)
 8000d98:	f003 fbbc 	bl	8004514 <HAL_UART_Transmit>
	for(i = 0; i < 25; i++)
 8000d9c:	7ffb      	ldrb	r3, [r7, #31]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	77fb      	strb	r3, [r7, #31]
 8000da2:	7ffb      	ldrb	r3, [r7, #31]
 8000da4:	2b18      	cmp	r3, #24
 8000da6:	d980      	bls.n	8000caa <StartTest+0x26>
	}

  /* Delay for a longer period of time to simulate a longer execution time */
 // vTaskDelay(pdMS_TO_TICKS(5000));
  osSemaphoreRelease(myBinarySemHandle);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <StartTest+0x140>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 fd47 	bl	8005840 <osSemaphoreRelease>
  /* Delete Task 3 */
  vTaskDelete(TestHandle);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <StartTest+0x158>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f006 f898 	bl	8006eec <vTaskDelete>
  /* USER CODE END StartTest */
}
 8000dbc:	bf00      	nop
 8000dbe:	3724      	adds	r7, #36	; 0x24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd90      	pop	{r4, r7, pc}
 8000dc4:	20000930 	.word	0x20000930
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	200002c8 	.word	0x200002c8
 8000dd0:	2000032c 	.word	0x2000032c
 8000dd4:	08008e40 	.word	0x08008e40
 8000dd8:	20000390 	.word	0x20000390
 8000ddc:	20000928 	.word	0x20000928

08000de0 <StartUpdate>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdate */
void StartUpdate(void *argument)
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b08c      	sub	sp, #48	; 0x30
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUpdate */
  /* Infinite loop */
  for(;;)
  {       osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8000de8:	4b7d      	ldr	r3, [pc, #500]	; (8000fe0 <StartUpdate+0x200>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df0:	4618      	mov	r0, r3
 8000df2:	f004 fcbf 	bl	8005774 <osSemaphoreAcquire>
		//This part Configure 8 antenna (P4 to P11 on each MAX7301)
		uint8_t bufferRISA1[2] = {0x44, ConfigRISA[0].antEnable};
 8000df6:	2344      	movs	r3, #68	; 0x44
 8000df8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000dfc:	4b79      	ldr	r3, [pc, #484]	; (8000fe4 <StartUpdate+0x204>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t bufferRISA2[2] = {0x44, ConfigRISA[3].antEnable};
 8000e04:	2344      	movs	r3, #68	; 0x44
 8000e06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000e0a:	4b76      	ldr	r3, [pc, #472]	; (8000fe4 <StartUpdate+0x204>)
 8000e0c:	78db      	ldrb	r3, [r3, #3]
 8000e0e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		uint8_t bufferRISB1[2] = {0x44, ConfigRISB[0].antEnable};
 8000e12:	2344      	movs	r3, #68	; 0x44
 8000e14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000e18:	4b73      	ldr	r3, [pc, #460]	; (8000fe8 <StartUpdate+0x208>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t bufferRISB2[2] = {0x44, ConfigRISB[3].antEnable};
 8000e20:	2344      	movs	r3, #68	; 0x44
 8000e22:	f887 3020 	strb.w	r3, [r7, #32]
 8000e26:	4b70      	ldr	r3, [pc, #448]	; (8000fe8 <StartUpdate+0x208>)
 8000e28:	78db      	ldrb	r3, [r3, #3]
 8000e2a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2110      	movs	r1, #16
 8000e32:	486e      	ldr	r0, [pc, #440]	; (8000fec <StartUpdate+0x20c>)
 8000e34:	f001 fa40 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2140      	movs	r1, #64	; 0x40
 8000e3c:	486b      	ldr	r0, [pc, #428]	; (8000fec <StartUpdate+0x20c>)
 8000e3e:	f001 fa3b 	bl	80022b8 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA2, 2, 10);
 8000e42:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e46:	230a      	movs	r3, #10
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4869      	ldr	r0, [pc, #420]	; (8000ff0 <StartUpdate+0x210>)
 8000e4c:	f002 fd3d 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA1, 2, 10);
 8000e50:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000e54:	230a      	movs	r3, #10
 8000e56:	2202      	movs	r2, #2
 8000e58:	4865      	ldr	r0, [pc, #404]	; (8000ff0 <StartUpdate+0x210>)
 8000e5a:	f002 fd36 	bl	80038ca <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB2, 2, 10);
 8000e5e:	f107 0120 	add.w	r1, r7, #32
 8000e62:	230a      	movs	r3, #10
 8000e64:	2202      	movs	r2, #2
 8000e66:	4863      	ldr	r0, [pc, #396]	; (8000ff4 <StartUpdate+0x214>)
 8000e68:	f002 fd2f 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB1, 2, 10);
 8000e6c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e70:	230a      	movs	r3, #10
 8000e72:	2202      	movs	r2, #2
 8000e74:	485f      	ldr	r0, [pc, #380]	; (8000ff4 <StartUpdate+0x214>)
 8000e76:	f002 fd28 	bl	80038ca <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	485b      	ldr	r0, [pc, #364]	; (8000fec <StartUpdate+0x20c>)
 8000e80:	f001 fa1a 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4858      	ldr	r0, [pc, #352]	; (8000fec <StartUpdate+0x20c>)
 8000e8a:	f001 fa15 	bl	80022b8 <HAL_GPIO_WritePin>


		//This part Configure 8 antenna (P12 to P19 on each MAX7301)
		bufferRISA1[0] = 0x4C;
 8000e8e:	234c      	movs	r3, #76	; 0x4c
 8000e90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bufferRISA1[1] = ConfigRISA[1].antEnable;
 8000e94:	4b53      	ldr	r3, [pc, #332]	; (8000fe4 <StartUpdate+0x204>)
 8000e96:	785b      	ldrb	r3, [r3, #1]
 8000e98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bufferRISA2[0] = 0x4C;
 8000e9c:	234c      	movs	r3, #76	; 0x4c
 8000e9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		bufferRISA2[1] = ConfigRISA[4].antEnable;
 8000ea2:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <StartUpdate+0x204>)
 8000ea4:	791b      	ldrb	r3, [r3, #4]
 8000ea6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		bufferRISB1[0] = 0x4C;
 8000eaa:	234c      	movs	r3, #76	; 0x4c
 8000eac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		bufferRISB1[1] = ConfigRISB[1].antEnable;
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	; (8000fe8 <StartUpdate+0x208>)
 8000eb2:	785b      	ldrb	r3, [r3, #1]
 8000eb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		bufferRISB2[0] = 0x4C;
 8000eb8:	234c      	movs	r3, #76	; 0x4c
 8000eba:	f887 3020 	strb.w	r3, [r7, #32]
		bufferRISB2[1] = ConfigRISB[4].antEnable;
 8000ebe:	4b4a      	ldr	r3, [pc, #296]	; (8000fe8 <StartUpdate+0x208>)
 8000ec0:	791b      	ldrb	r3, [r3, #4]
 8000ec2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2110      	movs	r1, #16
 8000eca:	4848      	ldr	r0, [pc, #288]	; (8000fec <StartUpdate+0x20c>)
 8000ecc:	f001 f9f4 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2140      	movs	r1, #64	; 0x40
 8000ed4:	4845      	ldr	r0, [pc, #276]	; (8000fec <StartUpdate+0x20c>)
 8000ed6:	f001 f9ef 	bl	80022b8 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA2, 2, 10);
 8000eda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ede:	230a      	movs	r3, #10
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4843      	ldr	r0, [pc, #268]	; (8000ff0 <StartUpdate+0x210>)
 8000ee4:	f002 fcf1 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA1, 2, 10);
 8000ee8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000eec:	230a      	movs	r3, #10
 8000eee:	2202      	movs	r2, #2
 8000ef0:	483f      	ldr	r0, [pc, #252]	; (8000ff0 <StartUpdate+0x210>)
 8000ef2:	f002 fcea 	bl	80038ca <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB2, 2, 10);
 8000ef6:	f107 0120 	add.w	r1, r7, #32
 8000efa:	230a      	movs	r3, #10
 8000efc:	2202      	movs	r2, #2
 8000efe:	483d      	ldr	r0, [pc, #244]	; (8000ff4 <StartUpdate+0x214>)
 8000f00:	f002 fce3 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB1, 2, 10);
 8000f04:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f08:	230a      	movs	r3, #10
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	4839      	ldr	r0, [pc, #228]	; (8000ff4 <StartUpdate+0x214>)
 8000f0e:	f002 fcdc 	bl	80038ca <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	2110      	movs	r1, #16
 8000f16:	4835      	ldr	r0, [pc, #212]	; (8000fec <StartUpdate+0x20c>)
 8000f18:	f001 f9ce 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2140      	movs	r1, #64	; 0x40
 8000f20:	4832      	ldr	r0, [pc, #200]	; (8000fec <StartUpdate+0x20c>)
 8000f22:	f001 f9c9 	bl	80022b8 <HAL_GPIO_WritePin>

		//This part Configure 8 antenna (P20 to P27 on each MAX7301)
		bufferRISA1[0] = 0x54;
 8000f26:	2354      	movs	r3, #84	; 0x54
 8000f28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		bufferRISA1[1] = ConfigRISA[2].antEnable;
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <StartUpdate+0x204>)
 8000f2e:	789b      	ldrb	r3, [r3, #2]
 8000f30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		bufferRISA2[0] = 0x54;
 8000f34:	2354      	movs	r3, #84	; 0x54
 8000f36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		bufferRISA2[1] = ConfigRISA[5].antEnable;
 8000f3a:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <StartUpdate+0x204>)
 8000f3c:	795b      	ldrb	r3, [r3, #5]
 8000f3e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

		bufferRISB1[0] = 0x54;
 8000f42:	2354      	movs	r3, #84	; 0x54
 8000f44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		bufferRISB1[1] = ConfigRISB[2].antEnable;
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <StartUpdate+0x208>)
 8000f4a:	789b      	ldrb	r3, [r3, #2]
 8000f4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		bufferRISB2[0] = 0x54;
 8000f50:	2354      	movs	r3, #84	; 0x54
 8000f52:	f887 3020 	strb.w	r3, [r7, #32]
		bufferRISB2[1] = ConfigRISB[5].antEnable;
 8000f56:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <StartUpdate+0x208>)
 8000f58:	795b      	ldrb	r3, [r3, #5]
 8000f5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2110      	movs	r1, #16
 8000f62:	4822      	ldr	r0, [pc, #136]	; (8000fec <StartUpdate+0x20c>)
 8000f64:	f001 f9a8 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2140      	movs	r1, #64	; 0x40
 8000f6c:	481f      	ldr	r0, [pc, #124]	; (8000fec <StartUpdate+0x20c>)
 8000f6e:	f001 f9a3 	bl	80022b8 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA2, 2, 10);
 8000f72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f76:	230a      	movs	r3, #10
 8000f78:	2202      	movs	r2, #2
 8000f7a:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <StartUpdate+0x210>)
 8000f7c:	f002 fca5 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&bufferRISA1, 2, 10);
 8000f80:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8000f84:	230a      	movs	r3, #10
 8000f86:	2202      	movs	r2, #2
 8000f88:	4819      	ldr	r0, [pc, #100]	; (8000ff0 <StartUpdate+0x210>)
 8000f8a:	f002 fc9e 	bl	80038ca <HAL_SPI_Transmit>

		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB2, 2, 10);
 8000f8e:	f107 0120 	add.w	r1, r7, #32
 8000f92:	230a      	movs	r3, #10
 8000f94:	2202      	movs	r2, #2
 8000f96:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <StartUpdate+0x214>)
 8000f98:	f002 fc97 	bl	80038ca <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)&bufferRISB1, 2, 10);
 8000f9c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <StartUpdate+0x214>)
 8000fa6:	f002 fc90 	bl	80038ca <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2110      	movs	r1, #16
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <StartUpdate+0x20c>)
 8000fb0:	f001 f982 	bl	80022b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <StartUpdate+0x20c>)
 8000fba:	f001 f97d 	bl	80022b8 <HAL_GPIO_WritePin>

		uint8_t data[]= "Update completed\n";
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <StartUpdate+0x218>)
 8000fc0:	f107 040c 	add.w	r4, r7, #12
 8000fc4:	461d      	mov	r5, r3
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, data, sizeof(data),500);
 8000fce:	f107 010c 	add.w	r1, r7, #12
 8000fd2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fd6:	2212      	movs	r2, #18
 8000fd8:	4808      	ldr	r0, [pc, #32]	; (8000ffc <StartUpdate+0x21c>)
 8000fda:	f003 fa9b 	bl	8004514 <HAL_UART_Transmit>
  {       osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8000fde:	e703      	b.n	8000de8 <StartUpdate+0x8>
 8000fe0:	20000930 	.word	0x20000930
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	40020400 	.word	0x40020400
 8000ff0:	200002c8 	.word	0x200002c8
 8000ff4:	2000032c 	.word	0x2000032c
 8000ff8:	08008e50 	.word	0x08008e50
 8000ffc:	20000390 	.word	0x20000390

08001000 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001012:	f000 fb59 	bl	80016c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40001000 	.word	0x40001000

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	e7fe      	b.n	800102c <Error_Handler+0x8>
	...

08001030 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <HAL_MspInit+0x4c>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_MspInit+0x4c>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	210f      	movs	r1, #15
 800106a:	f06f 0001 	mvn.w	r0, #1
 800106e:	f000 fc27 	bl	80018c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08e      	sub	sp, #56	; 0x38
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_ETH_MspInit+0x158>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	f040 8096 	bne.w	80011d0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80010a4:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a8:	4a4c      	ldr	r2, [pc, #304]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ae:	6313      	str	r3, [r2, #48]	; 0x30
 80010b0:	4b4a      	ldr	r3, [pc, #296]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	623b      	str	r3, [r7, #32]
 80010ba:	6a3b      	ldr	r3, [r7, #32]
 80010bc:	4b47      	ldr	r3, [pc, #284]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	4a46      	ldr	r2, [pc, #280]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010c6:	6313      	str	r3, [r2, #48]	; 0x30
 80010c8:	4b44      	ldr	r3, [pc, #272]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4b41      	ldr	r3, [pc, #260]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d8:	4a40      	ldr	r2, [pc, #256]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80010de:	6313      	str	r3, [r2, #48]	; 0x30
 80010e0:	4b3e      	ldr	r3, [pc, #248]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ec:	4b3b      	ldr	r3, [pc, #236]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f0:	4a3a      	ldr	r2, [pc, #232]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6313      	str	r3, [r2, #48]	; 0x30
 80010f8:	4b38      	ldr	r3, [pc, #224]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b35      	ldr	r3, [pc, #212]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a34      	ldr	r2, [pc, #208]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b32      	ldr	r3, [pc, #200]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	4b2f      	ldr	r3, [pc, #188]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 800111e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001120:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	6313      	str	r3, [r2, #48]	; 0x30
 8001128:	4b2c      	ldr	r3, [pc, #176]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 8001136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001138:	4a28      	ldr	r2, [pc, #160]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 800113a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800113e:	6313      	str	r3, [r2, #48]	; 0x30
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <HAL_ETH_MspInit+0x15c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800114c:	2332      	movs	r3, #50	; 0x32
 800114e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800115c:	230b      	movs	r3, #11
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	4619      	mov	r1, r3
 8001166:	481e      	ldr	r0, [pc, #120]	; (80011e0 <HAL_ETH_MspInit+0x160>)
 8001168:	f000 fefa 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800116c:	2386      	movs	r3, #134	; 0x86
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001178:	2303      	movs	r3, #3
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800117c:	230b      	movs	r3, #11
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001184:	4619      	mov	r1, r3
 8001186:	4817      	ldr	r0, [pc, #92]	; (80011e4 <HAL_ETH_MspInit+0x164>)
 8001188:	f000 feea 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800119e:	230b      	movs	r3, #11
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	480f      	ldr	r0, [pc, #60]	; (80011e8 <HAL_ETH_MspInit+0x168>)
 80011aa:	f000 fed9 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011bc:	2303      	movs	r3, #3
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c0:	230b      	movs	r3, #11
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4808      	ldr	r0, [pc, #32]	; (80011ec <HAL_ETH_MspInit+0x16c>)
 80011cc:	f000 fec8 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011d0:	bf00      	nop
 80011d2:	3738      	adds	r7, #56	; 0x38
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40028000 	.word	0x40028000
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40021800 	.word	0x40021800

080011f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08e      	sub	sp, #56	; 0x38
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_SPI_MspInit+0x148>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d144      	bne.n	800129c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001212:	4b4a      	ldr	r3, [pc, #296]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001216:	4a49      	ldr	r2, [pc, #292]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	6453      	str	r3, [r2, #68]	; 0x44
 800121e:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001226:	623b      	str	r3, [r7, #32]
 8001228:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b44      	ldr	r3, [pc, #272]	; (800133c <HAL_SPI_MspInit+0x14c>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a43      	ldr	r2, [pc, #268]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b41      	ldr	r3, [pc, #260]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	4b3e      	ldr	r3, [pc, #248]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a3d      	ldr	r2, [pc, #244]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b3b      	ldr	r3, [pc, #236]	; (800133c <HAL_SPI_MspInit+0x14c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800125a:	2360      	movs	r3, #96	; 0x60
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800126a:	2305      	movs	r3, #5
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001272:	4619      	mov	r1, r3
 8001274:	4832      	ldr	r0, [pc, #200]	; (8001340 <HAL_SPI_MspInit+0x150>)
 8001276:	f000 fe73 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800127a:	2320      	movs	r3, #32
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001286:	2303      	movs	r3, #3
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800128a:	2305      	movs	r3, #5
 800128c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001292:	4619      	mov	r1, r3
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <HAL_SPI_MspInit+0x154>)
 8001296:	f000 fe63 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800129a:	e049      	b.n	8001330 <HAL_SPI_MspInit+0x140>
  else if(hspi->Instance==SPI2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_SPI_MspInit+0x158>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d144      	bne.n	8001330 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a24      	ldr	r2, [pc, #144]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b22      	ldr	r3, [pc, #136]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_SPI_MspInit+0x14c>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012ee:	230c      	movs	r3, #12
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	2302      	movs	r3, #2
 80012f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fa:	2303      	movs	r3, #3
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012fe:	2305      	movs	r3, #5
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <HAL_SPI_MspInit+0x15c>)
 800130a:	f000 fe29 	bl	8001f60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001320:	2305      	movs	r3, #5
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <HAL_SPI_MspInit+0x154>)
 800132c:	f000 fe18 	bl	8001f60 <HAL_GPIO_Init>
}
 8001330:	bf00      	nop
 8001332:	3738      	adds	r7, #56	; 0x38
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013000 	.word	0x40013000
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	40003800 	.word	0x40003800
 800134c:	40020800 	.word	0x40020800

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0aa      	sub	sp, #168	; 0xa8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2284      	movs	r2, #132	; 0x84
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f007 fc67 	bl	8008c44 <memset>
  if(huart->Instance==USART3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a22      	ldr	r2, [pc, #136]	; (8001404 <HAL_UART_MspInit+0xb4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d13c      	bne.n	80013fa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001384:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001386:	2300      	movs	r3, #0
 8001388:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fe00 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff fe43 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800139e:	4b1a      	ldr	r3, [pc, #104]	; (8001408 <HAL_UART_MspInit+0xb8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_UART_MspInit+0xb8>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a8:	6413      	str	r3, [r2, #64]	; 0x40
 80013aa:	4b17      	ldr	r3, [pc, #92]	; (8001408 <HAL_UART_MspInit+0xb8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b14      	ldr	r3, [pc, #80]	; (8001408 <HAL_UART_MspInit+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <HAL_UART_MspInit+0xb8>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_UART_MspInit+0xb8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	2301      	movs	r3, #1
 80013de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	; (800140c <HAL_UART_MspInit+0xbc>)
 80013f6:	f000 fdb3 	bl	8001f60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	37a8      	adds	r7, #168	; 0xa8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004800 	.word	0x40004800
 8001408:	40023800 	.word	0x40023800
 800140c:	40020c00 	.word	0x40020c00

08001410 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b0ac      	sub	sp, #176	; 0xb0
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	2284      	movs	r2, #132	; 0x84
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 fc07 	bl	8008c44 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800143e:	d159      	bne.n	80014f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001444:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4618      	mov	r0, r3
 8001452:	f001 fd9f 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800145c:	f7ff fde2 	bl	8001024 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <HAL_PCD_MspInit+0xec>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a25      	ldr	r2, [pc, #148]	; (80014fc <HAL_PCD_MspInit+0xec>)
 8001466:	f043 0301 	orr.w	r3, r3, #1
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <HAL_PCD_MspInit+0xec>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001478:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800147c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001492:	230a      	movs	r3, #10
 8001494:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800149c:	4619      	mov	r1, r3
 800149e:	4818      	ldr	r0, [pc, #96]	; (8001500 <HAL_PCD_MspInit+0xf0>)
 80014a0:	f000 fd5e 	bl	8001f60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014bc:	4619      	mov	r1, r3
 80014be:	4810      	ldr	r0, [pc, #64]	; (8001500 <HAL_PCD_MspInit+0xf0>)
 80014c0:	f000 fd4e 	bl	8001f60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_PCD_MspInit+0xec>)
 80014c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c8:	4a0c      	ldr	r2, [pc, #48]	; (80014fc <HAL_PCD_MspInit+0xec>)
 80014ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ce:	6353      	str	r3, [r2, #52]	; 0x34
 80014d0:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_PCD_MspInit+0xec>)
 80014d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_PCD_MspInit+0xec>)
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	4a06      	ldr	r2, [pc, #24]	; (80014fc <HAL_PCD_MspInit+0xec>)
 80014e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_PCD_MspInit+0xec>)
 80014ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014f4:	bf00      	nop
 80014f6:	37b0      	adds	r7, #176	; 0xb0
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000

08001504 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_InitTick+0xe0>)
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	4a32      	ldr	r2, [pc, #200]	; (80015e4 <HAL_InitTick+0xe0>)
 800151a:	f043 0310 	orr.w	r3, r3, #16
 800151e:	6413      	str	r3, [r2, #64]	; 0x40
 8001520:	4b30      	ldr	r3, [pc, #192]	; (80015e4 <HAL_InitTick+0xe0>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fcfa 	bl	8002f30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001546:	f001 fccb 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 800154a:	6378      	str	r0, [r7, #52]	; 0x34
 800154c:	e004      	b.n	8001558 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800154e:	f001 fcc7 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8001552:	4603      	mov	r3, r0
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <HAL_InitTick+0xe4>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	0c9b      	lsrs	r3, r3, #18
 8001562:	3b01      	subs	r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_InitTick+0xe8>)
 8001568:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <HAL_InitTick+0xec>)
 800156a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_InitTick+0xe8>)
 800156e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001572:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001574:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <HAL_InitTick+0xe8>)
 8001576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001578:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_InitTick+0xe8>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_InitTick+0xe8>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_InitTick+0xe8>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800158c:	4817      	ldr	r0, [pc, #92]	; (80015ec <HAL_InitTick+0xe8>)
 800158e:	f002 fc93 	bl	8003eb8 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001598:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800159c:	2b00      	cmp	r3, #0
 800159e:	d11b      	bne.n	80015d8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015a0:	4812      	ldr	r0, [pc, #72]	; (80015ec <HAL_InitTick+0xe8>)
 80015a2:	f002 fceb 	bl	8003f7c <HAL_TIM_Base_Start_IT>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d111      	bne.n	80015d8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015b4:	2036      	movs	r0, #54	; 0x36
 80015b6:	f000 f99f 	bl	80018f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d808      	bhi.n	80015d2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	2036      	movs	r0, #54	; 0x36
 80015c6:	f000 f97b 	bl	80018c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ca:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_InitTick+0xf0>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	e002      	b.n	80015d8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3738      	adds	r7, #56	; 0x38
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	2000093c 	.word	0x2000093c
 80015f0:	40001000 	.word	0x40001000
 80015f4:	20000014 	.word	0x20000014

080015f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015fc:	e7fe      	b.n	80015fc <NMI_Handler+0x4>

080015fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001602:	e7fe      	b.n	8001602 <HardFault_Handler+0x4>

08001604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001608:	e7fe      	b.n	8001608 <MemManage_Handler+0x4>

0800160a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160e:	e7fe      	b.n	800160e <BusFault_Handler+0x4>

08001610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <UsageFault_Handler+0x4>

08001616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM6_DAC_IRQHandler+0x10>)
 800162a:	f002 fd1f 	bl	800406c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000093c 	.word	0x2000093c

08001638 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	; (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	; (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001694 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001686:	f7ff ffd7 	bl	8001638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f007 faa7 	bl	8008bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168e:	f7fe ff41 	bl	8000514 <main>
  bx  lr    
 8001692:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001694:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80016a0:	08008fb4 	.word	0x08008fb4
  ldr r2, =_sbss
 80016a4:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80016a8:	2000539c 	.word	0x2000539c

080016ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC_IRQHandler>

080016ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b2:	2003      	movs	r0, #3
 80016b4:	f000 f8f9 	bl	80018aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b8:	200f      	movs	r0, #15
 80016ba:	f7ff ff23 	bl	8001504 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016be:	f7ff fcb7 	bl	8001030 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x20>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <HAL_IncTick+0x24>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a04      	ldr	r2, [pc, #16]	; (80016ec <HAL_IncTick+0x24>)
 80016da:	6013      	str	r3, [r2, #0]
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	20000018 	.word	0x20000018
 80016ec:	20000988 	.word	0x20000988

080016f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return uwTick;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <HAL_GetTick+0x14>)
 80016f6:	681b      	ldr	r3, [r3, #0]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000988 	.word	0x20000988

08001708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff ffee 	bl	80016f0 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001720:	d005      	beq.n	800172e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <HAL_Delay+0x44>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800172e:	bf00      	nop
 8001730:	f7ff ffde 	bl	80016f0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	429a      	cmp	r2, r3
 800173e:	d8f7      	bhi.n	8001730 <HAL_Delay+0x28>
  {
  }
}
 8001740:	bf00      	nop
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000018 	.word	0x20000018

08001750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800176c:	4013      	ands	r3, r2
 800176e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	4313      	orrs	r3, r2
 800177c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177e:	4a04      	ldr	r2, [pc, #16]	; (8001790 <__NVIC_SetPriorityGrouping+0x40>)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	60d3      	str	r3, [r2, #12]
}
 8001784:	bf00      	nop
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00
 8001794:	05fa0000 	.word	0x05fa0000

08001798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <__NVIC_GetPriorityGrouping+0x18>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0a1b      	lsrs	r3, r3, #8
 80017a2:	f003 0307 	and.w	r3, r3, #7
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db0b      	blt.n	80017de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	f003 021f 	and.w	r2, r3, #31
 80017cc:	4907      	ldr	r1, [pc, #28]	; (80017ec <__NVIC_EnableIRQ+0x38>)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	2001      	movs	r0, #1
 80017d6:	fa00 f202 	lsl.w	r2, r0, r2
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e100 	.word	0xe000e100

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	; (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	; (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	; 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ff4c 	bl	8001750 <__NVIC_SetPriorityGrouping>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d2:	f7ff ff61 	bl	8001798 <__NVIC_GetPriorityGrouping>
 80018d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	68b9      	ldr	r1, [r7, #8]
 80018dc:	6978      	ldr	r0, [r7, #20]
 80018de:	f7ff ffb1 	bl	8001844 <NVIC_EncodePriority>
 80018e2:	4602      	mov	r2, r0
 80018e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff80 	bl	80017f0 <__NVIC_SetPriority>
}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff54 	bl	80017b4 <__NVIC_EnableIRQ>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06a      	b.n	80019fc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800192c:	2b00      	cmp	r3, #0
 800192e:	d106      	bne.n	800193e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2223      	movs	r2, #35	; 0x23
 8001934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fba1 	bl	8001080 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_ETH_Init+0xf0>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	4a30      	ldr	r2, [pc, #192]	; (8001a04 <HAL_ETH_Init+0xf0>)
 8001944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001948:	6453      	str	r3, [r2, #68]	; 0x44
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_ETH_Init+0xf0>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_ETH_Init+0xf4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a2b      	ldr	r2, [pc, #172]	; (8001a08 <HAL_ETH_Init+0xf4>)
 800195c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001960:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001962:	4b29      	ldr	r3, [pc, #164]	; (8001a08 <HAL_ETH_Init+0xf4>)
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4927      	ldr	r1, [pc, #156]	; (8001a08 <HAL_ETH_Init+0xf4>)
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001970:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_ETH_Init+0xf4>)
 8001972:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800198a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800198c:	f7ff feb0 	bl	80016f0 <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001992:	e011      	b.n	80019b8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001994:	f7ff feac 	bl	80016f0 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019a2:	d909      	bls.n	80019b8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	22e0      	movs	r2, #224	; 0xe0
 80019b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e021      	b.n	80019fc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1e4      	bne.n	8001994 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f958 	bl	8001c80 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 f9ff 	bl	8001dd4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fa55 	bl	8001e86 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	461a      	mov	r2, r3
 80019e2:	2100      	movs	r1, #0
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f9bd 	bl	8001d64 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2210      	movs	r2, #16
 80019f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40013800 	.word	0x40013800

08001a0c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <ETH_SetMACConfig+0x15c>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	7c1b      	ldrb	r3, [r3, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <ETH_SetMACConfig+0x28>
 8001a2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a32:	e000      	b.n	8001a36 <ETH_SetMACConfig+0x2a>
 8001a34:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	7c5b      	ldrb	r3, [r3, #17]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <ETH_SetMACConfig+0x38>
 8001a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a42:	e000      	b.n	8001a46 <ETH_SetMACConfig+0x3a>
 8001a44:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a46:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001a4c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	7fdb      	ldrb	r3, [r3, #31]
 8001a52:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001a54:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001a5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	7f92      	ldrb	r2, [r2, #30]
 8001a60:	2a00      	cmp	r2, #0
 8001a62:	d102      	bne.n	8001a6a <ETH_SetMACConfig+0x5e>
 8001a64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a68:	e000      	b.n	8001a6c <ETH_SetMACConfig+0x60>
 8001a6a:	2200      	movs	r2, #0
                        macconf->Speed |
 8001a6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	7f1b      	ldrb	r3, [r3, #28]
 8001a72:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001a74:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001a7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	791b      	ldrb	r3, [r3, #4]
 8001a80:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001a82:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a8a:	2a00      	cmp	r2, #0
 8001a8c:	d102      	bne.n	8001a94 <ETH_SetMACConfig+0x88>
 8001a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a92:	e000      	b.n	8001a96 <ETH_SetMACConfig+0x8a>
 8001a94:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001a96:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	7bdb      	ldrb	r3, [r3, #15]
 8001a9c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001a9e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001aa4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001aac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7ff fe1e 	bl	8001708 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d101      	bne.n	8001afa <ETH_SetMACConfig+0xee>
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	e000      	b.n	8001afc <ETH_SetMACConfig+0xf0>
 8001afa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001afc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b02:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b0a:	2a01      	cmp	r2, #1
 8001b0c:	d101      	bne.n	8001b12 <ETH_SetMACConfig+0x106>
 8001b0e:	2208      	movs	r2, #8
 8001b10:	e000      	b.n	8001b14 <ETH_SetMACConfig+0x108>
 8001b12:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b14:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b1c:	2a01      	cmp	r2, #1
 8001b1e:	d101      	bne.n	8001b24 <ETH_SetMACConfig+0x118>
 8001b20:	2204      	movs	r2, #4
 8001b22:	e000      	b.n	8001b26 <ETH_SetMACConfig+0x11a>
 8001b24:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b26:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001b2e:	2a01      	cmp	r2, #1
 8001b30:	d101      	bne.n	8001b36 <ETH_SetMACConfig+0x12a>
 8001b32:	2202      	movs	r2, #2
 8001b34:	e000      	b.n	8001b38 <ETH_SetMACConfig+0x12c>
 8001b36:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff fdd9 	bl	8001708 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	619a      	str	r2, [r3, #24]
}
 8001b5e:	bf00      	nop
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	ff20810f 	.word	0xff20810f

08001b6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4b3d      	ldr	r3, [pc, #244]	; (8001c7c <ETH_SetDMAConfig+0x110>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	7b1b      	ldrb	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d102      	bne.n	8001b98 <ETH_SetDMAConfig+0x2c>
 8001b92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b96:	e000      	b.n	8001b9a <ETH_SetDMAConfig+0x2e>
 8001b98:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	7b5b      	ldrb	r3, [r3, #13]
 8001b9e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ba0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	7f52      	ldrb	r2, [r2, #29]
 8001ba6:	2a00      	cmp	r2, #0
 8001ba8:	d102      	bne.n	8001bb0 <ETH_SetDMAConfig+0x44>
 8001baa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001bae:	e000      	b.n	8001bb2 <ETH_SetDMAConfig+0x46>
 8001bb0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001bb2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	7b9b      	ldrb	r3, [r3, #14]
 8001bb8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001bba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001bc0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	7f1b      	ldrb	r3, [r3, #28]
 8001bc6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001bc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	7f9b      	ldrb	r3, [r3, #30]
 8001bce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001bd0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001bd6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bde:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001be0:	4313      	orrs	r3, r2
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f7ff fd80 	bl	8001708 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c10:	461a      	mov	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c20:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c26:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c2c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c34:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001c36:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001c3e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001c44:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c52:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c60:	2001      	movs	r0, #1
 8001c62:	f7ff fd51 	bl	8001708 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6013      	str	r3, [r2, #0]
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	f8de3f23 	.word	0xf8de3f23

08001c80 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0a6      	sub	sp, #152	; 0x98
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001ce2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ce6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ce8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001cf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fe86 	bl	8001a0c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d00:	2301      	movs	r3, #1
 8001d02:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d04:	2301      	movs	r3, #1
 8001d06:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d22:	2300      	movs	r3, #0
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d34:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d3a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001d42:	2301      	movs	r3, #1
 8001d44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff08 	bl	8001b6c <ETH_SetDMAConfig>
}
 8001d5c:	bf00      	nop
 8001d5e:	3798      	adds	r7, #152	; 0x98
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b087      	sub	sp, #28
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3305      	adds	r3, #5
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	3204      	adds	r2, #4
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <ETH_MACAddressConfig+0x68>)
 8001d86:	4413      	add	r3, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3303      	adds	r3, #3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	061a      	lsls	r2, r3, #24
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3301      	adds	r3, #1
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	4313      	orrs	r3, r2
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <ETH_MACAddressConfig+0x6c>)
 8001db6:	4413      	add	r3, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	6013      	str	r3, [r2, #0]
}
 8001dbe:	bf00      	nop
 8001dc0:	371c      	adds	r7, #28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40028040 	.word	0x40028040
 8001dd0:	40028044 	.word	0x40028044

08001dd4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e03e      	b.n	8001e60 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68d9      	ldr	r1, [r3, #12]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	3206      	adds	r2, #6
 8001e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d80c      	bhi.n	8001e44 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68d9      	ldr	r1, [r3, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	e004      	b.n	8001e4e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d9bd      	bls.n	8001de2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	611a      	str	r2, [r3, #16]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b085      	sub	sp, #20
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e046      	b.n	8001f22 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6919      	ldr	r1, [r3, #16]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	440b      	add	r3, r1
 8001ea4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ed8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	3212      	adds	r2, #18
 8001eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d80c      	bhi.n	8001f12 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	60da      	str	r2, [r3, #12]
 8001f10:	e004      	b.n	8001f1c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	461a      	mov	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d9b5      	bls.n	8001e94 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691a      	ldr	r2, [r3, #16]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f52:	60da      	str	r2, [r3, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e175      	b.n	800226c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8164 	bne.w	8002266 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d005      	beq.n	8001fb6 <HAL_GPIO_Init+0x56>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d130      	bne.n	8002018 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 0201 	and.w	r2, r3, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b03      	cmp	r3, #3
 8002022:	d017      	beq.n	8002054 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d123      	bne.n	80020a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	08da      	lsrs	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3208      	adds	r2, #8
 8002068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80be 	beq.w	8002266 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	4b66      	ldr	r3, [pc, #408]	; (8002284 <HAL_GPIO_Init+0x324>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	4a65      	ldr	r2, [pc, #404]	; (8002284 <HAL_GPIO_Init+0x324>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	; 0x44
 80020f6:	4b63      	ldr	r3, [pc, #396]	; (8002284 <HAL_GPIO_Init+0x324>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002102:	4a61      	ldr	r2, [pc, #388]	; (8002288 <HAL_GPIO_Init+0x328>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_GPIO_Init+0x32c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d037      	beq.n	800219e <HAL_GPIO_Init+0x23e>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a57      	ldr	r2, [pc, #348]	; (8002290 <HAL_GPIO_Init+0x330>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d031      	beq.n	800219a <HAL_GPIO_Init+0x23a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a56      	ldr	r2, [pc, #344]	; (8002294 <HAL_GPIO_Init+0x334>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02b      	beq.n	8002196 <HAL_GPIO_Init+0x236>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a55      	ldr	r2, [pc, #340]	; (8002298 <HAL_GPIO_Init+0x338>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d025      	beq.n	8002192 <HAL_GPIO_Init+0x232>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a54      	ldr	r2, [pc, #336]	; (800229c <HAL_GPIO_Init+0x33c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d01f      	beq.n	800218e <HAL_GPIO_Init+0x22e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a53      	ldr	r2, [pc, #332]	; (80022a0 <HAL_GPIO_Init+0x340>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x22a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a52      	ldr	r2, [pc, #328]	; (80022a4 <HAL_GPIO_Init+0x344>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x226>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_GPIO_Init+0x348>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x222>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a50      	ldr	r2, [pc, #320]	; (80022ac <HAL_GPIO_Init+0x34c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x21e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4f      	ldr	r2, [pc, #316]	; (80022b0 <HAL_GPIO_Init+0x350>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x21a>
 8002176:	2309      	movs	r3, #9
 8002178:	e012      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800217a:	230a      	movs	r3, #10
 800217c:	e010      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800217e:	2308      	movs	r3, #8
 8002180:	e00e      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002182:	2307      	movs	r3, #7
 8002184:	e00c      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002186:	2306      	movs	r3, #6
 8002188:	e00a      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800218a:	2305      	movs	r3, #5
 800218c:	e008      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800218e:	2304      	movs	r3, #4
 8002190:	e006      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002192:	2303      	movs	r3, #3
 8002194:	e004      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 8002196:	2302      	movs	r3, #2
 8002198:	e002      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <HAL_GPIO_Init+0x240>
 800219e:	2300      	movs	r3, #0
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	f002 0203 	and.w	r2, r2, #3
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	4093      	lsls	r3, r2
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021b0:	4935      	ldr	r1, [pc, #212]	; (8002288 <HAL_GPIO_Init+0x328>)
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	089b      	lsrs	r3, r3, #2
 80021b6:	3302      	adds	r3, #2
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021be:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <HAL_GPIO_Init+0x354>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e2:	4a34      	ldr	r2, [pc, #208]	; (80022b4 <HAL_GPIO_Init+0x354>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <HAL_GPIO_Init+0x354>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800220c:	4a29      	ldr	r2, [pc, #164]	; (80022b4 <HAL_GPIO_Init+0x354>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002212:	4b28      	ldr	r3, [pc, #160]	; (80022b4 <HAL_GPIO_Init+0x354>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002236:	4a1f      	ldr	r2, [pc, #124]	; (80022b4 <HAL_GPIO_Init+0x354>)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800223c:	4b1d      	ldr	r3, [pc, #116]	; (80022b4 <HAL_GPIO_Init+0x354>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d003      	beq.n	8002260 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_GPIO_Init+0x354>)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3301      	adds	r3, #1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b0f      	cmp	r3, #15
 8002270:	f67f ae86 	bls.w	8001f80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3724      	adds	r7, #36	; 0x24
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40013800 	.word	0x40013800
 800228c:	40020000 	.word	0x40020000
 8002290:	40020400 	.word	0x40020400
 8002294:	40020800 	.word	0x40020800
 8002298:	40020c00 	.word	0x40020c00
 800229c:	40021000 	.word	0x40021000
 80022a0:	40021400 	.word	0x40021400
 80022a4:	40021800 	.word	0x40021800
 80022a8:	40021c00 	.word	0x40021c00
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40022400 	.word	0x40022400
 80022b4:	40013c00 	.word	0x40013c00

080022b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	807b      	strh	r3, [r7, #2]
 80022c4:	4613      	mov	r3, r2
 80022c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c8:	787b      	ldrb	r3, [r7, #1]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ce:	887a      	ldrh	r2, [r7, #2]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022d4:	e003      	b.n	80022de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022d6:	887b      	ldrh	r3, [r7, #2]
 80022d8:	041a      	lsls	r2, r3, #16
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ec:	b08f      	sub	sp, #60	; 0x3c
 80022ee:	af0a      	add	r7, sp, #40	; 0x28
 80022f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e116      	b.n	800252a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff f87a 	bl	8001410 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2203      	movs	r2, #3
 8002320:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f002 fdca 	bl	8004ed4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	687e      	ldr	r6, [r7, #4]
 8002348:	466d      	mov	r5, sp
 800234a:	f106 0410 	add.w	r4, r6, #16
 800234e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002350:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002356:	e894 0003 	ldmia.w	r4, {r0, r1}
 800235a:	e885 0003 	stmia.w	r5, {r0, r1}
 800235e:	1d33      	adds	r3, r6, #4
 8002360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002362:	6838      	ldr	r0, [r7, #0]
 8002364:	f002 fd5e 	bl	8004e24 <USB_CoreInit>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d005      	beq.n	800237a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0d7      	b.n	800252a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2100      	movs	r1, #0
 8002380:	4618      	mov	r0, r3
 8002382:	f002 fdb8 	bl	8004ef6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
 800238a:	e04a      	b.n	8002422 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	333d      	adds	r3, #61	; 0x3d
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	333c      	adds	r3, #60	; 0x3c
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023b4:	7bfa      	ldrb	r2, [r7, #15]
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	b298      	uxth	r0, r3
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3344      	adds	r3, #68	; 0x44
 80023c8:	4602      	mov	r2, r0
 80023ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4413      	add	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3340      	adds	r3, #64	; 0x40
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	4413      	add	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	3348      	adds	r3, #72	; 0x48
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	334c      	adds	r3, #76	; 0x4c
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	3354      	adds	r3, #84	; 0x54
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	3301      	adds	r3, #1
 8002420:	73fb      	strb	r3, [r7, #15]
 8002422:	7bfa      	ldrb	r2, [r7, #15]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	d3af      	bcc.n	800238c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e044      	b.n	80024bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002432:	7bfa      	ldrb	r2, [r7, #15]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	3301      	adds	r3, #1
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d3b5      	bcc.n	8002432 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	687e      	ldr	r6, [r7, #4]
 80024ce:	466d      	mov	r5, sp
 80024d0:	f106 0410 	add.w	r4, r6, #16
 80024d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80024e4:	1d33      	adds	r3, r6, #4
 80024e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e8:	6838      	ldr	r0, [r7, #0]
 80024ea:	f002 fd51 	bl	8004f90 <USB_DevInit>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e014      	b.n	800252a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	2b01      	cmp	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f80b 	bl	8002534 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f002 ff0f 	bl	8005346 <USB_DevDisconnect>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002562:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_PCDEx_ActivateLPM+0x44>)
 8002564:	4313      	orrs	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	10000003 	.word	0x10000003

0800257c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a04      	ldr	r2, [pc, #16]	; (8002598 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40007000 	.word	0x40007000

0800259c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025a4:	2300      	movs	r3, #0
 80025a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e291      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8087 	beq.w	80026ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c0:	4b96      	ldr	r3, [pc, #600]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 030c 	and.w	r3, r3, #12
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d00c      	beq.n	80025e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025cc:	4b93      	ldr	r3, [pc, #588]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d112      	bne.n	80025fe <HAL_RCC_OscConfig+0x62>
 80025d8:	4b90      	ldr	r3, [pc, #576]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e4:	d10b      	bne.n	80025fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e6:	4b8d      	ldr	r3, [pc, #564]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d06c      	beq.n	80026cc <HAL_RCC_OscConfig+0x130>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d168      	bne.n	80026cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e26b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002606:	d106      	bne.n	8002616 <HAL_RCC_OscConfig+0x7a>
 8002608:	4b84      	ldr	r3, [pc, #528]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a83      	ldr	r2, [pc, #524]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800260e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002612:	6013      	str	r3, [r2, #0]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0x9c>
 800261e:	4b7f      	ldr	r3, [pc, #508]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a7e      	ldr	r2, [pc, #504]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b7c      	ldr	r3, [pc, #496]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a7b      	ldr	r2, [pc, #492]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e01d      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0xc0>
 8002642:	4b76      	ldr	r3, [pc, #472]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a75      	ldr	r2, [pc, #468]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b73      	ldr	r3, [pc, #460]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a72      	ldr	r2, [pc, #456]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e00b      	b.n	8002674 <HAL_RCC_OscConfig+0xd8>
 800265c:	4b6f      	ldr	r3, [pc, #444]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6e      	ldr	r2, [pc, #440]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002666:	6013      	str	r3, [r2, #0]
 8002668:	4b6c      	ldr	r3, [pc, #432]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6b      	ldr	r2, [pc, #428]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800266e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d013      	beq.n	80026a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff f838 	bl	80016f0 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002684:	f7ff f834 	bl	80016f0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b64      	cmp	r3, #100	; 0x64
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e21f      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b61      	ldr	r3, [pc, #388]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0xe8>
 80026a2:	e014      	b.n	80026ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff f824 	bl	80016f0 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff f820 	bl	80016f0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	; 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e20b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	4b57      	ldr	r3, [pc, #348]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x110>
 80026ca:	e000      	b.n	80026ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d069      	beq.n	80027ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026da:	4b50      	ldr	r3, [pc, #320]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 030c 	and.w	r3, r3, #12
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026e6:	4b4d      	ldr	r3, [pc, #308]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 030c 	and.w	r3, r3, #12
 80026ee:	2b08      	cmp	r3, #8
 80026f0:	d11c      	bne.n	800272c <HAL_RCC_OscConfig+0x190>
 80026f2:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d116      	bne.n	800272c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_RCC_OscConfig+0x17a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d001      	beq.n	8002716 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e1df      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b41      	ldr	r3, [pc, #260]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	493d      	ldr	r1, [pc, #244]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	e040      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d023      	beq.n	800277c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002734:	4b39      	ldr	r3, [pc, #228]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a38      	ldr	r2, [pc, #224]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe ffd6 	bl	80016f0 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002748:	f7fe ffd2 	bl	80016f0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1bd      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275a:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002766:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4929      	ldr	r1, [pc, #164]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
 800277a:	e018      	b.n	80027ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277c:	4b27      	ldr	r3, [pc, #156]	; (800281c <HAL_RCC_OscConfig+0x280>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a26      	ldr	r2, [pc, #152]	; (800281c <HAL_RCC_OscConfig+0x280>)
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe ffb2 	bl	80016f0 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe ffae 	bl	80016f0 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e199      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b1e      	ldr	r3, [pc, #120]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d038      	beq.n	800282c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d019      	beq.n	80027f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027c8:	f043 0301 	orr.w	r3, r3, #1
 80027cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe ff8f 	bl	80016f0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d6:	f7fe ff8b 	bl	80016f0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e176      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f0      	beq.n	80027d6 <HAL_RCC_OscConfig+0x23a>
 80027f4:	e01a      	b.n	800282c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_RCC_OscConfig+0x280>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe ff75 	bl	80016f0 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002808:	e00a      	b.n	8002820 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe ff71 	bl	80016f0 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d903      	bls.n	8002820 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e15c      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
 800281c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b91      	ldr	r3, [pc, #580]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ee      	bne.n	800280a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a4 	beq.w	8002982 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283a:	4b8b      	ldr	r3, [pc, #556]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10d      	bne.n	8002862 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002846:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a87      	ldr	r2, [pc, #540]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b85      	ldr	r3, [pc, #532]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002862:	4b82      	ldr	r3, [pc, #520]	; (8002a6c <HAL_RCC_OscConfig+0x4d0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800286e:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x4d0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a7e      	ldr	r2, [pc, #504]	; (8002a6c <HAL_RCC_OscConfig+0x4d0>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7fe ff39 	bl	80016f0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe ff35 	bl	80016f0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e120      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <HAL_RCC_OscConfig+0x4d0>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x31a>
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a6e      	ldr	r2, [pc, #440]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	e02d      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x33c>
 80028be:	4b6a      	ldr	r3, [pc, #424]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a69      	ldr	r2, [pc, #420]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a66      	ldr	r2, [pc, #408]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	e01c      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d10c      	bne.n	80028fa <HAL_RCC_OscConfig+0x35e>
 80028e0:	4b61      	ldr	r3, [pc, #388]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4a60      	ldr	r2, [pc, #384]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	6713      	str	r3, [r2, #112]	; 0x70
 80028ec:	4b5e      	ldr	r3, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4a5d      	ldr	r2, [pc, #372]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6713      	str	r3, [r2, #112]	; 0x70
 80028f8:	e00b      	b.n	8002912 <HAL_RCC_OscConfig+0x376>
 80028fa:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a5a      	ldr	r2, [pc, #360]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290a:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d015      	beq.n	8002946 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291a:	f7fe fee9 	bl	80016f0 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002920:	e00a      	b.n	8002938 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002922:	f7fe fee5 	bl	80016f0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002930:	4293      	cmp	r3, r2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0ce      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002938:	4b4b      	ldr	r3, [pc, #300]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ee      	beq.n	8002922 <HAL_RCC_OscConfig+0x386>
 8002944:	e014      	b.n	8002970 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe fed3 	bl	80016f0 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fecf 	bl	80016f0 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ee      	bne.n	800294e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002976:	4b3c      	ldr	r3, [pc, #240]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	4a3b      	ldr	r2, [pc, #236]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80a4 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298c:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f003 030c 	and.w	r3, r3, #12
 8002994:	2b08      	cmp	r3, #8
 8002996:	d06b      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d149      	bne.n	8002a34 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a30      	ldr	r2, [pc, #192]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fea0 	bl	80016f0 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fe9c 	bl	80016f0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e087      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c6:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e8:	085b      	lsrs	r3, r3, #1
 80029ea:	3b01      	subs	r3, #1
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	4313      	orrs	r3, r2
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029fe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fe70 	bl	80016f0 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fe6c 	bl	80016f0 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e057      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x478>
 8002a32:	e04f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7fe fe56 	bl	80016f0 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fe52 	bl	80016f0 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e03d      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x4ac>
 8002a66:	e035      	b.n	8002ad4 <HAL_RCC_OscConfig+0x538>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a70:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_RCC_OscConfig+0x544>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d028      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d121      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d11a      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d111      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	085b      	lsrs	r3, r3, #1
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0d0      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b6a      	ldr	r3, [pc, #424]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 030f 	and.w	r3, r3, #15
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d910      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b67      	ldr	r3, [pc, #412]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 020f 	bic.w	r2, r3, #15
 8002b12:	4965      	ldr	r1, [pc, #404]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0b8      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b44:	4b59      	ldr	r3, [pc, #356]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	4a58      	ldr	r2, [pc, #352]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b5c:	4b53      	ldr	r3, [pc, #332]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b50      	ldr	r3, [pc, #320]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	494d      	ldr	r1, [pc, #308]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d040      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8e:	4b47      	ldr	r3, [pc, #284]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d115      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e07f      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b41      	ldr	r3, [pc, #260]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e073      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e06b      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4936      	ldr	r1, [pc, #216]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fd8a 	bl	80016f0 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fe fd86 	bl	80016f0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e053      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b27      	ldr	r3, [pc, #156]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 030f 	and.w	r3, r3, #15
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d210      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b24      	ldr	r3, [pc, #144]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 020f 	bic.w	r2, r3, #15
 8002c1e:	4922      	ldr	r1, [pc, #136]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d001      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e032      	b.n	8002c9e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c44:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4916      	ldr	r1, [pc, #88]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d009      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	490e      	ldr	r1, [pc, #56]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c76:	f000 f821 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <HAL_RCC_ClockConfig+0x1c8>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	490a      	ldr	r1, [pc, #40]	; (8002cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002c88:	5ccb      	ldrb	r3, [r1, r3]
 8002c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8e:	4a09      	ldr	r2, [pc, #36]	; (8002cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <HAL_RCC_ClockConfig+0x1d4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fc34 	bl	8001504 <HAL_InitTick>

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023c00 	.word	0x40023c00
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	08008f2c 	.word	0x08008f2c
 8002cb4:	20000010 	.word	0x20000010
 8002cb8:	20000014 	.word	0x20000014

08002cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc0:	b094      	sub	sp, #80	; 0x50
 8002cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ccc:	2300      	movs	r3, #0
 8002cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cd4:	4b79      	ldr	r3, [pc, #484]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f003 030c 	and.w	r3, r3, #12
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d00d      	beq.n	8002cfc <HAL_RCC_GetSysClockFreq+0x40>
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	f200 80e1 	bhi.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d003      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cee:	e0db      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf0:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cf2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf4:	e0db      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cf6:	4b73      	ldr	r3, [pc, #460]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cfa:	e0d8      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cfc:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d04:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d06:	4b6d      	ldr	r3, [pc, #436]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d063      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d12:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	099b      	lsrs	r3, r3, #6
 8002d18:	2200      	movs	r2, #0
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d24:	633b      	str	r3, [r7, #48]	; 0x30
 8002d26:	2300      	movs	r3, #0
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
 8002d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d2e:	4622      	mov	r2, r4
 8002d30:	462b      	mov	r3, r5
 8002d32:	f04f 0000 	mov.w	r0, #0
 8002d36:	f04f 0100 	mov.w	r1, #0
 8002d3a:	0159      	lsls	r1, r3, #5
 8002d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d40:	0150      	lsls	r0, r2, #5
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4621      	mov	r1, r4
 8002d48:	1a51      	subs	r1, r2, r1
 8002d4a:	6139      	str	r1, [r7, #16]
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	f04f 0300 	mov.w	r3, #0
 8002d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d60:	4659      	mov	r1, fp
 8002d62:	018b      	lsls	r3, r1, #6
 8002d64:	4651      	mov	r1, sl
 8002d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d6a:	4651      	mov	r1, sl
 8002d6c:	018a      	lsls	r2, r1, #6
 8002d6e:	4651      	mov	r1, sl
 8002d70:	ebb2 0801 	subs.w	r8, r2, r1
 8002d74:	4659      	mov	r1, fp
 8002d76:	eb63 0901 	sbc.w	r9, r3, r1
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d8e:	4690      	mov	r8, r2
 8002d90:	4699      	mov	r9, r3
 8002d92:	4623      	mov	r3, r4
 8002d94:	eb18 0303 	adds.w	r3, r8, r3
 8002d98:	60bb      	str	r3, [r7, #8]
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	eb49 0303 	adc.w	r3, r9, r3
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dae:	4629      	mov	r1, r5
 8002db0:	024b      	lsls	r3, r1, #9
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db8:	4621      	mov	r1, r4
 8002dba:	024a      	lsls	r2, r1, #9
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dcc:	f7fd fa20 	bl	8000210 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd8:	e058      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	2200      	movs	r2, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	4611      	mov	r1, r2
 8002de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dea:	623b      	str	r3, [r7, #32]
 8002dec:	2300      	movs	r3, #0
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002df4:	4642      	mov	r2, r8
 8002df6:	464b      	mov	r3, r9
 8002df8:	f04f 0000 	mov.w	r0, #0
 8002dfc:	f04f 0100 	mov.w	r1, #0
 8002e00:	0159      	lsls	r1, r3, #5
 8002e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e06:	0150      	lsls	r0, r2, #5
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	4641      	mov	r1, r8
 8002e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e12:	4649      	mov	r1, r9
 8002e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e30:	eb63 050b 	sbc.w	r5, r3, fp
 8002e34:	f04f 0200 	mov.w	r2, #0
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	00eb      	lsls	r3, r5, #3
 8002e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e42:	00e2      	lsls	r2, r4, #3
 8002e44:	4614      	mov	r4, r2
 8002e46:	461d      	mov	r5, r3
 8002e48:	4643      	mov	r3, r8
 8002e4a:	18e3      	adds	r3, r4, r3
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	464b      	mov	r3, r9
 8002e50:	eb45 0303 	adc.w	r3, r5, r3
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e62:	4629      	mov	r1, r5
 8002e64:	028b      	lsls	r3, r1, #10
 8002e66:	4621      	mov	r1, r4
 8002e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	028a      	lsls	r2, r1, #10
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	2200      	movs	r2, #0
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	61fa      	str	r2, [r7, #28]
 8002e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e80:	f7fd f9c6 	bl	8000210 <__aeabi_uldivmod>
 8002e84:	4602      	mov	r2, r0
 8002e86:	460b      	mov	r3, r1
 8002e88:	4613      	mov	r3, r2
 8002e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	3301      	adds	r3, #1
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea6:	e002      	b.n	8002eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3750      	adds	r7, #80	; 0x50
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	00f42400 	.word	0x00f42400
 8002ec4:	007a1200 	.word	0x007a1200

08002ec8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <HAL_RCC_GetHCLKFreq+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	20000010 	.word	0x20000010

08002ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ee4:	f7ff fff0 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	0a9b      	lsrs	r3, r3, #10
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	4903      	ldr	r1, [pc, #12]	; (8002f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40023800 	.word	0x40023800
 8002f04:	08008f3c 	.word	0x08008f3c

08002f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f0c:	f7ff ffdc 	bl	8002ec8 <HAL_RCC_GetHCLKFreq>
 8002f10:	4602      	mov	r2, r0
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	0b5b      	lsrs	r3, r3, #13
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	4903      	ldr	r1, [pc, #12]	; (8002f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f1e:	5ccb      	ldrb	r3, [r1, r3]
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	08008f3c 	.word	0x08008f3c

08002f30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	220f      	movs	r2, #15
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_GetClockConfig+0x5c>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f003 0203 	and.w	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <HAL_RCC_GetClockConfig+0x5c>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f58:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <HAL_RCC_GetClockConfig+0x5c>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <HAL_RCC_GetClockConfig+0x5c>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	08db      	lsrs	r3, r3, #3
 8002f6a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_RCC_GetClockConfig+0x60>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 020f 	and.w	r2, r3, #15
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	40023c00 	.word	0x40023c00

08002f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d012      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fbc:	4b69      	ldr	r3, [pc, #420]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a68      	ldr	r2, [pc, #416]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	4b66      	ldr	r3, [pc, #408]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	4964      	ldr	r1, [pc, #400]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d017      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fee:	4b5d      	ldr	r3, [pc, #372]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	4959      	ldr	r1, [pc, #356]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800300c:	d101      	bne.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800300e:	2301      	movs	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800301a:	2301      	movs	r3, #1
 800301c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d017      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800302a:	4b4e      	ldr	r3, [pc, #312]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	494a      	ldr	r1, [pc, #296]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003048:	d101      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800304a:	2301      	movs	r3, #1
 800304c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003056:	2301      	movs	r3, #1
 8003058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0320 	and.w	r3, r3, #32
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 808b 	beq.w	800318e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003078:	4b3a      	ldr	r3, [pc, #232]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a39      	ldr	r2, [pc, #228]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
 8003084:	4b37      	ldr	r3, [pc, #220]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a34      	ldr	r2, [pc, #208]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800309c:	f7fe fb28 	bl	80016f0 <HAL_GetTick>
 80030a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030a4:	f7fe fb24 	bl	80016f0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e357      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030c2:	4b28      	ldr	r3, [pc, #160]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d035      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d02e      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ea:	4b1e      	ldr	r3, [pc, #120]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003100:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d114      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003114:	f7fe faec 	bl	80016f0 <HAL_GetTick>
 8003118:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	e00a      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800311c:	f7fe fae8 	bl	80016f0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e319      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0ee      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800314a:	d111      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003158:	4b04      	ldr	r3, [pc, #16]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800315a:	400b      	ands	r3, r1
 800315c:	4901      	ldr	r1, [pc, #4]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
 8003162:	e00b      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003164:	40023800 	.word	0x40023800
 8003168:	40007000 	.word	0x40007000
 800316c:	0ffffcff 	.word	0x0ffffcff
 8003170:	4baa      	ldr	r3, [pc, #680]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4aa9      	ldr	r2, [pc, #676]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003176:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	4ba7      	ldr	r3, [pc, #668]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003188:	49a4      	ldr	r1, [pc, #656]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800318a:	4313      	orrs	r3, r2
 800318c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800319a:	4ba0      	ldr	r3, [pc, #640]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a0:	4a9e      	ldr	r2, [pc, #632]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031aa:	4b9c      	ldr	r3, [pc, #624]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	4999      	ldr	r1, [pc, #612]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031c8:	4b94      	ldr	r3, [pc, #592]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031d6:	4991      	ldr	r1, [pc, #580]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031ea:	4b8c      	ldr	r3, [pc, #560]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031f8:	4988      	ldr	r1, [pc, #544]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800320c:	4b83      	ldr	r3, [pc, #524]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003212:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321a:	4980      	ldr	r1, [pc, #512]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800322e:	4b7b      	ldr	r3, [pc, #492]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003234:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323c:	4977      	ldr	r1, [pc, #476]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003250:	4b72      	ldr	r3, [pc, #456]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f023 0203 	bic.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	496f      	ldr	r1, [pc, #444]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	f023 020c 	bic.w	r2, r3, #12
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003280:	4966      	ldr	r1, [pc, #408]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003294:	4b61      	ldr	r3, [pc, #388]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	495e      	ldr	r1, [pc, #376]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b6:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c4:	4955      	ldr	r1, [pc, #340]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	494d      	ldr	r1, [pc, #308]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80032fa:	4b48      	ldr	r3, [pc, #288]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003308:	4944      	ldr	r1, [pc, #272]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800330a:	4313      	orrs	r3, r2
 800330c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800331c:	4b3f      	ldr	r3, [pc, #252]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003322:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	493c      	ldr	r1, [pc, #240]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332c:	4313      	orrs	r3, r2
 800332e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003344:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334c:	4933      	ldr	r1, [pc, #204]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334e:	4313      	orrs	r3, r2
 8003350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003360:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003366:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800336e:	492b      	ldr	r1, [pc, #172]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d011      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003388:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003390:	4922      	ldr	r1, [pc, #136]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800339c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033a2:	2301      	movs	r3, #1
 80033a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d0:	4912      	ldr	r1, [pc, #72]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00b      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033f4:	4909      	ldr	r1, [pc, #36]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d006      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80d9 	beq.w	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003410:	4b02      	ldr	r3, [pc, #8]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a01      	ldr	r2, [pc, #4]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003416:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800341c:	40023800 	.word	0x40023800
 8003420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003422:	f7fe f965 	bl	80016f0 <HAL_GetTick>
 8003426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003428:	e008      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800342a:	f7fe f961 	bl	80016f0 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b64      	cmp	r3, #100	; 0x64
 8003436:	d901      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e194      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800343c:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d021      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003458:	2b00      	cmp	r3, #0
 800345a:	d11d      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800345c:	4b64      	ldr	r3, [pc, #400]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003462:	0c1b      	lsrs	r3, r3, #16
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800346a:	4b61      	ldr	r3, [pc, #388]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800346c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003470:	0e1b      	lsrs	r3, r3, #24
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	019a      	lsls	r2, r3, #6
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	041b      	lsls	r3, r3, #16
 8003482:	431a      	orrs	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	061b      	lsls	r3, r3, #24
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	071b      	lsls	r3, r3, #28
 8003490:	4957      	ldr	r1, [pc, #348]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d004      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ac:	d00a      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02e      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c2:	d129      	bne.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034c4:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ca:	0c1b      	lsrs	r3, r3, #16
 80034cc:	f003 0303 	and.w	r3, r3, #3
 80034d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034d2:	4b47      	ldr	r3, [pc, #284]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d8:	0f1b      	lsrs	r3, r3, #28
 80034da:	f003 0307 	and.w	r3, r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	019a      	lsls	r2, r3, #6
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	041b      	lsls	r3, r3, #16
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	061b      	lsls	r3, r3, #24
 80034f2:	431a      	orrs	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	071b      	lsls	r3, r3, #28
 80034f8:	493d      	ldr	r1, [pc, #244]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003506:	f023 021f 	bic.w	r2, r3, #31
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	3b01      	subs	r3, #1
 8003510:	4937      	ldr	r1, [pc, #220]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d01d      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800352a:	0e1b      	lsrs	r3, r3, #24
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003538:	0f1b      	lsrs	r3, r3, #28
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	019a      	lsls	r2, r3, #6
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	041b      	lsls	r3, r3, #16
 800354c:	431a      	orrs	r2, r3
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	431a      	orrs	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	071b      	lsls	r3, r3, #28
 8003558:	4925      	ldr	r1, [pc, #148]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d011      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	019a      	lsls	r2, r3, #6
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	041b      	lsls	r3, r3, #16
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	071b      	lsls	r3, r3, #28
 8003588:	4919      	ldr	r1, [pc, #100]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800358a:	4313      	orrs	r3, r2
 800358c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003590:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800359a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fe f8a8 	bl	80016f0 <HAL_GetTick>
 80035a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a4:	f7fe f8a4 	bl	80016f0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e0d7      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035b6:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	f040 80cd 	bne.w	8003764 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035ca:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d6:	f7fe f88b 	bl	80016f0 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035dc:	e00a      	b.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035de:	f7fe f887 	bl	80016f0 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b64      	cmp	r3, #100	; 0x64
 80035ea:	d903      	bls.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e0ba      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80035f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035f4:	4b5e      	ldr	r3, [pc, #376]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003600:	d0ed      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02e      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2b00      	cmp	r3, #0
 8003628:	d12a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800362a:	4b51      	ldr	r3, [pc, #324]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003638:	4b4d      	ldr	r3, [pc, #308]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	0f1b      	lsrs	r3, r3, #28
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	019a      	lsls	r2, r3, #6
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	431a      	orrs	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	071b      	lsls	r3, r3, #28
 800365e:	4944      	ldr	r1, [pc, #272]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003666:	4b42      	ldr	r3, [pc, #264]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800366c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	021b      	lsls	r3, r3, #8
 8003678:	493d      	ldr	r1, [pc, #244]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d022      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003694:	d11d      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003696:	4b36      	ldr	r3, [pc, #216]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	0e1b      	lsrs	r3, r3, #24
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a4:	4b32      	ldr	r3, [pc, #200]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	0f1b      	lsrs	r3, r3, #28
 80036ac:	f003 0307 	and.w	r3, r3, #7
 80036b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	019a      	lsls	r2, r3, #6
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	431a      	orrs	r2, r3
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	061b      	lsls	r3, r3, #24
 80036c4:	431a      	orrs	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	071b      	lsls	r3, r3, #28
 80036ca:	4929      	ldr	r1, [pc, #164]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d028      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	0e1b      	lsrs	r3, r3, #24
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036ec:	4b20      	ldr	r3, [pc, #128]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	0c1b      	lsrs	r3, r3, #16
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	019a      	lsls	r2, r3, #6
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	431a      	orrs	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	071b      	lsls	r3, r3, #28
 8003712:	4917      	ldr	r1, [pc, #92]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800371c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4911      	ldr	r1, [pc, #68]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd ffd8 	bl	80016f0 <HAL_GetTick>
 8003740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003744:	f7fd ffd4 	bl	80016f0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e007      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800375e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003762:	d1ef      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3720      	adds	r7, #32
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40023800 	.word	0x40023800

08003774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e09d      	b.n	80038c2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	2b00      	cmp	r3, #0
 800378c:	d108      	bne.n	80037a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003796:	d009      	beq.n	80037ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	61da      	str	r2, [r3, #28]
 800379e:	e005      	b.n	80037ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f7fd fd12 	bl	80011f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037ec:	d902      	bls.n	80037f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	e002      	b.n	80037fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80037f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003802:	d007      	beq.n	8003814 <HAL_SPI_Init+0xa0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800380c:	d002      	beq.n	8003814 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	ea42 0103 	orr.w	r1, r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	f003 0204 	and.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003890:	ea42 0103 	orr.w	r1, r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b088      	sub	sp, #32
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4613      	mov	r3, r2
 80038d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_SPI_Transmit+0x22>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e158      	b.n	8003b9e <HAL_SPI_Transmit+0x2d4>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038f4:	f7fd fefc 	bl	80016f0 <HAL_GetTick>
 80038f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d002      	beq.n	8003910 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800390a:	2302      	movs	r3, #2
 800390c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800390e:	e13d      	b.n	8003b8c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_SPI_Transmit+0x52>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003920:	e134      	b.n	8003b8c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2203      	movs	r2, #3
 8003926:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	88fa      	ldrh	r2, [r7, #6]
 800393a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396c:	d10f      	bne.n	800398e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d007      	beq.n	80039ac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039b4:	d94b      	bls.n	8003a4e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Transmit+0xfa>
 80039be:	8afb      	ldrh	r3, [r7, #22]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d13e      	bne.n	8003a42 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d4:	1c9a      	adds	r2, r3, #2
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039e8:	e02b      	b.n	8003a42 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d112      	bne.n	8003a1e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	881a      	ldrh	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	1c9a      	adds	r2, r3, #2
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a1c:	e011      	b.n	8003a42 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a1e:	f7fd fe67 	bl	80016f0 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d803      	bhi.n	8003a36 <HAL_SPI_Transmit+0x16c>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a34:	d102      	bne.n	8003a3c <HAL_SPI_Transmit+0x172>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a40:	e0a4      	b.n	8003b8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1ce      	bne.n	80039ea <HAL_SPI_Transmit+0x120>
 8003a4c:	e07c      	b.n	8003b48 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Transmit+0x192>
 8003a56:	8afb      	ldrh	r3, [r7, #22]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d170      	bne.n	8003b3e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d912      	bls.n	8003a8c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b02      	subs	r3, #2
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a8a:	e058      	b.n	8003b3e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ab2:	e044      	b.n	8003b3e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d12b      	bne.n	8003b1a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d912      	bls.n	8003af2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	881a      	ldrh	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3b02      	subs	r3, #2
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003af0:	e025      	b.n	8003b3e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	3b01      	subs	r3, #1
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b18:	e011      	b.n	8003b3e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1a:	f7fd fde9 	bl	80016f0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d803      	bhi.n	8003b32 <HAL_SPI_Transmit+0x268>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b30:	d102      	bne.n	8003b38 <HAL_SPI_Transmit+0x26e>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b3c:	e026      	b.n	8003b8c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1b5      	bne.n	8003ab4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	6839      	ldr	r1, [r7, #0]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f949 	bl	8003de4 <SPI_EndRxTxTransaction>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b66:	2300      	movs	r3, #0
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e000      	b.n	8003b8c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003b8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003b9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	603b      	str	r3, [r7, #0]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bb8:	f7fd fd9a 	bl	80016f0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bc8:	f7fd fd92 	bl	80016f0 <HAL_GetTick>
 8003bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bce:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	015b      	lsls	r3, r3, #5
 8003bd4:	0d1b      	lsrs	r3, r3, #20
 8003bd6:	69fa      	ldr	r2, [r7, #28]
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bde:	e054      	b.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be6:	d050      	beq.n	8003c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003be8:	f7fd fd82 	bl	80016f0 <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d902      	bls.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d13d      	bne.n	8003c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c16:	d111      	bne.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c20:	d004      	beq.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2a:	d107      	bne.n	8003c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c44:	d10f      	bne.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e017      	b.n	8003caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4013      	ands	r3, r2
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	bf0c      	ite	eq
 8003c9a:	2301      	moveq	r3, #1
 8003c9c:	2300      	movne	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d19b      	bne.n	8003be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000010 	.word	0x20000010

08003cb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08a      	sub	sp, #40	; 0x28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cca:	f7fd fd11 	bl	80016f0 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cda:	f7fd fd09 	bl	80016f0 <HAL_GetTick>
 8003cde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	00da      	lsls	r2, r3, #3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	0d1b      	lsrs	r3, r3, #20
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d00:	e060      	b.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d08:	d107      	bne.n	8003d1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d104      	bne.n	8003d1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d20:	d050      	beq.n	8003dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d22:	f7fd fce5 	bl	80016f0 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d902      	bls.n	8003d38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d13d      	bne.n	8003db4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d50:	d111      	bne.n	8003d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5a:	d004      	beq.n	8003d66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d64:	d107      	bne.n	8003d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7e:	d10f      	bne.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e010      	b.n	8003dd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d196      	bne.n	8003d02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3728      	adds	r7, #40	; 0x28
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000010 	.word	0x20000010

08003de4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f7ff ff5b 	bl	8003cb8 <SPI_WaitFifoStateUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e046      	b.n	8003ea6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <SPI_EndRxTxTransaction+0xcc>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a25      	ldr	r2, [pc, #148]	; (8003eb4 <SPI_EndRxTxTransaction+0xd0>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0d5b      	lsrs	r3, r3, #21
 8003e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e36:	d112      	bne.n	8003e5e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2180      	movs	r1, #128	; 0x80
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f7ff feb0 	bl	8003ba8 <SPI_WaitFlagStateUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e023      	b.n	8003ea6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d0f2      	beq.n	8003e5e <SPI_EndRxTxTransaction+0x7a>
 8003e78:	e000      	b.n	8003e7c <SPI_EndRxTxTransaction+0x98>
        break;
 8003e7a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff ff15 	bl	8003cb8 <SPI_WaitFifoStateUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d007      	beq.n	8003ea4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e98:	f043 0220 	orr.w	r2, r3, #32
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e000      	b.n	8003ea6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000010 	.word	0x20000010
 8003eb4:	165e9f81 	.word	0x165e9f81

08003eb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e049      	b.n	8003f5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 f841 	bl	8003f66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f000 fa00 	bl	80042fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f6e:	bf00      	nop
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e054      	b.n	800403e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2202      	movs	r2, #2
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0201 	orr.w	r2, r2, #1
 8003faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a26      	ldr	r2, [pc, #152]	; (800404c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d022      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d01d      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d018      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a21      	ldr	r2, [pc, #132]	; (8004054 <HAL_TIM_Base_Start_IT+0xd8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a1f      	ldr	r2, [pc, #124]	; (8004058 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d00e      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_TIM_Base_Start_IT+0xe0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d009      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <HAL_TIM_Base_Start_IT+0xe4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d004      	beq.n	8003ffc <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d115      	bne.n	8004028 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	4b19      	ldr	r3, [pc, #100]	; (8004068 <HAL_TIM_Base_Start_IT+0xec>)
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b06      	cmp	r3, #6
 800400c:	d015      	beq.n	800403a <HAL_TIM_Base_Start_IT+0xbe>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	d011      	beq.n	800403a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004026:	e008      	b.n	800403a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e000      	b.n	800403c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40010000 	.word	0x40010000
 8004050:	40000400 	.word	0x40000400
 8004054:	40000800 	.word	0x40000800
 8004058:	40000c00 	.word	0x40000c00
 800405c:	40010400 	.word	0x40010400
 8004060:	40014000 	.word	0x40014000
 8004064:	40001800 	.word	0x40001800
 8004068:	00010007 	.word	0x00010007

0800406c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b02      	cmp	r3, #2
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0202 	mvn.w	r2, #2
 8004098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f905 	bl	80042be <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8f7 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f908 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0204 	mvn.w	r2, #4
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8db 	bl	80042be <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f8cd 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8de 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d122      	bne.n	8004170 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b08      	cmp	r3, #8
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0208 	mvn.w	r2, #8
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2204      	movs	r2, #4
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 f8b1 	bl	80042be <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 f8a3 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f8b4 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b10      	cmp	r3, #16
 800417c:	d122      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d11b      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0210 	mvn.w	r2, #16
 8004194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2208      	movs	r2, #8
 800419a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f887 	bl	80042be <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f879 	bl	80042aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f88a 	bl	80042d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc ff08 	bl	8001000 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d107      	bne.n	800421c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f91a 	bl	8004450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f90d 	bl	8004464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d10e      	bne.n	8004276 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d107      	bne.n	8004276 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 f838 	bl	80042e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b20      	cmp	r3, #32
 8004282:	d10e      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d107      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f06f 0220 	mvn.w	r2, #32
 800429a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8cd 	bl	800443c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b083      	sub	sp, #12
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042da:	bf00      	nop
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a40      	ldr	r2, [pc, #256]	; (8004410 <TIM_Base_SetConfig+0x114>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431a:	d00f      	beq.n	800433c <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3d      	ldr	r2, [pc, #244]	; (8004414 <TIM_Base_SetConfig+0x118>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00b      	beq.n	800433c <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3c      	ldr	r2, [pc, #240]	; (8004418 <TIM_Base_SetConfig+0x11c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d007      	beq.n	800433c <TIM_Base_SetConfig+0x40>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a3b      	ldr	r2, [pc, #236]	; (800441c <TIM_Base_SetConfig+0x120>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d003      	beq.n	800433c <TIM_Base_SetConfig+0x40>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <TIM_Base_SetConfig+0x124>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d108      	bne.n	800434e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2f      	ldr	r2, [pc, #188]	; (8004410 <TIM_Base_SetConfig+0x114>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02b      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d027      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2c      	ldr	r2, [pc, #176]	; (8004414 <TIM_Base_SetConfig+0x118>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d023      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a2b      	ldr	r2, [pc, #172]	; (8004418 <TIM_Base_SetConfig+0x11c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01f      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a2a      	ldr	r2, [pc, #168]	; (800441c <TIM_Base_SetConfig+0x120>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d01b      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a29      	ldr	r2, [pc, #164]	; (8004420 <TIM_Base_SetConfig+0x124>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d017      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a28      	ldr	r2, [pc, #160]	; (8004424 <TIM_Base_SetConfig+0x128>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d013      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a27      	ldr	r2, [pc, #156]	; (8004428 <TIM_Base_SetConfig+0x12c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00f      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a26      	ldr	r2, [pc, #152]	; (800442c <TIM_Base_SetConfig+0x130>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00b      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <TIM_Base_SetConfig+0x134>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <TIM_Base_SetConfig+0x138>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d003      	beq.n	80043ae <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <TIM_Base_SetConfig+0x13c>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d108      	bne.n	80043c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <TIM_Base_SetConfig+0x114>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0xf8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a0c      	ldr	r2, [pc, #48]	; (8004420 <TIM_Base_SetConfig+0x124>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d103      	bne.n	80043fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	615a      	str	r2, [r3, #20]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	40010000 	.word	0x40010000
 8004414:	40000400 	.word	0x40000400
 8004418:	40000800 	.word	0x40000800
 800441c:	40000c00 	.word	0x40000c00
 8004420:	40010400 	.word	0x40010400
 8004424:	40014000 	.word	0x40014000
 8004428:	40014400 	.word	0x40014400
 800442c:	40014800 	.word	0x40014800
 8004430:	40001800 	.word	0x40001800
 8004434:	40001c00 	.word	0x40001c00
 8004438:	40002000 	.word	0x40002000

0800443c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e040      	b.n	800450c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d106      	bne.n	80044a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7fc ff58 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2224      	movs	r2, #36	; 0x24
 80044a4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0201 	bic.w	r2, r2, #1
 80044b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8b0 	bl	800461c <UART_SetConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e022      	b.n	800450c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb08 	bl	8004ae4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 fb8f 	bl	8004c28 <UART_CheckIdleState>
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b08a      	sub	sp, #40	; 0x28
 8004518:	af02      	add	r7, sp, #8
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004528:	2b20      	cmp	r3, #32
 800452a:	d171      	bne.n	8004610 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_UART_Transmit+0x24>
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e06a      	b.n	8004612 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2221      	movs	r2, #33	; 0x21
 8004548:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454a:	f7fd f8d1 	bl	80016f0 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004568:	d108      	bne.n	800457c <HAL_UART_Transmit+0x68>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004572:	2300      	movs	r3, #0
 8004574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	e003      	b.n	8004584 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004584:	e02c      	b.n	80045e0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2200      	movs	r2, #0
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fb80 	bl	8004c96 <UART_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e038      	b.n	8004612 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	3302      	adds	r3, #2
 80045ba:	61bb      	str	r3, [r7, #24]
 80045bc:	e007      	b.n	80045ce <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	781a      	ldrb	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	3301      	adds	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	3b01      	subs	r3, #1
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1cc      	bne.n	8004586 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	9300      	str	r3, [sp, #0]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2200      	movs	r2, #0
 80045f4:	2140      	movs	r1, #64	; 0x40
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fb4d 	bl	8004c96 <UART_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e005      	b.n	8004612 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	4ba6      	ldr	r3, [pc, #664]	; (80048e0 <UART_SetConfig+0x2c4>)
 8004648:	4013      	ands	r3, r2
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	6812      	ldr	r2, [r2, #0]
 800464e:	6979      	ldr	r1, [r7, #20]
 8004650:	430b      	orrs	r3, r1
 8004652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	430a      	orrs	r2, r1
 8004668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a94      	ldr	r2, [pc, #592]	; (80048e4 <UART_SetConfig+0x2c8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d120      	bne.n	80046da <UART_SetConfig+0xbe>
 8004698:	4b93      	ldr	r3, [pc, #588]	; (80048e8 <UART_SetConfig+0x2cc>)
 800469a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d816      	bhi.n	80046d4 <UART_SetConfig+0xb8>
 80046a6:	a201      	add	r2, pc, #4	; (adr r2, 80046ac <UART_SetConfig+0x90>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046c9 	.word	0x080046c9
 80046b4:	080046c3 	.word	0x080046c3
 80046b8:	080046cf 	.word	0x080046cf
 80046bc:	2301      	movs	r3, #1
 80046be:	77fb      	strb	r3, [r7, #31]
 80046c0:	e150      	b.n	8004964 <UART_SetConfig+0x348>
 80046c2:	2302      	movs	r3, #2
 80046c4:	77fb      	strb	r3, [r7, #31]
 80046c6:	e14d      	b.n	8004964 <UART_SetConfig+0x348>
 80046c8:	2304      	movs	r3, #4
 80046ca:	77fb      	strb	r3, [r7, #31]
 80046cc:	e14a      	b.n	8004964 <UART_SetConfig+0x348>
 80046ce:	2308      	movs	r3, #8
 80046d0:	77fb      	strb	r3, [r7, #31]
 80046d2:	e147      	b.n	8004964 <UART_SetConfig+0x348>
 80046d4:	2310      	movs	r3, #16
 80046d6:	77fb      	strb	r3, [r7, #31]
 80046d8:	e144      	b.n	8004964 <UART_SetConfig+0x348>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a83      	ldr	r2, [pc, #524]	; (80048ec <UART_SetConfig+0x2d0>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d132      	bne.n	800474a <UART_SetConfig+0x12e>
 80046e4:	4b80      	ldr	r3, [pc, #512]	; (80048e8 <UART_SetConfig+0x2cc>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f003 030c 	and.w	r3, r3, #12
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d828      	bhi.n	8004744 <UART_SetConfig+0x128>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0xdc>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	08004745 	.word	0x08004745
 8004700:	08004745 	.word	0x08004745
 8004704:	08004745 	.word	0x08004745
 8004708:	08004739 	.word	0x08004739
 800470c:	08004745 	.word	0x08004745
 8004710:	08004745 	.word	0x08004745
 8004714:	08004745 	.word	0x08004745
 8004718:	08004733 	.word	0x08004733
 800471c:	08004745 	.word	0x08004745
 8004720:	08004745 	.word	0x08004745
 8004724:	08004745 	.word	0x08004745
 8004728:	0800473f 	.word	0x0800473f
 800472c:	2300      	movs	r3, #0
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e118      	b.n	8004964 <UART_SetConfig+0x348>
 8004732:	2302      	movs	r3, #2
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e115      	b.n	8004964 <UART_SetConfig+0x348>
 8004738:	2304      	movs	r3, #4
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e112      	b.n	8004964 <UART_SetConfig+0x348>
 800473e:	2308      	movs	r3, #8
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e10f      	b.n	8004964 <UART_SetConfig+0x348>
 8004744:	2310      	movs	r3, #16
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e10c      	b.n	8004964 <UART_SetConfig+0x348>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a68      	ldr	r2, [pc, #416]	; (80048f0 <UART_SetConfig+0x2d4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d120      	bne.n	8004796 <UART_SetConfig+0x17a>
 8004754:	4b64      	ldr	r3, [pc, #400]	; (80048e8 <UART_SetConfig+0x2cc>)
 8004756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800475e:	2b30      	cmp	r3, #48	; 0x30
 8004760:	d013      	beq.n	800478a <UART_SetConfig+0x16e>
 8004762:	2b30      	cmp	r3, #48	; 0x30
 8004764:	d814      	bhi.n	8004790 <UART_SetConfig+0x174>
 8004766:	2b20      	cmp	r3, #32
 8004768:	d009      	beq.n	800477e <UART_SetConfig+0x162>
 800476a:	2b20      	cmp	r3, #32
 800476c:	d810      	bhi.n	8004790 <UART_SetConfig+0x174>
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <UART_SetConfig+0x15c>
 8004772:	2b10      	cmp	r3, #16
 8004774:	d006      	beq.n	8004784 <UART_SetConfig+0x168>
 8004776:	e00b      	b.n	8004790 <UART_SetConfig+0x174>
 8004778:	2300      	movs	r3, #0
 800477a:	77fb      	strb	r3, [r7, #31]
 800477c:	e0f2      	b.n	8004964 <UART_SetConfig+0x348>
 800477e:	2302      	movs	r3, #2
 8004780:	77fb      	strb	r3, [r7, #31]
 8004782:	e0ef      	b.n	8004964 <UART_SetConfig+0x348>
 8004784:	2304      	movs	r3, #4
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e0ec      	b.n	8004964 <UART_SetConfig+0x348>
 800478a:	2308      	movs	r3, #8
 800478c:	77fb      	strb	r3, [r7, #31]
 800478e:	e0e9      	b.n	8004964 <UART_SetConfig+0x348>
 8004790:	2310      	movs	r3, #16
 8004792:	77fb      	strb	r3, [r7, #31]
 8004794:	e0e6      	b.n	8004964 <UART_SetConfig+0x348>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a56      	ldr	r2, [pc, #344]	; (80048f4 <UART_SetConfig+0x2d8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d120      	bne.n	80047e2 <UART_SetConfig+0x1c6>
 80047a0:	4b51      	ldr	r3, [pc, #324]	; (80048e8 <UART_SetConfig+0x2cc>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047aa:	2bc0      	cmp	r3, #192	; 0xc0
 80047ac:	d013      	beq.n	80047d6 <UART_SetConfig+0x1ba>
 80047ae:	2bc0      	cmp	r3, #192	; 0xc0
 80047b0:	d814      	bhi.n	80047dc <UART_SetConfig+0x1c0>
 80047b2:	2b80      	cmp	r3, #128	; 0x80
 80047b4:	d009      	beq.n	80047ca <UART_SetConfig+0x1ae>
 80047b6:	2b80      	cmp	r3, #128	; 0x80
 80047b8:	d810      	bhi.n	80047dc <UART_SetConfig+0x1c0>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <UART_SetConfig+0x1a8>
 80047be:	2b40      	cmp	r3, #64	; 0x40
 80047c0:	d006      	beq.n	80047d0 <UART_SetConfig+0x1b4>
 80047c2:	e00b      	b.n	80047dc <UART_SetConfig+0x1c0>
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e0cc      	b.n	8004964 <UART_SetConfig+0x348>
 80047ca:	2302      	movs	r3, #2
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e0c9      	b.n	8004964 <UART_SetConfig+0x348>
 80047d0:	2304      	movs	r3, #4
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	e0c6      	b.n	8004964 <UART_SetConfig+0x348>
 80047d6:	2308      	movs	r3, #8
 80047d8:	77fb      	strb	r3, [r7, #31]
 80047da:	e0c3      	b.n	8004964 <UART_SetConfig+0x348>
 80047dc:	2310      	movs	r3, #16
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e0c0      	b.n	8004964 <UART_SetConfig+0x348>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a44      	ldr	r2, [pc, #272]	; (80048f8 <UART_SetConfig+0x2dc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d125      	bne.n	8004838 <UART_SetConfig+0x21c>
 80047ec:	4b3e      	ldr	r3, [pc, #248]	; (80048e8 <UART_SetConfig+0x2cc>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047fa:	d017      	beq.n	800482c <UART_SetConfig+0x210>
 80047fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004800:	d817      	bhi.n	8004832 <UART_SetConfig+0x216>
 8004802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004806:	d00b      	beq.n	8004820 <UART_SetConfig+0x204>
 8004808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800480c:	d811      	bhi.n	8004832 <UART_SetConfig+0x216>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <UART_SetConfig+0x1fe>
 8004812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004816:	d006      	beq.n	8004826 <UART_SetConfig+0x20a>
 8004818:	e00b      	b.n	8004832 <UART_SetConfig+0x216>
 800481a:	2300      	movs	r3, #0
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e0a1      	b.n	8004964 <UART_SetConfig+0x348>
 8004820:	2302      	movs	r3, #2
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e09e      	b.n	8004964 <UART_SetConfig+0x348>
 8004826:	2304      	movs	r3, #4
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e09b      	b.n	8004964 <UART_SetConfig+0x348>
 800482c:	2308      	movs	r3, #8
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e098      	b.n	8004964 <UART_SetConfig+0x348>
 8004832:	2310      	movs	r3, #16
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e095      	b.n	8004964 <UART_SetConfig+0x348>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2f      	ldr	r2, [pc, #188]	; (80048fc <UART_SetConfig+0x2e0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d125      	bne.n	800488e <UART_SetConfig+0x272>
 8004842:	4b29      	ldr	r3, [pc, #164]	; (80048e8 <UART_SetConfig+0x2cc>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004848:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800484c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004850:	d017      	beq.n	8004882 <UART_SetConfig+0x266>
 8004852:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004856:	d817      	bhi.n	8004888 <UART_SetConfig+0x26c>
 8004858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485c:	d00b      	beq.n	8004876 <UART_SetConfig+0x25a>
 800485e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004862:	d811      	bhi.n	8004888 <UART_SetConfig+0x26c>
 8004864:	2b00      	cmp	r3, #0
 8004866:	d003      	beq.n	8004870 <UART_SetConfig+0x254>
 8004868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486c:	d006      	beq.n	800487c <UART_SetConfig+0x260>
 800486e:	e00b      	b.n	8004888 <UART_SetConfig+0x26c>
 8004870:	2301      	movs	r3, #1
 8004872:	77fb      	strb	r3, [r7, #31]
 8004874:	e076      	b.n	8004964 <UART_SetConfig+0x348>
 8004876:	2302      	movs	r3, #2
 8004878:	77fb      	strb	r3, [r7, #31]
 800487a:	e073      	b.n	8004964 <UART_SetConfig+0x348>
 800487c:	2304      	movs	r3, #4
 800487e:	77fb      	strb	r3, [r7, #31]
 8004880:	e070      	b.n	8004964 <UART_SetConfig+0x348>
 8004882:	2308      	movs	r3, #8
 8004884:	77fb      	strb	r3, [r7, #31]
 8004886:	e06d      	b.n	8004964 <UART_SetConfig+0x348>
 8004888:	2310      	movs	r3, #16
 800488a:	77fb      	strb	r3, [r7, #31]
 800488c:	e06a      	b.n	8004964 <UART_SetConfig+0x348>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1b      	ldr	r2, [pc, #108]	; (8004900 <UART_SetConfig+0x2e4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d138      	bne.n	800490a <UART_SetConfig+0x2ee>
 8004898:	4b13      	ldr	r3, [pc, #76]	; (80048e8 <UART_SetConfig+0x2cc>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80048a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048a6:	d017      	beq.n	80048d8 <UART_SetConfig+0x2bc>
 80048a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80048ac:	d82a      	bhi.n	8004904 <UART_SetConfig+0x2e8>
 80048ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b2:	d00b      	beq.n	80048cc <UART_SetConfig+0x2b0>
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d824      	bhi.n	8004904 <UART_SetConfig+0x2e8>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <UART_SetConfig+0x2aa>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	d006      	beq.n	80048d2 <UART_SetConfig+0x2b6>
 80048c4:	e01e      	b.n	8004904 <UART_SetConfig+0x2e8>
 80048c6:	2300      	movs	r3, #0
 80048c8:	77fb      	strb	r3, [r7, #31]
 80048ca:	e04b      	b.n	8004964 <UART_SetConfig+0x348>
 80048cc:	2302      	movs	r3, #2
 80048ce:	77fb      	strb	r3, [r7, #31]
 80048d0:	e048      	b.n	8004964 <UART_SetConfig+0x348>
 80048d2:	2304      	movs	r3, #4
 80048d4:	77fb      	strb	r3, [r7, #31]
 80048d6:	e045      	b.n	8004964 <UART_SetConfig+0x348>
 80048d8:	2308      	movs	r3, #8
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e042      	b.n	8004964 <UART_SetConfig+0x348>
 80048de:	bf00      	nop
 80048e0:	efff69f3 	.word	0xefff69f3
 80048e4:	40011000 	.word	0x40011000
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40004400 	.word	0x40004400
 80048f0:	40004800 	.word	0x40004800
 80048f4:	40004c00 	.word	0x40004c00
 80048f8:	40005000 	.word	0x40005000
 80048fc:	40011400 	.word	0x40011400
 8004900:	40007800 	.word	0x40007800
 8004904:	2310      	movs	r3, #16
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e02c      	b.n	8004964 <UART_SetConfig+0x348>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a72      	ldr	r2, [pc, #456]	; (8004ad8 <UART_SetConfig+0x4bc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d125      	bne.n	8004960 <UART_SetConfig+0x344>
 8004914:	4b71      	ldr	r3, [pc, #452]	; (8004adc <UART_SetConfig+0x4c0>)
 8004916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800491e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004922:	d017      	beq.n	8004954 <UART_SetConfig+0x338>
 8004924:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004928:	d817      	bhi.n	800495a <UART_SetConfig+0x33e>
 800492a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492e:	d00b      	beq.n	8004948 <UART_SetConfig+0x32c>
 8004930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004934:	d811      	bhi.n	800495a <UART_SetConfig+0x33e>
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <UART_SetConfig+0x326>
 800493a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800493e:	d006      	beq.n	800494e <UART_SetConfig+0x332>
 8004940:	e00b      	b.n	800495a <UART_SetConfig+0x33e>
 8004942:	2300      	movs	r3, #0
 8004944:	77fb      	strb	r3, [r7, #31]
 8004946:	e00d      	b.n	8004964 <UART_SetConfig+0x348>
 8004948:	2302      	movs	r3, #2
 800494a:	77fb      	strb	r3, [r7, #31]
 800494c:	e00a      	b.n	8004964 <UART_SetConfig+0x348>
 800494e:	2304      	movs	r3, #4
 8004950:	77fb      	strb	r3, [r7, #31]
 8004952:	e007      	b.n	8004964 <UART_SetConfig+0x348>
 8004954:	2308      	movs	r3, #8
 8004956:	77fb      	strb	r3, [r7, #31]
 8004958:	e004      	b.n	8004964 <UART_SetConfig+0x348>
 800495a:	2310      	movs	r3, #16
 800495c:	77fb      	strb	r3, [r7, #31]
 800495e:	e001      	b.n	8004964 <UART_SetConfig+0x348>
 8004960:	2310      	movs	r3, #16
 8004962:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496c:	d15b      	bne.n	8004a26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800496e:	7ffb      	ldrb	r3, [r7, #31]
 8004970:	2b08      	cmp	r3, #8
 8004972:	d828      	bhi.n	80049c6 <UART_SetConfig+0x3aa>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <UART_SetConfig+0x360>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049a1 	.word	0x080049a1
 8004980:	080049a9 	.word	0x080049a9
 8004984:	080049b1 	.word	0x080049b1
 8004988:	080049c7 	.word	0x080049c7
 800498c:	080049b7 	.word	0x080049b7
 8004990:	080049c7 	.word	0x080049c7
 8004994:	080049c7 	.word	0x080049c7
 8004998:	080049c7 	.word	0x080049c7
 800499c:	080049bf 	.word	0x080049bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a0:	f7fe fa9e 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 80049a4:	61b8      	str	r0, [r7, #24]
        break;
 80049a6:	e013      	b.n	80049d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a8:	f7fe faae 	bl	8002f08 <HAL_RCC_GetPCLK2Freq>
 80049ac:	61b8      	str	r0, [r7, #24]
        break;
 80049ae:	e00f      	b.n	80049d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b0:	4b4b      	ldr	r3, [pc, #300]	; (8004ae0 <UART_SetConfig+0x4c4>)
 80049b2:	61bb      	str	r3, [r7, #24]
        break;
 80049b4:	e00c      	b.n	80049d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b6:	f7fe f981 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 80049ba:	61b8      	str	r0, [r7, #24]
        break;
 80049bc:	e008      	b.n	80049d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c2:	61bb      	str	r3, [r7, #24]
        break;
 80049c4:	e004      	b.n	80049d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	77bb      	strb	r3, [r7, #30]
        break;
 80049ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d074      	beq.n	8004ac0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	005a      	lsls	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	441a      	add	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b0f      	cmp	r3, #15
 80049f0:	d916      	bls.n	8004a20 <UART_SetConfig+0x404>
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f8:	d212      	bcs.n	8004a20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	f023 030f 	bic.w	r3, r3, #15
 8004a02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	89fb      	ldrh	r3, [r7, #14]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	89fa      	ldrh	r2, [r7, #14]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	e04f      	b.n	8004ac0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	77bb      	strb	r3, [r7, #30]
 8004a24:	e04c      	b.n	8004ac0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a26:	7ffb      	ldrb	r3, [r7, #31]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d828      	bhi.n	8004a7e <UART_SetConfig+0x462>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <UART_SetConfig+0x418>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a59 	.word	0x08004a59
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	08004a69 	.word	0x08004a69
 8004a40:	08004a7f 	.word	0x08004a7f
 8004a44:	08004a6f 	.word	0x08004a6f
 8004a48:	08004a7f 	.word	0x08004a7f
 8004a4c:	08004a7f 	.word	0x08004a7f
 8004a50:	08004a7f 	.word	0x08004a7f
 8004a54:	08004a77 	.word	0x08004a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a58:	f7fe fa42 	bl	8002ee0 <HAL_RCC_GetPCLK1Freq>
 8004a5c:	61b8      	str	r0, [r7, #24]
        break;
 8004a5e:	e013      	b.n	8004a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a60:	f7fe fa52 	bl	8002f08 <HAL_RCC_GetPCLK2Freq>
 8004a64:	61b8      	str	r0, [r7, #24]
        break;
 8004a66:	e00f      	b.n	8004a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <UART_SetConfig+0x4c4>)
 8004a6a:	61bb      	str	r3, [r7, #24]
        break;
 8004a6c:	e00c      	b.n	8004a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6e:	f7fe f925 	bl	8002cbc <HAL_RCC_GetSysClockFreq>
 8004a72:	61b8      	str	r0, [r7, #24]
        break;
 8004a74:	e008      	b.n	8004a88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7a:	61bb      	str	r3, [r7, #24]
        break;
 8004a7c:	e004      	b.n	8004a88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	77bb      	strb	r3, [r7, #30]
        break;
 8004a86:	bf00      	nop
    }

    if (pclk != 0U)
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d018      	beq.n	8004ac0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	085a      	lsrs	r2, r3, #1
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	441a      	add	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b0f      	cmp	r3, #15
 8004aa6:	d909      	bls.n	8004abc <UART_SetConfig+0x4a0>
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aae:	d205      	bcs.n	8004abc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60da      	str	r2, [r3, #12]
 8004aba:	e001      	b.n	8004ac0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004acc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3720      	adds	r7, #32
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40007c00 	.word	0x40007c00
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	00f42400 	.word	0x00f42400

08004ae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01a      	beq.n	8004bfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be2:	d10a      	bne.n	8004bfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	605a      	str	r2, [r3, #4]
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c38:	f7fc fd5a 	bl	80016f0 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d10e      	bne.n	8004c6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f81b 	bl	8004c96 <UART_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e011      	b.n	8004c8e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b09c      	sub	sp, #112	; 0x70
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	60f8      	str	r0, [r7, #12]
 8004c9e:	60b9      	str	r1, [r7, #8]
 8004ca0:	603b      	str	r3, [r7, #0]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca6:	e0a7      	b.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cae:	f000 80a3 	beq.w	8004df8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fc fd1d 	bl	80016f0 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d13f      	bne.n	8004d48 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ce8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e6      	bne.n	8004cc8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3308      	adds	r3, #8
 8004d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	663b      	str	r3, [r7, #96]	; 0x60
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e5      	bne.n	8004cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e068      	b.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d050      	beq.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d64:	d148      	bne.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d6e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004d90:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e6      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	613b      	str	r3, [r7, #16]
   return(result);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3308      	adds	r3, #8
 8004dc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004dc2:	623a      	str	r2, [r7, #32]
 8004dc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	69f9      	ldr	r1, [r7, #28]
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e5      	bne.n	8004da2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e010      	b.n	8004e1a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69da      	ldr	r2, [r3, #28]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4013      	ands	r3, r2
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	f43f af48 	beq.w	8004ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3770      	adds	r7, #112	; 0x70
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e24:	b084      	sub	sp, #16
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	f107 001c 	add.w	r0, r7, #28
 8004e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d120      	bne.n	8004e7e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <USB_CoreInit+0xac>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa96 	bl	80053a4 <USB_CoreReset>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	73fb      	strb	r3, [r7, #15]
 8004e7c:	e010      	b.n	8004ea0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fa8a 	bl	80053a4 <USB_CoreReset>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d10b      	bne.n	8004ebe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f043 0206 	orr.w	r2, r3, #6
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f043 0220 	orr.w	r2, r3, #32
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004eca:	b004      	add	sp, #16
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	ffbdffbf 	.word	0xffbdffbf

08004ed4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 0201 	bic.w	r2, r3, #1
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ef6:	b580      	push	{r7, lr}
 8004ef8:	b084      	sub	sp, #16
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f12:	78fb      	ldrb	r3, [r7, #3]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d115      	bne.n	8004f44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f24:	2001      	movs	r0, #1
 8004f26:	f7fc fbef 	bl	8001708 <HAL_Delay>
      ms++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 fa29 	bl	8005388 <USB_GetMode>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d01e      	beq.n	8004f7a <USB_SetCurrentMode+0x84>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b31      	cmp	r3, #49	; 0x31
 8004f40:	d9f0      	bls.n	8004f24 <USB_SetCurrentMode+0x2e>
 8004f42:	e01a      	b.n	8004f7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d115      	bne.n	8004f76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f56:	2001      	movs	r0, #1
 8004f58:	f7fc fbd6 	bl	8001708 <HAL_Delay>
      ms++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 fa10 	bl	8005388 <USB_GetMode>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d005      	beq.n	8004f7a <USB_SetCurrentMode+0x84>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2b31      	cmp	r3, #49	; 0x31
 8004f72:	d9f0      	bls.n	8004f56 <USB_SetCurrentMode+0x60>
 8004f74:	e001      	b.n	8004f7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e005      	b.n	8004f86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b32      	cmp	r3, #50	; 0x32
 8004f7e:	d101      	bne.n	8004f84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f90:	b084      	sub	sp, #16
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b086      	sub	sp, #24
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004faa:	2300      	movs	r3, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	e009      	b.n	8004fc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	3340      	adds	r3, #64	; 0x40
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	2200      	movs	r2, #0
 8004fbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b0e      	cmp	r3, #14
 8004fc8:	d9f2      	bls.n	8004fb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11c      	bne.n	800500a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fde:	f043 0302 	orr.w	r3, r3, #2
 8004fe2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e005      	b.n	8005016 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800501c:	461a      	mov	r2, r3
 800501e:	2300      	movs	r3, #0
 8005020:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005028:	4619      	mov	r1, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005030:	461a      	mov	r2, r3
 8005032:	680b      	ldr	r3, [r1, #0]
 8005034:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005038:	2b01      	cmp	r3, #1
 800503a:	d10c      	bne.n	8005056 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d104      	bne.n	800504c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005042:	2100      	movs	r1, #0
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 f965 	bl	8005314 <USB_SetDevSpeed>
 800504a:	e008      	b.n	800505e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800504c:	2101      	movs	r1, #1
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f960 	bl	8005314 <USB_SetDevSpeed>
 8005054:	e003      	b.n	800505e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005056:	2103      	movs	r1, #3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f95b 	bl	8005314 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800505e:	2110      	movs	r1, #16
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f8f3 	bl	800524c <USB_FlushTxFifo>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f91f 	bl	80052b4 <USB_FlushRxFifo>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	461a      	mov	r2, r3
 8005088:	2300      	movs	r3, #0
 800508a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005092:	461a      	mov	r2, r3
 8005094:	2300      	movs	r3, #0
 8005096:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509e:	461a      	mov	r2, r3
 80050a0:	2300      	movs	r3, #0
 80050a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	e043      	b.n	8005132 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	015a      	lsls	r2, r3, #5
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4413      	add	r3, r2
 80050b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050c0:	d118      	bne.n	80050f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10a      	bne.n	80050de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d4:	461a      	mov	r2, r3
 80050d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e013      	b.n	8005106 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	461a      	mov	r2, r3
 80050ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e008      	b.n	8005106 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	461a      	mov	r2, r3
 8005102:	2300      	movs	r3, #0
 8005104:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	461a      	mov	r2, r3
 8005126:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800512a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	3301      	adds	r3, #1
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	429a      	cmp	r2, r3
 8005138:	d3b7      	bcc.n	80050aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800513a:	2300      	movs	r3, #0
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e043      	b.n	80051c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005156:	d118      	bne.n	800518a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	461a      	mov	r2, r3
 800516c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e013      	b.n	800519c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	e008      	b.n	800519c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4413      	add	r3, r2
 8005192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005196:	461a      	mov	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	461a      	mov	r2, r3
 80051aa:	2300      	movs	r3, #0
 80051ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	461a      	mov	r2, r3
 80051bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	3301      	adds	r3, #1
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d3b7      	bcc.n	8005140 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d105      	bne.n	8005204 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	f043 0210 	orr.w	r2, r3, #16
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <USB_DevInit+0x2b4>)
 800520a:	4313      	orrs	r3, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f043 0208 	orr.w	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d105      	bne.n	8005234 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	4b06      	ldr	r3, [pc, #24]	; (8005248 <USB_DevInit+0x2b8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005240:	b004      	add	sp, #16
 8005242:	4770      	bx	lr
 8005244:	803c3800 	.word	0x803c3800
 8005248:	40000004 	.word	0x40000004

0800524c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3301      	adds	r3, #1
 800525e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <USB_FlushTxFifo+0x64>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d901      	bls.n	800526c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e01b      	b.n	80052a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	daf2      	bge.n	800525a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	019b      	lsls	r3, r3, #6
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3301      	adds	r3, #1
 8005288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <USB_FlushTxFifo+0x64>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d901      	bls.n	8005296 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e006      	b.n	80052a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b20      	cmp	r3, #32
 80052a0:	d0f0      	beq.n	8005284 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	00030d40 	.word	0x00030d40

080052b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3301      	adds	r3, #1
 80052c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a11      	ldr	r2, [pc, #68]	; (8005310 <USB_FlushRxFifo+0x5c>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d901      	bls.n	80052d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e018      	b.n	8005304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	daf2      	bge.n	80052c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2210      	movs	r2, #16
 80052e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4a08      	ldr	r2, [pc, #32]	; (8005310 <USB_FlushRxFifo+0x5c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e006      	b.n	8005304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d0f0      	beq.n	80052e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	00030d40 	.word	0x00030d40

08005314 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005360:	f023 0303 	bic.w	r3, r3, #3
 8005364:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005374:	f043 0302 	orr.w	r3, r3, #2
 8005378:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3714      	adds	r7, #20
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f003 0301 	and.w	r3, r3, #1
}
 8005398:	4618      	mov	r0, r3
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a13      	ldr	r2, [pc, #76]	; (8005408 <USB_CoreReset+0x64>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d901      	bls.n	80053c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e01b      	b.n	80053fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	daf2      	bge.n	80053b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	3301      	adds	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4a09      	ldr	r2, [pc, #36]	; (8005408 <USB_CoreReset+0x64>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d901      	bls.n	80053ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e006      	b.n	80053fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d0f0      	beq.n	80053da <USB_CoreReset+0x36>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	00030d40 	.word	0x00030d40

0800540c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005410:	bf00      	nop
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
	...

0800541c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005422:	f3ef 8305 	mrs	r3, IPSR
 8005426:	60bb      	str	r3, [r7, #8]
  return(result);
 8005428:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10f      	bne.n	800544e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800542e:	f3ef 8310 	mrs	r3, PRIMASK
 8005432:	607b      	str	r3, [r7, #4]
  return(result);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800543a:	f3ef 8311 	mrs	r3, BASEPRI
 800543e:	603b      	str	r3, [r7, #0]
  return(result);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <osKernelInitialize+0x3a>
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <osKernelInitialize+0x64>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d103      	bne.n	8005456 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800544e:	f06f 0305 	mvn.w	r3, #5
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	e00c      	b.n	8005470 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <osKernelInitialize+0x64>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d105      	bne.n	800546a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <osKernelInitialize+0x64>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e002      	b.n	8005470 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800546e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005470:	68fb      	ldr	r3, [r7, #12]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	2000098c 	.word	0x2000098c

08005484 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548a:	f3ef 8305 	mrs	r3, IPSR
 800548e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005490:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	607b      	str	r3, [r7, #4]
  return(result);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054a2:	f3ef 8311 	mrs	r3, BASEPRI
 80054a6:	603b      	str	r3, [r7, #0]
  return(result);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <osKernelStart+0x3a>
 80054ae:	4b0f      	ldr	r3, [pc, #60]	; (80054ec <osKernelStart+0x68>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d103      	bne.n	80054be <osKernelStart+0x3a>
    stat = osErrorISR;
 80054b6:	f06f 0305 	mvn.w	r3, #5
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e010      	b.n	80054e0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80054be:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <osKernelStart+0x68>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d109      	bne.n	80054da <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80054c6:	f7ff ffa1 	bl	800540c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80054ca:	4b08      	ldr	r3, [pc, #32]	; (80054ec <osKernelStart+0x68>)
 80054cc:	2202      	movs	r2, #2
 80054ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80054d0:	f001 fdb6 	bl	8007040 <vTaskStartScheduler>
      stat = osOK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e002      	b.n	80054e0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80054da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80054e0:	68fb      	ldr	r3, [r7, #12]
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	2000098c 	.word	0x2000098c

080054f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b090      	sub	sp, #64	; 0x40
 80054f4:	af04      	add	r7, sp, #16
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005500:	f3ef 8305 	mrs	r3, IPSR
 8005504:	61fb      	str	r3, [r7, #28]
  return(result);
 8005506:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 808f 	bne.w	800562c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550e:	f3ef 8310 	mrs	r3, PRIMASK
 8005512:	61bb      	str	r3, [r7, #24]
  return(result);
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d105      	bne.n	8005526 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800551a:	f3ef 8311 	mrs	r3, BASEPRI
 800551e:	617b      	str	r3, [r7, #20]
  return(result);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <osThreadNew+0x3e>
 8005526:	4b44      	ldr	r3, [pc, #272]	; (8005638 <osThreadNew+0x148>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d07e      	beq.n	800562c <osThreadNew+0x13c>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d07b      	beq.n	800562c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005538:	2318      	movs	r3, #24
 800553a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005540:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005544:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d045      	beq.n	80055d8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <osThreadNew+0x6a>
        name = attr->name;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	2b00      	cmp	r3, #0
 800556c:	d008      	beq.n	8005580 <osThreadNew+0x90>
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	2b38      	cmp	r3, #56	; 0x38
 8005572:	d805      	bhi.n	8005580 <osThreadNew+0x90>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <osThreadNew+0x94>
        return (NULL);
 8005580:	2300      	movs	r3, #0
 8005582:	e054      	b.n	800562e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	089b      	lsrs	r3, r3, #2
 8005592:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <osThreadNew+0xca>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	2bbb      	cmp	r3, #187	; 0xbb
 80055a2:	d90a      	bls.n	80055ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d006      	beq.n	80055ba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <osThreadNew+0xca>
        mem = 1;
 80055b4:	2301      	movs	r3, #1
 80055b6:	623b      	str	r3, [r7, #32]
 80055b8:	e010      	b.n	80055dc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10c      	bne.n	80055dc <osThreadNew+0xec>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d108      	bne.n	80055dc <osThreadNew+0xec>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d104      	bne.n	80055dc <osThreadNew+0xec>
          mem = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	623b      	str	r3, [r7, #32]
 80055d6:	e001      	b.n	80055dc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80055d8:	2300      	movs	r3, #0
 80055da:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d110      	bne.n	8005604 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80055ea:	9202      	str	r2, [sp, #8]
 80055ec:	9301      	str	r3, [sp, #4]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f001 fab7 	bl	8006b6c <xTaskCreateStatic>
 80055fe:	4603      	mov	r3, r0
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	e013      	b.n	800562c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d110      	bne.n	800562c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	b29a      	uxth	r2, r3
 800560e:	f107 0310 	add.w	r3, r7, #16
 8005612:	9301      	str	r3, [sp, #4]
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f001 fb08 	bl	8006c32 <xTaskCreate>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d001      	beq.n	800562c <osThreadNew+0x13c>
          hTask = NULL;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800562c:	693b      	ldr	r3, [r7, #16]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3730      	adds	r7, #48	; 0x30
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	2000098c 	.word	0x2000098c

0800563c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800563c:	b580      	push	{r7, lr}
 800563e:	b08c      	sub	sp, #48	; 0x30
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005648:	2300      	movs	r3, #0
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800564c:	f3ef 8305 	mrs	r3, IPSR
 8005650:	61bb      	str	r3, [r7, #24]
  return(result);
 8005652:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005654:	2b00      	cmp	r3, #0
 8005656:	f040 8086 	bne.w	8005766 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565a:	f3ef 8310 	mrs	r3, PRIMASK
 800565e:	617b      	str	r3, [r7, #20]
  return(result);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d105      	bne.n	8005672 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005666:	f3ef 8311 	mrs	r3, BASEPRI
 800566a:	613b      	str	r3, [r7, #16]
  return(result);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <osSemaphoreNew+0x3e>
 8005672:	4b3f      	ldr	r3, [pc, #252]	; (8005770 <osSemaphoreNew+0x134>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d075      	beq.n	8005766 <osSemaphoreNew+0x12a>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d072      	beq.n	8005766 <osSemaphoreNew+0x12a>
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	429a      	cmp	r2, r3
 8005686:	d86e      	bhi.n	8005766 <osSemaphoreNew+0x12a>
    mem = -1;
 8005688:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800568c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d006      	beq.n	80056aa <osSemaphoreNew+0x6e>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b4f      	cmp	r3, #79	; 0x4f
 80056a2:	d902      	bls.n	80056aa <osSemaphoreNew+0x6e>
        mem = 1;
 80056a4:	2301      	movs	r3, #1
 80056a6:	623b      	str	r3, [r7, #32]
 80056a8:	e00c      	b.n	80056c4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d108      	bne.n	80056c4 <osSemaphoreNew+0x88>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d104      	bne.n	80056c4 <osSemaphoreNew+0x88>
          mem = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	e001      	b.n	80056c4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80056c0:	2300      	movs	r3, #0
 80056c2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ca:	d04c      	beq.n	8005766 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d128      	bne.n	8005724 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10a      	bne.n	80056ee <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2203      	movs	r2, #3
 80056de:	9200      	str	r2, [sp, #0]
 80056e0:	2200      	movs	r2, #0
 80056e2:	2100      	movs	r1, #0
 80056e4:	2001      	movs	r0, #1
 80056e6:	f000 fa55 	bl	8005b94 <xQueueGenericCreateStatic>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24
 80056ec:	e005      	b.n	80056fa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80056ee:	2203      	movs	r2, #3
 80056f0:	2100      	movs	r1, #0
 80056f2:	2001      	movs	r0, #1
 80056f4:	f000 fad0 	bl	8005c98 <xQueueGenericCreate>
 80056f8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d022      	beq.n	8005746 <osSemaphoreNew+0x10a>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01f      	beq.n	8005746 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005706:	2300      	movs	r3, #0
 8005708:	2200      	movs	r2, #0
 800570a:	2100      	movs	r1, #0
 800570c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800570e:	f000 fb9b 	bl	8005e48 <xQueueGenericSend>
 8005712:	4603      	mov	r3, r0
 8005714:	2b01      	cmp	r3, #1
 8005716:	d016      	beq.n	8005746 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800571a:	f001 f851 	bl	80067c0 <vQueueDelete>
            hSemaphore = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	627b      	str	r3, [r7, #36]	; 0x24
 8005722:	e010      	b.n	8005746 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d108      	bne.n	800573c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	461a      	mov	r2, r3
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 fb15 	bl	8005d62 <xQueueCreateCountingSemaphoreStatic>
 8005738:	6278      	str	r0, [r7, #36]	; 0x24
 800573a:	e004      	b.n	8005746 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fb4a 	bl	8005dd8 <xQueueCreateCountingSemaphore>
 8005744:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00c      	beq.n	8005766 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <osSemaphoreNew+0x11e>
          name = attr->name;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	e001      	b.n	800575e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800575e:	69f9      	ldr	r1, [r7, #28]
 8005760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005762:	f001 f97b 	bl	8006a5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005768:	4618      	mov	r0, r3
 800576a:	3728      	adds	r7, #40	; 0x28
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	2000098c 	.word	0x2000098c

08005774 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800578c:	f06f 0303 	mvn.w	r3, #3
 8005790:	61fb      	str	r3, [r7, #28]
 8005792:	e04b      	b.n	800582c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005794:	f3ef 8305 	mrs	r3, IPSR
 8005798:	617b      	str	r3, [r7, #20]
  return(result);
 800579a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10f      	bne.n	80057c0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a0:	f3ef 8310 	mrs	r3, PRIMASK
 80057a4:	613b      	str	r3, [r7, #16]
  return(result);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80057ac:	f3ef 8311 	mrs	r3, BASEPRI
 80057b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d026      	beq.n	8005806 <osSemaphoreAcquire+0x92>
 80057b8:	4b1f      	ldr	r3, [pc, #124]	; (8005838 <osSemaphoreAcquire+0xc4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d122      	bne.n	8005806 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80057c6:	f06f 0303 	mvn.w	r3, #3
 80057ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80057cc:	e02d      	b.n	800582a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80057d2:	f107 0308 	add.w	r3, r7, #8
 80057d6:	461a      	mov	r2, r3
 80057d8:	2100      	movs	r1, #0
 80057da:	69b8      	ldr	r0, [r7, #24]
 80057dc:	f000 ff6a 	bl	80066b4 <xQueueReceiveFromISR>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d003      	beq.n	80057ee <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80057e6:	f06f 0302 	mvn.w	r3, #2
 80057ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80057ec:	e01d      	b.n	800582a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01a      	beq.n	800582a <osSemaphoreAcquire+0xb6>
 80057f4:	4b11      	ldr	r3, [pc, #68]	; (800583c <osSemaphoreAcquire+0xc8>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005804:	e011      	b.n	800582a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	69b8      	ldr	r0, [r7, #24]
 800580a:	f000 fe3f 	bl	800648c <xQueueSemaphoreTake>
 800580e:	4603      	mov	r3, r0
 8005810:	2b01      	cmp	r3, #1
 8005812:	d00b      	beq.n	800582c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800581a:	f06f 0301 	mvn.w	r3, #1
 800581e:	61fb      	str	r3, [r7, #28]
 8005820:	e004      	b.n	800582c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005822:	f06f 0302 	mvn.w	r3, #2
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	e000      	b.n	800582c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800582a:	bf00      	nop
      }
    }
  }

  return (stat);
 800582c:	69fb      	ldr	r3, [r7, #28]
}
 800582e:	4618      	mov	r0, r3
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	2000098c 	.word	0x2000098c
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005856:	f06f 0303 	mvn.w	r3, #3
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	e03e      	b.n	80058dc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585e:	f3ef 8305 	mrs	r3, IPSR
 8005862:	617b      	str	r3, [r7, #20]
  return(result);
 8005864:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800586a:	f3ef 8310 	mrs	r3, PRIMASK
 800586e:	613b      	str	r3, [r7, #16]
  return(result);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005876:	f3ef 8311 	mrs	r3, BASEPRI
 800587a:	60fb      	str	r3, [r7, #12]
  return(result);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01e      	beq.n	80058c0 <osSemaphoreRelease+0x80>
 8005882:	4b19      	ldr	r3, [pc, #100]	; (80058e8 <osSemaphoreRelease+0xa8>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2b02      	cmp	r3, #2
 8005888:	d11a      	bne.n	80058c0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	4619      	mov	r1, r3
 8005894:	69b8      	ldr	r0, [r7, #24]
 8005896:	f000 fc7d 	bl	8006194 <xQueueGiveFromISR>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d003      	beq.n	80058a8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80058a0:	f06f 0302 	mvn.w	r3, #2
 80058a4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058a6:	e018      	b.n	80058da <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d015      	beq.n	80058da <osSemaphoreRelease+0x9a>
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <osSemaphoreRelease+0xac>)
 80058b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058be:	e00c      	b.n	80058da <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80058c0:	2300      	movs	r3, #0
 80058c2:	2200      	movs	r2, #0
 80058c4:	2100      	movs	r1, #0
 80058c6:	69b8      	ldr	r0, [r7, #24]
 80058c8:	f000 fabe 	bl	8005e48 <xQueueGenericSend>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d004      	beq.n	80058dc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80058d2:	f06f 0302 	mvn.w	r3, #2
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	e000      	b.n	80058dc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80058da:	bf00      	nop
    }
  }

  return (stat);
 80058dc:	69fb      	ldr	r3, [r7, #28]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	2000098c 	.word	0x2000098c
 80058ec:	e000ed04 	.word	0xe000ed04

080058f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a07      	ldr	r2, [pc, #28]	; (800591c <vApplicationGetIdleTaskMemory+0x2c>)
 8005900:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a06      	ldr	r2, [pc, #24]	; (8005920 <vApplicationGetIdleTaskMemory+0x30>)
 8005906:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	20000990 	.word	0x20000990
 8005920:	20000a4c 	.word	0x20000a4c

08005924 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4a07      	ldr	r2, [pc, #28]	; (8005950 <vApplicationGetTimerTaskMemory+0x2c>)
 8005934:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a06      	ldr	r2, [pc, #24]	; (8005954 <vApplicationGetTimerTaskMemory+0x30>)
 800593a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005942:	601a      	str	r2, [r3, #0]
}
 8005944:	bf00      	nop
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	20000c4c 	.word	0x20000c4c
 8005954:	20000d08 	.word	0x20000d08

08005958 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f103 0208 	add.w	r2, r3, #8
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005970:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f103 0208 	add.w	r2, r3, #8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f103 0208 	add.w	r2, r3, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	601a      	str	r2, [r3, #0]
}
 80059ee:	bf00      	nop
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059fa:	b480      	push	{r7}
 80059fc:	b085      	sub	sp, #20
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
 8005a02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a10:	d103      	bne.n	8005a1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	e00c      	b.n	8005a34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	e002      	b.n	8005a28 <vListInsert+0x2e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d2f6      	bcs.n	8005a22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	601a      	str	r2, [r3, #0]
}
 8005a60:	bf00      	nop
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	6852      	ldr	r2, [r2, #4]
 8005a8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d103      	bne.n	8005aa0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10c      	bne.n	8005aee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad8:	b672      	cpsid	i
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	b662      	cpsie	i
 8005ae8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005aee:	f002 fd65 	bl	80085bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	68f9      	ldr	r1, [r7, #12]
 8005afc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005afe:	fb01 f303 	mul.w	r3, r1, r3
 8005b02:	441a      	add	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	68f9      	ldr	r1, [r7, #12]
 8005b22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b24:	fb01 f303 	mul.w	r3, r1, r3
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	22ff      	movs	r2, #255	; 0xff
 8005b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	22ff      	movs	r2, #255	; 0xff
 8005b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d114      	bne.n	8005b6e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d01a      	beq.n	8005b82 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3310      	adds	r3, #16
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 fd1d 	bl	8007590 <xTaskRemoveFromEventList>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d012      	beq.n	8005b82 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b5c:	4b0c      	ldr	r3, [pc, #48]	; (8005b90 <xQueueGenericReset+0xd0>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	e009      	b.n	8005b82 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	3310      	adds	r3, #16
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fef0 	bl	8005958 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	3324      	adds	r3, #36	; 0x24
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff feeb 	bl	8005958 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b82:	f002 fd4f 	bl	8008624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b86:	2301      	movs	r3, #1
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	e000ed04 	.word	0xe000ed04

08005b94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08e      	sub	sp, #56	; 0x38
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10c      	bne.n	8005bc2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	b672      	cpsid	i
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	b662      	cpsie	i
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bbe:	bf00      	nop
 8005bc0:	e7fe      	b.n	8005bc0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10c      	bne.n	8005be2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8005bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bcc:	b672      	cpsid	i
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	b662      	cpsie	i
 8005bdc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <xQueueGenericCreateStatic+0x5a>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <xQueueGenericCreateStatic+0x5e>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e000      	b.n	8005bf4 <xQueueGenericCreateStatic+0x60>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10c      	bne.n	8005c12 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	b672      	cpsid	i
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	b662      	cpsie	i
 8005c0c:	623b      	str	r3, [r7, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	e7fe      	b.n	8005c10 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d102      	bne.n	8005c1e <xQueueGenericCreateStatic+0x8a>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <xQueueGenericCreateStatic+0x8e>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <xQueueGenericCreateStatic+0x90>
 8005c22:	2300      	movs	r3, #0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10c      	bne.n	8005c42 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	b672      	cpsid	i
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	b662      	cpsie	i
 8005c3c:	61fb      	str	r3, [r7, #28]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c42:	2350      	movs	r3, #80	; 0x50
 8005c44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b50      	cmp	r3, #80	; 0x50
 8005c4a:	d00c      	beq.n	8005c66 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	b672      	cpsid	i
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	b662      	cpsie	i
 8005c60:	61bb      	str	r3, [r7, #24]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00d      	beq.n	8005c8e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	4613      	mov	r3, r2
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	68b9      	ldr	r1, [r7, #8]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f000 f847 	bl	8005d1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3730      	adds	r7, #48	; 0x30
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	; 0x28
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10c      	bne.n	8005cc6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	b672      	cpsid	i
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	b662      	cpsie	i
 8005cc0:	613b      	str	r3, [r7, #16]
}
 8005cc2:	bf00      	nop
 8005cc4:	e7fe      	b.n	8005cc4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
 8005cd0:	e004      	b.n	8005cdc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3350      	adds	r3, #80	; 0x50
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f002 fd97 	bl	8008814 <pvPortMalloc>
 8005ce6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d011      	beq.n	8005d12 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	3350      	adds	r3, #80	; 0x50
 8005cf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d00:	79fa      	ldrb	r2, [r7, #7]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f805 	bl	8005d1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d12:	69bb      	ldr	r3, [r7, #24]
	}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	69b8      	ldr	r0, [r7, #24]
 8005d4e:	f7ff feb7 	bl	8005ac0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b08a      	sub	sp, #40	; 0x28
 8005d66:	af02      	add	r7, sp, #8
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10c      	bne.n	8005d8e <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8005d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d78:	b672      	cpsid	i
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	b662      	cpsie	i
 8005d88:	61bb      	str	r3, [r7, #24]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d90c      	bls.n	8005db0 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	b672      	cpsid	i
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	b662      	cpsie	i
 8005daa:	617b      	str	r3, [r7, #20]
}
 8005dac:	bf00      	nop
 8005dae:	e7fe      	b.n	8005dae <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005db0:	2302      	movs	r3, #2
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	2100      	movs	r1, #0
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f7ff feea 	bl	8005b94 <xQueueGenericCreateStatic>
 8005dc0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005dce:	69fb      	ldr	r3, [r7, #28]
	}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3720      	adds	r7, #32
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d10c      	bne.n	8005e02 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	b672      	cpsid	i
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	b662      	cpsie	i
 8005dfc:	613b      	str	r3, [r7, #16]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d90c      	bls.n	8005e24 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	b672      	cpsid	i
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	b662      	cpsie	i
 8005e1e:	60fb      	str	r3, [r7, #12]
}
 8005e20:	bf00      	nop
 8005e22:	e7fe      	b.n	8005e22 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e24:	2202      	movs	r2, #2
 8005e26:	2100      	movs	r1, #0
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff35 	bl	8005c98 <xQueueGenericCreate>
 8005e2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e3c:	697b      	ldr	r3, [r7, #20]
	}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08e      	sub	sp, #56	; 0x38
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
 8005e54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e56:	2300      	movs	r3, #0
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10c      	bne.n	8005e7e <xQueueGenericSend+0x36>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	b672      	cpsid	i
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	b662      	cpsie	i
 8005e78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <xQueueGenericSend+0x44>
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <xQueueGenericSend+0x48>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <xQueueGenericSend+0x4a>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <xQueueGenericSend+0x68>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	b672      	cpsid	i
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	b662      	cpsie	i
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d103      	bne.n	8005ebe <xQueueGenericSend+0x76>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <xQueueGenericSend+0x7a>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e000      	b.n	8005ec4 <xQueueGenericSend+0x7c>
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <xQueueGenericSend+0x9a>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	b672      	cpsid	i
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	b662      	cpsie	i
 8005edc:	623b      	str	r3, [r7, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ee2:	f001 fd1f 	bl	8007924 <xTaskGetSchedulerState>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d102      	bne.n	8005ef2 <xQueueGenericSend+0xaa>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <xQueueGenericSend+0xae>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <xQueueGenericSend+0xb0>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10c      	bne.n	8005f16 <xQueueGenericSend+0xce>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	b672      	cpsid	i
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	b662      	cpsie	i
 8005f10:	61fb      	str	r3, [r7, #28]
}
 8005f12:	bf00      	nop
 8005f14:	e7fe      	b.n	8005f14 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f16:	f002 fb51 	bl	80085bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d302      	bcc.n	8005f2c <xQueueGenericSend+0xe4>
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d129      	bne.n	8005f80 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f32:	f000 fc82 	bl	800683a <prvCopyDataToQueue>
 8005f36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d010      	beq.n	8005f62 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f42:	3324      	adds	r3, #36	; 0x24
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fb23 	bl	8007590 <xTaskRemoveFromEventList>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d013      	beq.n	8005f78 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f50:	4b3f      	ldr	r3, [pc, #252]	; (8006050 <xQueueGenericSend+0x208>)
 8005f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	e00a      	b.n	8005f78 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f68:	4b39      	ldr	r3, [pc, #228]	; (8006050 <xQueueGenericSend+0x208>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f78:	f002 fb54 	bl	8008624 <vPortExitCritical>
				return pdPASS;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e063      	b.n	8006048 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d103      	bne.n	8005f8e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f86:	f002 fb4d 	bl	8008624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e05c      	b.n	8006048 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 fb5f 	bl	800765c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fa2:	f002 fb3f 	bl	8008624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fa6:	f001 f8bf 	bl	8007128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005faa:	f002 fb07 	bl	80085bc <vPortEnterCritical>
 8005fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fb4:	b25b      	sxtb	r3, r3
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fba:	d103      	bne.n	8005fc4 <xQueueGenericSend+0x17c>
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd0:	d103      	bne.n	8005fda <xQueueGenericSend+0x192>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fda:	f002 fb23 	bl	8008624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fde:	1d3a      	adds	r2, r7, #4
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 fb4e 	bl	8007688 <xTaskCheckForTimeOut>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d124      	bne.n	800603c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ff2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff4:	f000 fd19 	bl	8006a2a <prvIsQueueFull>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d018      	beq.n	8006030 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006000:	3310      	adds	r3, #16
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	4611      	mov	r1, r2
 8006006:	4618      	mov	r0, r3
 8006008:	f001 fa6e 	bl	80074e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800600c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800600e:	f000 fca4 	bl	800695a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006012:	f001 f897 	bl	8007144 <xTaskResumeAll>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	f47f af7c 	bne.w	8005f16 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800601e:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <xQueueGenericSend+0x208>)
 8006020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	e772      	b.n	8005f16 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006030:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006032:	f000 fc92 	bl	800695a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006036:	f001 f885 	bl	8007144 <xTaskResumeAll>
 800603a:	e76c      	b.n	8005f16 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800603c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800603e:	f000 fc8c 	bl	800695a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006042:	f001 f87f 	bl	8007144 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006046:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006048:	4618      	mov	r0, r3
 800604a:	3738      	adds	r7, #56	; 0x38
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	e000ed04 	.word	0xe000ed04

08006054 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08e      	sub	sp, #56	; 0x38
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10c      	bne.n	8006086 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	b672      	cpsid	i
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	b662      	cpsie	i
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006082:	bf00      	nop
 8006084:	e7fe      	b.n	8006084 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d103      	bne.n	8006094 <xQueueGenericSendFromISR+0x40>
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <xQueueGenericSendFromISR+0x44>
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <xQueueGenericSendFromISR+0x46>
 8006098:	2300      	movs	r3, #0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10c      	bne.n	80060b8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	b672      	cpsid	i
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	b662      	cpsie	i
 80060b2:	623b      	str	r3, [r7, #32]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d103      	bne.n	80060c6 <xQueueGenericSendFromISR+0x72>
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <xQueueGenericSendFromISR+0x76>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueGenericSendFromISR+0x78>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10c      	bne.n	80060ea <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	b672      	cpsid	i
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	b662      	cpsie	i
 80060e4:	61fb      	str	r3, [r7, #28]
}
 80060e6:	bf00      	nop
 80060e8:	e7fe      	b.n	80060e8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060ea:	f002 fb4f 	bl	800878c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060ee:	f3ef 8211 	mrs	r2, BASEPRI
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	b672      	cpsid	i
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	b662      	cpsie	i
 8006106:	61ba      	str	r2, [r7, #24]
 8006108:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800610a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	429a      	cmp	r2, r3
 8006118:	d302      	bcc.n	8006120 <xQueueGenericSendFromISR+0xcc>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d12c      	bne.n	800617a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	68b9      	ldr	r1, [r7, #8]
 800612e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006130:	f000 fb83 	bl	800683a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006134:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800613c:	d112      	bne.n	8006164 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	3324      	adds	r3, #36	; 0x24
 800614a:	4618      	mov	r0, r3
 800614c:	f001 fa20 	bl	8007590 <xTaskRemoveFromEventList>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00e      	beq.n	8006174 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e007      	b.n	8006174 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006164:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006168:	3301      	adds	r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	b25a      	sxtb	r2, r3
 800616e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006174:	2301      	movs	r3, #1
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006178:	e001      	b.n	800617e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
 800617e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006180:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006188:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800618a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800618c:	4618      	mov	r0, r3
 800618e:	3738      	adds	r7, #56	; 0x38
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08e      	sub	sp, #56	; 0x38
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10c      	bne.n	80061c2 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ac:	b672      	cpsid	i
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	b662      	cpsie	i
 80061bc:	623b      	str	r3, [r7, #32]
}
 80061be:	bf00      	nop
 80061c0:	e7fe      	b.n	80061c0 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <xQueueGiveFromISR+0x50>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	b672      	cpsid	i
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	b662      	cpsie	i
 80061de:	61fb      	str	r3, [r7, #28]
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <xQueueGiveFromISR+0x60>
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <xQueueGiveFromISR+0x64>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <xQueueGiveFromISR+0x66>
 80061f8:	2300      	movs	r3, #0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10c      	bne.n	8006218 <xQueueGiveFromISR+0x84>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	b672      	cpsid	i
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	b662      	cpsie	i
 8006212:	61bb      	str	r3, [r7, #24]
}
 8006214:	bf00      	nop
 8006216:	e7fe      	b.n	8006216 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006218:	f002 fab8 	bl	800878c <vPortValidateInterruptPriority>
	__asm volatile
 800621c:	f3ef 8211 	mrs	r2, BASEPRI
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	b672      	cpsid	i
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	b662      	cpsie	i
 8006234:	617a      	str	r2, [r7, #20]
 8006236:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006238:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006248:	429a      	cmp	r2, r3
 800624a:	d22b      	bcs.n	80062a4 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800625e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006266:	d112      	bne.n	800628e <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	2b00      	cmp	r3, #0
 800626e:	d016      	beq.n	800629e <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	3324      	adds	r3, #36	; 0x24
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f98b 	bl	8007590 <xTaskRemoveFromEventList>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00e      	beq.n	800629e <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	e007      	b.n	800629e <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800628e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006292:	3301      	adds	r3, #1
 8006294:	b2db      	uxtb	r3, r3
 8006296:	b25a      	sxtb	r2, r3
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800629e:	2301      	movs	r3, #1
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
 80062a2:	e001      	b.n	80062a8 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	637b      	str	r3, [r7, #52]	; 0x34
 80062a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062aa:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f383 8811 	msr	BASEPRI, r3
}
 80062b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3738      	adds	r7, #56	; 0x38
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08c      	sub	sp, #48	; 0x30
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062cc:	2300      	movs	r3, #0
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10c      	bne.n	80062f4 <xQueueReceive+0x34>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	b672      	cpsid	i
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	b662      	cpsie	i
 80062ee:	623b      	str	r3, [r7, #32]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <xQueueReceive+0x42>
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <xQueueReceive+0x46>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <xQueueReceive+0x48>
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10c      	bne.n	8006326 <xQueueReceive+0x66>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	b672      	cpsid	i
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	b662      	cpsie	i
 8006320:	61fb      	str	r3, [r7, #28]
}
 8006322:	bf00      	nop
 8006324:	e7fe      	b.n	8006324 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006326:	f001 fafd 	bl	8007924 <xTaskGetSchedulerState>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d102      	bne.n	8006336 <xQueueReceive+0x76>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <xQueueReceive+0x7a>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <xQueueReceive+0x7c>
 800633a:	2300      	movs	r3, #0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10c      	bne.n	800635a <xQueueReceive+0x9a>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	b672      	cpsid	i
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	b662      	cpsie	i
 8006354:	61bb      	str	r3, [r7, #24]
}
 8006356:	bf00      	nop
 8006358:	e7fe      	b.n	8006358 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800635a:	f002 f92f 	bl	80085bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	2b00      	cmp	r3, #0
 8006368:	d01f      	beq.n	80063aa <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636e:	f000 face 	bl	800690e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	1e5a      	subs	r2, r3, #1
 8006376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006378:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00f      	beq.n	80063a2 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006384:	3310      	adds	r3, #16
 8006386:	4618      	mov	r0, r3
 8006388:	f001 f902 	bl	8007590 <xTaskRemoveFromEventList>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006392:	4b3d      	ldr	r3, [pc, #244]	; (8006488 <xQueueReceive+0x1c8>)
 8006394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063a2:	f002 f93f 	bl	8008624 <vPortExitCritical>
				return pdPASS;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e069      	b.n	800647e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063b0:	f002 f938 	bl	8008624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e062      	b.n	800647e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d106      	bne.n	80063cc <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063be:	f107 0310 	add.w	r3, r7, #16
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f94a 	bl	800765c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063cc:	f002 f92a 	bl	8008624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063d0:	f000 feaa 	bl	8007128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063d4:	f002 f8f2 	bl	80085bc <vPortEnterCritical>
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e4:	d103      	bne.n	80063ee <xQueueReceive+0x12e>
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063f4:	b25b      	sxtb	r3, r3
 80063f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063fa:	d103      	bne.n	8006404 <xQueueReceive+0x144>
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006404:	f002 f90e 	bl	8008624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006408:	1d3a      	adds	r2, r7, #4
 800640a:	f107 0310 	add.w	r3, r7, #16
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f001 f939 	bl	8007688 <xTaskCheckForTimeOut>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d123      	bne.n	8006464 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800641c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800641e:	f000 faee 	bl	80069fe <prvIsQueueEmpty>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d017      	beq.n	8006458 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	3324      	adds	r3, #36	; 0x24
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4611      	mov	r1, r2
 8006430:	4618      	mov	r0, r3
 8006432:	f001 f859 	bl	80074e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006438:	f000 fa8f 	bl	800695a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800643c:	f000 fe82 	bl	8007144 <xTaskResumeAll>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d189      	bne.n	800635a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006446:	4b10      	ldr	r3, [pc, #64]	; (8006488 <xQueueReceive+0x1c8>)
 8006448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	e780      	b.n	800635a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800645a:	f000 fa7e 	bl	800695a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800645e:	f000 fe71 	bl	8007144 <xTaskResumeAll>
 8006462:	e77a      	b.n	800635a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006466:	f000 fa78 	bl	800695a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800646a:	f000 fe6b 	bl	8007144 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800646e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006470:	f000 fac5 	bl	80069fe <prvIsQueueEmpty>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	f43f af6f 	beq.w	800635a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800647c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800647e:	4618      	mov	r0, r3
 8006480:	3730      	adds	r7, #48	; 0x30
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	e000ed04 	.word	0xe000ed04

0800648c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b08e      	sub	sp, #56	; 0x38
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006496:	2300      	movs	r3, #0
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10c      	bne.n	80064c2 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ac:	b672      	cpsid	i
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	b662      	cpsie	i
 80064bc:	623b      	str	r3, [r7, #32]
}
 80064be:	bf00      	nop
 80064c0:	e7fe      	b.n	80064c0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00c      	beq.n	80064e4 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80064ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ce:	b672      	cpsid	i
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	b662      	cpsie	i
 80064de:	61fb      	str	r3, [r7, #28]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064e4:	f001 fa1e 	bl	8007924 <xTaskGetSchedulerState>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <xQueueSemaphoreTake+0x68>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <xQueueSemaphoreTake+0x6c>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e000      	b.n	80064fa <xQueueSemaphoreTake+0x6e>
 80064f8:	2300      	movs	r3, #0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10c      	bne.n	8006518 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	b672      	cpsid	i
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	b662      	cpsie	i
 8006512:	61bb      	str	r3, [r7, #24]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006518:	f002 f850 	bl	80085bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800651c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	2b00      	cmp	r3, #0
 8006526:	d024      	beq.n	8006572 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	1e5a      	subs	r2, r3, #1
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006538:	f001 fb72 	bl	8007c20 <pvTaskIncrementMutexHeldCount>
 800653c:	4602      	mov	r2, r0
 800653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006540:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00f      	beq.n	800656a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800654a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800654c:	3310      	adds	r3, #16
 800654e:	4618      	mov	r0, r3
 8006550:	f001 f81e 	bl	8007590 <xTaskRemoveFromEventList>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800655a:	4b55      	ldr	r3, [pc, #340]	; (80066b0 <xQueueSemaphoreTake+0x224>)
 800655c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800656a:	f002 f85b 	bl	8008624 <vPortExitCritical>
				return pdPASS;
 800656e:	2301      	movs	r3, #1
 8006570:	e099      	b.n	80066a6 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d113      	bne.n	80065a0 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	b672      	cpsid	i
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	b662      	cpsie	i
 8006592:	617b      	str	r3, [r7, #20]
}
 8006594:	bf00      	nop
 8006596:	e7fe      	b.n	8006596 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006598:	f002 f844 	bl	8008624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800659c:	2300      	movs	r3, #0
 800659e:	e082      	b.n	80066a6 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d106      	bne.n	80065b4 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 f856 	bl	800765c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065b4:	f002 f836 	bl	8008624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065b8:	f000 fdb6 	bl	8007128 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065bc:	f001 fffe 	bl	80085bc <vPortEnterCritical>
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065c6:	b25b      	sxtb	r3, r3
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065cc:	d103      	bne.n	80065d6 <xQueueSemaphoreTake+0x14a>
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065dc:	b25b      	sxtb	r3, r3
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e2:	d103      	bne.n	80065ec <xQueueSemaphoreTake+0x160>
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065ec:	f002 f81a 	bl	8008624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065f0:	463a      	mov	r2, r7
 80065f2:	f107 030c 	add.w	r3, r7, #12
 80065f6:	4611      	mov	r1, r2
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 f845 	bl	8007688 <xTaskCheckForTimeOut>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d132      	bne.n	800666a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006606:	f000 f9fa 	bl	80069fe <prvIsQueueEmpty>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d026      	beq.n	800665e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006618:	f001 ffd0 	bl	80085bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f001 f99d 	bl	8007960 <xTaskPriorityInherit>
 8006626:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006628:	f001 fffc 	bl	8008624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800662c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662e:	3324      	adds	r3, #36	; 0x24
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	4611      	mov	r1, r2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 ff57 	bl	80074e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800663a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800663c:	f000 f98d 	bl	800695a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006640:	f000 fd80 	bl	8007144 <xTaskResumeAll>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	f47f af66 	bne.w	8006518 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800664c:	4b18      	ldr	r3, [pc, #96]	; (80066b0 <xQueueSemaphoreTake+0x224>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	e75c      	b.n	8006518 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800665e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006660:	f000 f97b 	bl	800695a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006664:	f000 fd6e 	bl	8007144 <xTaskResumeAll>
 8006668:	e756      	b.n	8006518 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800666a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800666c:	f000 f975 	bl	800695a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006670:	f000 fd68 	bl	8007144 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006676:	f000 f9c2 	bl	80069fe <prvIsQueueEmpty>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	f43f af4b 	beq.w	8006518 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00d      	beq.n	80066a4 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006688:	f001 ff98 	bl	80085bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800668c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800668e:	f000 f8bc 	bl	800680a <prvGetDisinheritPriorityAfterTimeout>
 8006692:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800669a:	4618      	mov	r0, r3
 800669c:	f001 fa3a 	bl	8007b14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80066a0:	f001 ffc0 	bl	8008624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3738      	adds	r7, #56	; 0x38
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	e000ed04 	.word	0xe000ed04

080066b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08e      	sub	sp, #56	; 0x38
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10c      	bne.n	80066e4 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80066ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ce:	b672      	cpsid	i
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	b662      	cpsie	i
 80066de:	623b      	str	r3, [r7, #32]
}
 80066e0:	bf00      	nop
 80066e2:	e7fe      	b.n	80066e2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d103      	bne.n	80066f2 <xQueueReceiveFromISR+0x3e>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d101      	bne.n	80066f6 <xQueueReceiveFromISR+0x42>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <xQueueReceiveFromISR+0x44>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10c      	bne.n	8006716 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	b672      	cpsid	i
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	b662      	cpsie	i
 8006710:	61fb      	str	r3, [r7, #28]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006716:	f002 f839 	bl	800878c <vPortValidateInterruptPriority>
	__asm volatile
 800671a:	f3ef 8211 	mrs	r2, BASEPRI
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	b672      	cpsid	i
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	b662      	cpsie	i
 8006732:	61ba      	str	r2, [r7, #24]
 8006734:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006736:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	2b00      	cmp	r3, #0
 8006744:	d02f      	beq.n	80067a6 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800674c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006754:	f000 f8db 	bl	800690e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	1e5a      	subs	r2, r3, #1
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006760:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006768:	d112      	bne.n	8006790 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	3310      	adds	r3, #16
 8006776:	4618      	mov	r0, r3
 8006778:	f000 ff0a 	bl	8007590 <xTaskRemoveFromEventList>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e007      	b.n	80067a0 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006794:	3301      	adds	r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	b25a      	sxtb	r2, r3
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80067a0:	2301      	movs	r3, #1
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34
 80067a4:	e001      	b.n	80067aa <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f383 8811 	msr	BASEPRI, r3
}
 80067b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3738      	adds	r7, #56	; 0x38
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10c      	bne.n	80067ec <vQueueDelete+0x2c>
	__asm volatile
 80067d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d6:	b672      	cpsid	i
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	b662      	cpsie	i
 80067e6:	60bb      	str	r3, [r7, #8]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 f95f 	bl	8006ab0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d102      	bne.n	8006802 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f002 f8d3 	bl	80089a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006816:	2b00      	cmp	r3, #0
 8006818:	d006      	beq.n	8006828 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006824:	60fb      	str	r3, [r7, #12]
 8006826:	e001      	b.n	800682c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006828:	2300      	movs	r3, #0
 800682a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800682c:	68fb      	ldr	r3, [r7, #12]
	}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b086      	sub	sp, #24
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10d      	bne.n	8006874 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d14d      	bne.n	80068fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	4618      	mov	r0, r3
 8006866:	f001 f8e3 	bl	8007a30 <xTaskPriorityDisinherit>
 800686a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	609a      	str	r2, [r3, #8]
 8006872:	e043      	b.n	80068fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d119      	bne.n	80068ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6858      	ldr	r0, [r3, #4]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	461a      	mov	r2, r3
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	f002 f9cf 	bl	8008c28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	441a      	add	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d32b      	bcc.n	80068fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	605a      	str	r2, [r3, #4]
 80068ac:	e026      	b.n	80068fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	68d8      	ldr	r0, [r3, #12]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	461a      	mov	r2, r3
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	f002 f9b5 	bl	8008c28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	425b      	negs	r3, r3
 80068c8:	441a      	add	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d207      	bcs.n	80068ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	425b      	negs	r3, r3
 80068e4:	441a      	add	r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d105      	bne.n	80068fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006904:	697b      	ldr	r3, [r7, #20]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3718      	adds	r7, #24
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691c:	2b00      	cmp	r3, #0
 800691e:	d018      	beq.n	8006952 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	441a      	add	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	d303      	bcc.n	8006942 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68d9      	ldr	r1, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	461a      	mov	r2, r3
 800694c:	6838      	ldr	r0, [r7, #0]
 800694e:	f002 f96b 	bl	8008c28 <memcpy>
	}
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006962:	f001 fe2b 	bl	80085bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800696c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800696e:	e011      	b.n	8006994 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	2b00      	cmp	r3, #0
 8006976:	d012      	beq.n	800699e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3324      	adds	r3, #36	; 0x24
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fe07 	bl	8007590 <xTaskRemoveFromEventList>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006988:	f000 fee4 	bl	8007754 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	3b01      	subs	r3, #1
 8006990:	b2db      	uxtb	r3, r3
 8006992:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006994:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	dce9      	bgt.n	8006970 <prvUnlockQueue+0x16>
 800699c:	e000      	b.n	80069a0 <prvUnlockQueue+0x46>
					break;
 800699e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	22ff      	movs	r2, #255	; 0xff
 80069a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069a8:	f001 fe3c 	bl	8008624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069ac:	f001 fe06 	bl	80085bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069b8:	e011      	b.n	80069de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d012      	beq.n	80069e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	3310      	adds	r3, #16
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 fde2 	bl	8007590 <xTaskRemoveFromEventList>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069d2:	f000 febf 	bl	8007754 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069d6:	7bbb      	ldrb	r3, [r7, #14]
 80069d8:	3b01      	subs	r3, #1
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	dce9      	bgt.n	80069ba <prvUnlockQueue+0x60>
 80069e6:	e000      	b.n	80069ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80069f2:	f001 fe17 	bl	8008624 <vPortExitCritical>
}
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a06:	f001 fdd9 	bl	80085bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d102      	bne.n	8006a18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a12:	2301      	movs	r3, #1
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	e001      	b.n	8006a1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a1c:	f001 fe02 	bl	8008624 <vPortExitCritical>

	return xReturn;
 8006a20:	68fb      	ldr	r3, [r7, #12]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a32:	f001 fdc3 	bl	80085bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d102      	bne.n	8006a48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a42:	2301      	movs	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e001      	b.n	8006a4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a4c:	f001 fdea 	bl	8008624 <vPortExitCritical>

	return xReturn;
 8006a50:	68fb      	ldr	r3, [r7, #12]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	e014      	b.n	8006a96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a6c:	4a0f      	ldr	r2, [pc, #60]	; (8006aac <vQueueAddToRegistry+0x50>)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10b      	bne.n	8006a90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a78:	490c      	ldr	r1, [pc, #48]	; (8006aac <vQueueAddToRegistry+0x50>)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a82:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <vQueueAddToRegistry+0x50>)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	4413      	add	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a8e:	e006      	b.n	8006a9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	3301      	adds	r3, #1
 8006a94:	60fb      	str	r3, [r7, #12]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b07      	cmp	r3, #7
 8006a9a:	d9e7      	bls.n	8006a6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a9c:	bf00      	nop
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	20001108 	.word	0x20001108

08006ab0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e016      	b.n	8006aec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006abe:	4a10      	ldr	r2, [pc, #64]	; (8006b00 <vQueueUnregisterQueue+0x50>)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d10b      	bne.n	8006ae6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006ace:	4a0c      	ldr	r2, [pc, #48]	; (8006b00 <vQueueUnregisterQueue+0x50>)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006ad8:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <vQueueUnregisterQueue+0x50>)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	4413      	add	r3, r2
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	605a      	str	r2, [r3, #4]
				break;
 8006ae4:	e006      	b.n	8006af4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b07      	cmp	r3, #7
 8006af0:	d9e5      	bls.n	8006abe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20001108 	.word	0x20001108

08006b04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b14:	f001 fd52 	bl	80085bc <vPortEnterCritical>
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b1e:	b25b      	sxtb	r3, r3
 8006b20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b24:	d103      	bne.n	8006b2e <vQueueWaitForMessageRestricted+0x2a>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b34:	b25b      	sxtb	r3, r3
 8006b36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b3a:	d103      	bne.n	8006b44 <vQueueWaitForMessageRestricted+0x40>
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b44:	f001 fd6e 	bl	8008624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d106      	bne.n	8006b5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	3324      	adds	r3, #36	; 0x24
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	68b9      	ldr	r1, [r7, #8]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 fceb 	bl	8007534 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b5e:	6978      	ldr	r0, [r7, #20]
 8006b60:	f7ff fefb 	bl	800695a <prvUnlockQueue>
	}
 8006b64:	bf00      	nop
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b08e      	sub	sp, #56	; 0x38
 8006b70:	af04      	add	r7, sp, #16
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10c      	bne.n	8006b9a <xTaskCreateStatic+0x2e>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	b672      	cpsid	i
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	b662      	cpsie	i
 8006b94:	623b      	str	r3, [r7, #32]
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10c      	bne.n	8006bba <xTaskCreateStatic+0x4e>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	b672      	cpsid	i
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	b662      	cpsie	i
 8006bb4:	61fb      	str	r3, [r7, #28]
}
 8006bb6:	bf00      	nop
 8006bb8:	e7fe      	b.n	8006bb8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bba:	23bc      	movs	r3, #188	; 0xbc
 8006bbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	2bbc      	cmp	r3, #188	; 0xbc
 8006bc2:	d00c      	beq.n	8006bde <xTaskCreateStatic+0x72>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc8:	b672      	cpsid	i
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	b662      	cpsie	i
 8006bd8:	61bb      	str	r3, [r7, #24]
}
 8006bda:	bf00      	nop
 8006bdc:	e7fe      	b.n	8006bdc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006bde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d01e      	beq.n	8006c24 <xTaskCreateStatic+0xb8>
 8006be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01b      	beq.n	8006c24 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006bf4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006bfe:	2300      	movs	r3, #0
 8006c00:	9303      	str	r3, [sp, #12]
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	9302      	str	r3, [sp, #8]
 8006c06:	f107 0314 	add.w	r3, r7, #20
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f850 	bl	8006cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c1e:	f000 f8f5 	bl	8006e0c <prvAddNewTaskToReadyList>
 8006c22:	e001      	b.n	8006c28 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c28:	697b      	ldr	r3, [r7, #20]
	}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3728      	adds	r7, #40	; 0x28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b08c      	sub	sp, #48	; 0x30
 8006c36:	af04      	add	r7, sp, #16
 8006c38:	60f8      	str	r0, [r7, #12]
 8006c3a:	60b9      	str	r1, [r7, #8]
 8006c3c:	603b      	str	r3, [r7, #0]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 fde4 	bl	8008814 <pvPortMalloc>
 8006c4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00e      	beq.n	8006c72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c54:	20bc      	movs	r0, #188	; 0xbc
 8006c56:	f001 fddd 	bl	8008814 <pvPortMalloc>
 8006c5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
 8006c68:	e005      	b.n	8006c76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c6a:	6978      	ldr	r0, [r7, #20]
 8006c6c:	f001 fe9c 	bl	80089a8 <vPortFree>
 8006c70:	e001      	b.n	8006c76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c72:	2300      	movs	r3, #0
 8006c74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d017      	beq.n	8006cac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c84:	88fa      	ldrh	r2, [r7, #6]
 8006c86:	2300      	movs	r3, #0
 8006c88:	9303      	str	r3, [sp, #12]
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	9302      	str	r3, [sp, #8]
 8006c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c90:	9301      	str	r3, [sp, #4]
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68b9      	ldr	r1, [r7, #8]
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f80e 	bl	8006cbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ca0:	69f8      	ldr	r0, [r7, #28]
 8006ca2:	f000 f8b3 	bl	8006e0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	61bb      	str	r3, [r7, #24]
 8006caa:	e002      	b.n	8006cb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3720      	adds	r7, #32
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	21a5      	movs	r1, #165	; 0xa5
 8006cd6:	f001 ffb5 	bl	8008c44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ce4:	440b      	add	r3, r1
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	f023 0307 	bic.w	r3, r3, #7
 8006cf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	b672      	cpsid	i
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	b662      	cpsie	i
 8006d12:	617b      	str	r3, [r7, #20]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01f      	beq.n	8006d5e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d1e:	2300      	movs	r3, #0
 8006d20:	61fb      	str	r3, [r7, #28]
 8006d22:	e012      	b.n	8006d4a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d24:	68ba      	ldr	r2, [r7, #8]
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	7819      	ldrb	r1, [r3, #0]
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	4413      	add	r3, r2
 8006d32:	3334      	adds	r3, #52	; 0x34
 8006d34:	460a      	mov	r2, r1
 8006d36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d38:	68ba      	ldr	r2, [r7, #8]
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d006      	beq.n	8006d52 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	3301      	adds	r3, #1
 8006d48:	61fb      	str	r3, [r7, #28]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	2b0f      	cmp	r3, #15
 8006d4e:	d9e9      	bls.n	8006d24 <prvInitialiseNewTask+0x68>
 8006d50:	e000      	b.n	8006d54 <prvInitialiseNewTask+0x98>
			{
				break;
 8006d52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d5c:	e003      	b.n	8006d66 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	2b37      	cmp	r3, #55	; 0x37
 8006d6a:	d901      	bls.n	8006d70 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d6c:	2337      	movs	r3, #55	; 0x37
 8006d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7e:	2200      	movs	r2, #0
 8006d80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	3304      	adds	r3, #4
 8006d86:	4618      	mov	r0, r3
 8006d88:	f7fe fe06 	bl	8005998 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	3318      	adds	r3, #24
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fe fe01 	bl	8005998 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006daa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db6:	2200      	movs	r2, #0
 8006db8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbe:	3354      	adds	r3, #84	; 0x54
 8006dc0:	2260      	movs	r2, #96	; 0x60
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f001 ff3d 	bl	8008c44 <memset>
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	4a0c      	ldr	r2, [pc, #48]	; (8006e00 <prvInitialiseNewTask+0x144>)
 8006dce:	659a      	str	r2, [r3, #88]	; 0x58
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	4a0c      	ldr	r2, [pc, #48]	; (8006e04 <prvInitialiseNewTask+0x148>)
 8006dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	4a0b      	ldr	r2, [pc, #44]	; (8006e08 <prvInitialiseNewTask+0x14c>)
 8006dda:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	69b8      	ldr	r0, [r7, #24]
 8006de2:	f001 fae1 	bl	80083a8 <pxPortInitialiseStack>
 8006de6:	4602      	mov	r2, r0
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006df8:	bf00      	nop
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	08008f64 	.word	0x08008f64
 8006e04:	08008f84 	.word	0x08008f84
 8006e08:	08008f44 	.word	0x08008f44

08006e0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e14:	f001 fbd2 	bl	80085bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e18:	4b2d      	ldr	r3, [pc, #180]	; (8006ed0 <prvAddNewTaskToReadyList+0xc4>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	4a2c      	ldr	r2, [pc, #176]	; (8006ed0 <prvAddNewTaskToReadyList+0xc4>)
 8006e20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e22:	4b2c      	ldr	r3, [pc, #176]	; (8006ed4 <prvAddNewTaskToReadyList+0xc8>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e2a:	4a2a      	ldr	r2, [pc, #168]	; (8006ed4 <prvAddNewTaskToReadyList+0xc8>)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e30:	4b27      	ldr	r3, [pc, #156]	; (8006ed0 <prvAddNewTaskToReadyList+0xc4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d110      	bne.n	8006e5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e38:	f000 fcb0 	bl	800779c <prvInitialiseTaskLists>
 8006e3c:	e00d      	b.n	8006e5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e3e:	4b26      	ldr	r3, [pc, #152]	; (8006ed8 <prvAddNewTaskToReadyList+0xcc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e46:	4b23      	ldr	r3, [pc, #140]	; (8006ed4 <prvAddNewTaskToReadyList+0xc8>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d802      	bhi.n	8006e5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e54:	4a1f      	ldr	r2, [pc, #124]	; (8006ed4 <prvAddNewTaskToReadyList+0xc8>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e5a:	4b20      	ldr	r3, [pc, #128]	; (8006edc <prvAddNewTaskToReadyList+0xd0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	4a1e      	ldr	r2, [pc, #120]	; (8006edc <prvAddNewTaskToReadyList+0xd0>)
 8006e62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e64:	4b1d      	ldr	r3, [pc, #116]	; (8006edc <prvAddNewTaskToReadyList+0xd0>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e70:	4b1b      	ldr	r3, [pc, #108]	; (8006ee0 <prvAddNewTaskToReadyList+0xd4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d903      	bls.n	8006e80 <prvAddNewTaskToReadyList+0x74>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	4a18      	ldr	r2, [pc, #96]	; (8006ee0 <prvAddNewTaskToReadyList+0xd4>)
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	4613      	mov	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4a15      	ldr	r2, [pc, #84]	; (8006ee4 <prvAddNewTaskToReadyList+0xd8>)
 8006e8e:	441a      	add	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3304      	adds	r3, #4
 8006e94:	4619      	mov	r1, r3
 8006e96:	4610      	mov	r0, r2
 8006e98:	f7fe fd8b 	bl	80059b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006e9c:	f001 fbc2 	bl	8008624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ea0:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <prvAddNewTaskToReadyList+0xcc>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00e      	beq.n	8006ec6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ea8:	4b0a      	ldr	r3, [pc, #40]	; (8006ed4 <prvAddNewTaskToReadyList+0xc8>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d207      	bcs.n	8006ec6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ee8 <prvAddNewTaskToReadyList+0xdc>)
 8006eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ebc:	601a      	str	r2, [r3, #0]
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ec6:	bf00      	nop
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	2000161c 	.word	0x2000161c
 8006ed4:	20001148 	.word	0x20001148
 8006ed8:	20001628 	.word	0x20001628
 8006edc:	20001638 	.word	0x20001638
 8006ee0:	20001624 	.word	0x20001624
 8006ee4:	2000114c 	.word	0x2000114c
 8006ee8:	e000ed04 	.word	0xe000ed04

08006eec <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006ef4:	f001 fb62 	bl	80085bc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <vTaskDelete+0x18>
 8006efe:	4b2d      	ldr	r3, [pc, #180]	; (8006fb4 <vTaskDelete+0xc8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	e000      	b.n	8006f06 <vTaskDelete+0x1a>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7fe fdad 	bl	8005a6c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	3318      	adds	r3, #24
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fda4 	bl	8005a6c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006f24:	4b24      	ldr	r3, [pc, #144]	; (8006fb8 <vTaskDelete+0xcc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	4a23      	ldr	r2, [pc, #140]	; (8006fb8 <vTaskDelete+0xcc>)
 8006f2c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006f2e:	4b21      	ldr	r3, [pc, #132]	; (8006fb4 <vTaskDelete+0xc8>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d10b      	bne.n	8006f50 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	481f      	ldr	r0, [pc, #124]	; (8006fbc <vTaskDelete+0xd0>)
 8006f40:	f7fe fd37 	bl	80059b2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006f44:	4b1e      	ldr	r3, [pc, #120]	; (8006fc0 <vTaskDelete+0xd4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	4a1d      	ldr	r2, [pc, #116]	; (8006fc0 <vTaskDelete+0xd4>)
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	e009      	b.n	8006f64 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006f50:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <vTaskDelete+0xd8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3b01      	subs	r3, #1
 8006f56:	4a1b      	ldr	r2, [pc, #108]	; (8006fc4 <vTaskDelete+0xd8>)
 8006f58:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fc8c 	bl	8007878 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006f60:	f000 fcc0 	bl	80078e4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8006f64:	f001 fb5e 	bl	8008624 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006f68:	4b17      	ldr	r3, [pc, #92]	; (8006fc8 <vTaskDelete+0xdc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01d      	beq.n	8006fac <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <vTaskDelete+0xc8>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d118      	bne.n	8006fac <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006f7a:	4b14      	ldr	r3, [pc, #80]	; (8006fcc <vTaskDelete+0xe0>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00c      	beq.n	8006f9c <vTaskDelete+0xb0>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	b672      	cpsid	i
 8006f88:	f383 8811 	msr	BASEPRI, r3
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	f3bf 8f4f 	dsb	sy
 8006f94:	b662      	cpsie	i
 8006f96:	60bb      	str	r3, [r7, #8]
}
 8006f98:	bf00      	nop
 8006f9a:	e7fe      	b.n	8006f9a <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 8006f9c:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <vTaskDelete+0xe4>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20001148 	.word	0x20001148
 8006fb8:	20001638 	.word	0x20001638
 8006fbc:	200015f0 	.word	0x200015f0
 8006fc0:	20001604 	.word	0x20001604
 8006fc4:	2000161c 	.word	0x2000161c
 8006fc8:	20001628 	.word	0x20001628
 8006fcc:	20001644 	.word	0x20001644
 8006fd0:	e000ed04 	.word	0xe000ed04

08006fd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d019      	beq.n	800701a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <vTaskDelay+0x64>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00c      	beq.n	8007008 <vTaskDelay+0x34>
	__asm volatile
 8006fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff2:	b672      	cpsid	i
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	b662      	cpsie	i
 8007002:	60bb      	str	r3, [r7, #8]
}
 8007004:	bf00      	nop
 8007006:	e7fe      	b.n	8007006 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007008:	f000 f88e 	bl	8007128 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800700c:	2100      	movs	r1, #0
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 fe1a 	bl	8007c48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007014:	f000 f896 	bl	8007144 <xTaskResumeAll>
 8007018:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d107      	bne.n	8007030 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007020:	4b06      	ldr	r3, [pc, #24]	; (800703c <vTaskDelay+0x68>)
 8007022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20001644 	.word	0x20001644
 800703c:	e000ed04 	.word	0xe000ed04

08007040 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08a      	sub	sp, #40	; 0x28
 8007044:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800704a:	2300      	movs	r3, #0
 800704c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800704e:	463a      	mov	r2, r7
 8007050:	1d39      	adds	r1, r7, #4
 8007052:	f107 0308 	add.w	r3, r7, #8
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fc4a 	bl	80058f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	68ba      	ldr	r2, [r7, #8]
 8007062:	9202      	str	r2, [sp, #8]
 8007064:	9301      	str	r3, [sp, #4]
 8007066:	2300      	movs	r3, #0
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	2300      	movs	r3, #0
 800706c:	460a      	mov	r2, r1
 800706e:	4926      	ldr	r1, [pc, #152]	; (8007108 <vTaskStartScheduler+0xc8>)
 8007070:	4826      	ldr	r0, [pc, #152]	; (800710c <vTaskStartScheduler+0xcc>)
 8007072:	f7ff fd7b 	bl	8006b6c <xTaskCreateStatic>
 8007076:	4603      	mov	r3, r0
 8007078:	4a25      	ldr	r2, [pc, #148]	; (8007110 <vTaskStartScheduler+0xd0>)
 800707a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800707c:	4b24      	ldr	r3, [pc, #144]	; (8007110 <vTaskStartScheduler+0xd0>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007084:	2301      	movs	r3, #1
 8007086:	617b      	str	r3, [r7, #20]
 8007088:	e001      	b.n	800708e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d102      	bne.n	800709a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007094:	f000 fe2c 	bl	8007cf0 <xTimerCreateTimerTask>
 8007098:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	2b01      	cmp	r3, #1
 800709e:	d11d      	bne.n	80070dc <vTaskStartScheduler+0x9c>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	b672      	cpsid	i
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	b662      	cpsie	i
 80070b4:	613b      	str	r3, [r7, #16]
}
 80070b6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80070b8:	4b16      	ldr	r3, [pc, #88]	; (8007114 <vTaskStartScheduler+0xd4>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3354      	adds	r3, #84	; 0x54
 80070be:	4a16      	ldr	r2, [pc, #88]	; (8007118 <vTaskStartScheduler+0xd8>)
 80070c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80070c2:	4b16      	ldr	r3, [pc, #88]	; (800711c <vTaskStartScheduler+0xdc>)
 80070c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80070ca:	4b15      	ldr	r3, [pc, #84]	; (8007120 <vTaskStartScheduler+0xe0>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <vTaskStartScheduler+0xe4>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80070d6:	f001 f9f3 	bl	80084c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80070da:	e010      	b.n	80070fe <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e2:	d10c      	bne.n	80070fe <vTaskStartScheduler+0xbe>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	b672      	cpsid	i
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	b662      	cpsie	i
 80070f8:	60fb      	str	r3, [r7, #12]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <vTaskStartScheduler+0xbc>
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	08008e64 	.word	0x08008e64
 800710c:	0800776d 	.word	0x0800776d
 8007110:	20001640 	.word	0x20001640
 8007114:	20001148 	.word	0x20001148
 8007118:	20000020 	.word	0x20000020
 800711c:	2000163c 	.word	0x2000163c
 8007120:	20001628 	.word	0x20001628
 8007124:	20001620 	.word	0x20001620

08007128 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <vTaskSuspendAll+0x18>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	4a03      	ldr	r2, [pc, #12]	; (8007140 <vTaskSuspendAll+0x18>)
 8007134:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007136:	bf00      	nop
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20001644 	.word	0x20001644

08007144 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800714e:	2300      	movs	r3, #0
 8007150:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007152:	4b43      	ldr	r3, [pc, #268]	; (8007260 <xTaskResumeAll+0x11c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10c      	bne.n	8007174 <xTaskResumeAll+0x30>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	b672      	cpsid	i
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	b662      	cpsie	i
 800716e:	603b      	str	r3, [r7, #0]
}
 8007170:	bf00      	nop
 8007172:	e7fe      	b.n	8007172 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007174:	f001 fa22 	bl	80085bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007178:	4b39      	ldr	r3, [pc, #228]	; (8007260 <xTaskResumeAll+0x11c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3b01      	subs	r3, #1
 800717e:	4a38      	ldr	r2, [pc, #224]	; (8007260 <xTaskResumeAll+0x11c>)
 8007180:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007182:	4b37      	ldr	r3, [pc, #220]	; (8007260 <xTaskResumeAll+0x11c>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d162      	bne.n	8007250 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800718a:	4b36      	ldr	r3, [pc, #216]	; (8007264 <xTaskResumeAll+0x120>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d05e      	beq.n	8007250 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007192:	e02f      	b.n	80071f4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b34      	ldr	r3, [pc, #208]	; (8007268 <xTaskResumeAll+0x124>)
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3318      	adds	r3, #24
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fc63 	bl	8005a6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fe fc5e 	bl	8005a6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b4:	4b2d      	ldr	r3, [pc, #180]	; (800726c <xTaskResumeAll+0x128>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d903      	bls.n	80071c4 <xTaskResumeAll+0x80>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	4a2a      	ldr	r2, [pc, #168]	; (800726c <xTaskResumeAll+0x128>)
 80071c2:	6013      	str	r3, [r2, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4a27      	ldr	r2, [pc, #156]	; (8007270 <xTaskResumeAll+0x12c>)
 80071d2:	441a      	add	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f7fe fbe9 	bl	80059b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	4b23      	ldr	r3, [pc, #140]	; (8007274 <xTaskResumeAll+0x130>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80071ee:	4b22      	ldr	r3, [pc, #136]	; (8007278 <xTaskResumeAll+0x134>)
 80071f0:	2201      	movs	r2, #1
 80071f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071f4:	4b1c      	ldr	r3, [pc, #112]	; (8007268 <xTaskResumeAll+0x124>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1cb      	bne.n	8007194 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007202:	f000 fb6f 	bl	80078e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007206:	4b1d      	ldr	r3, [pc, #116]	; (800727c <xTaskResumeAll+0x138>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d010      	beq.n	8007234 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007212:	f000 f847 	bl	80072a4 <xTaskIncrementTick>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800721c:	4b16      	ldr	r3, [pc, #88]	; (8007278 <xTaskResumeAll+0x134>)
 800721e:	2201      	movs	r2, #1
 8007220:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	3b01      	subs	r3, #1
 8007226:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f1      	bne.n	8007212 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <xTaskResumeAll+0x138>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007234:	4b10      	ldr	r3, [pc, #64]	; (8007278 <xTaskResumeAll+0x134>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d009      	beq.n	8007250 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800723c:	2301      	movs	r3, #1
 800723e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <xTaskResumeAll+0x13c>)
 8007242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007250:	f001 f9e8 	bl	8008624 <vPortExitCritical>

	return xAlreadyYielded;
 8007254:	68bb      	ldr	r3, [r7, #8]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20001644 	.word	0x20001644
 8007264:	2000161c 	.word	0x2000161c
 8007268:	200015dc 	.word	0x200015dc
 800726c:	20001624 	.word	0x20001624
 8007270:	2000114c 	.word	0x2000114c
 8007274:	20001148 	.word	0x20001148
 8007278:	20001630 	.word	0x20001630
 800727c:	2000162c 	.word	0x2000162c
 8007280:	e000ed04 	.word	0xe000ed04

08007284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800728a:	4b05      	ldr	r3, [pc, #20]	; (80072a0 <xTaskGetTickCount+0x1c>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007290:	687b      	ldr	r3, [r7, #4]
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20001620 	.word	0x20001620

080072a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b086      	sub	sp, #24
 80072a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ae:	4b50      	ldr	r3, [pc, #320]	; (80073f0 <xTaskIncrementTick+0x14c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f040 808b 	bne.w	80073ce <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80072b8:	4b4e      	ldr	r3, [pc, #312]	; (80073f4 <xTaskIncrementTick+0x150>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3301      	adds	r3, #1
 80072be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80072c0:	4a4c      	ldr	r2, [pc, #304]	; (80073f4 <xTaskIncrementTick+0x150>)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d122      	bne.n	8007312 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80072cc:	4b4a      	ldr	r3, [pc, #296]	; (80073f8 <xTaskIncrementTick+0x154>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00c      	beq.n	80072f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	b672      	cpsid	i
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	b662      	cpsie	i
 80072ea:	603b      	str	r3, [r7, #0]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <xTaskIncrementTick+0x4a>
 80072f0:	4b41      	ldr	r3, [pc, #260]	; (80073f8 <xTaskIncrementTick+0x154>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
 80072f6:	4b41      	ldr	r3, [pc, #260]	; (80073fc <xTaskIncrementTick+0x158>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a3f      	ldr	r2, [pc, #252]	; (80073f8 <xTaskIncrementTick+0x154>)
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	4a3f      	ldr	r2, [pc, #252]	; (80073fc <xTaskIncrementTick+0x158>)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4b3e      	ldr	r3, [pc, #248]	; (8007400 <xTaskIncrementTick+0x15c>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	4a3d      	ldr	r2, [pc, #244]	; (8007400 <xTaskIncrementTick+0x15c>)
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	f000 fae9 	bl	80078e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007312:	4b3c      	ldr	r3, [pc, #240]	; (8007404 <xTaskIncrementTick+0x160>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	693a      	ldr	r2, [r7, #16]
 8007318:	429a      	cmp	r2, r3
 800731a:	d349      	bcc.n	80073b0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800731c:	4b36      	ldr	r3, [pc, #216]	; (80073f8 <xTaskIncrementTick+0x154>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d104      	bne.n	8007330 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007326:	4b37      	ldr	r3, [pc, #220]	; (8007404 <xTaskIncrementTick+0x160>)
 8007328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800732c:	601a      	str	r2, [r3, #0]
					break;
 800732e:	e03f      	b.n	80073b0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007330:	4b31      	ldr	r3, [pc, #196]	; (80073f8 <xTaskIncrementTick+0x154>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d203      	bcs.n	8007350 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007348:	4a2e      	ldr	r2, [pc, #184]	; (8007404 <xTaskIncrementTick+0x160>)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800734e:	e02f      	b.n	80073b0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	3304      	adds	r3, #4
 8007354:	4618      	mov	r0, r3
 8007356:	f7fe fb89 	bl	8005a6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	2b00      	cmp	r3, #0
 8007360:	d004      	beq.n	800736c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	3318      	adds	r3, #24
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fb80 	bl	8005a6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	4b25      	ldr	r3, [pc, #148]	; (8007408 <xTaskIncrementTick+0x164>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	429a      	cmp	r2, r3
 8007376:	d903      	bls.n	8007380 <xTaskIncrementTick+0xdc>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	4a22      	ldr	r2, [pc, #136]	; (8007408 <xTaskIncrementTick+0x164>)
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4a1f      	ldr	r2, [pc, #124]	; (800740c <xTaskIncrementTick+0x168>)
 800738e:	441a      	add	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	3304      	adds	r3, #4
 8007394:	4619      	mov	r1, r3
 8007396:	4610      	mov	r0, r2
 8007398:	f7fe fb0b 	bl	80059b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073a0:	4b1b      	ldr	r3, [pc, #108]	; (8007410 <xTaskIncrementTick+0x16c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d3b8      	bcc.n	800731c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073ae:	e7b5      	b.n	800731c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80073b0:	4b17      	ldr	r3, [pc, #92]	; (8007410 <xTaskIncrementTick+0x16c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4915      	ldr	r1, [pc, #84]	; (800740c <xTaskIncrementTick+0x168>)
 80073b8:	4613      	mov	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d907      	bls.n	80073d8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80073c8:	2301      	movs	r3, #1
 80073ca:	617b      	str	r3, [r7, #20]
 80073cc:	e004      	b.n	80073d8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80073ce:	4b11      	ldr	r3, [pc, #68]	; (8007414 <xTaskIncrementTick+0x170>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3301      	adds	r3, #1
 80073d4:	4a0f      	ldr	r2, [pc, #60]	; (8007414 <xTaskIncrementTick+0x170>)
 80073d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80073d8:	4b0f      	ldr	r3, [pc, #60]	; (8007418 <xTaskIncrementTick+0x174>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80073e0:	2301      	movs	r3, #1
 80073e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073e4:	697b      	ldr	r3, [r7, #20]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	20001644 	.word	0x20001644
 80073f4:	20001620 	.word	0x20001620
 80073f8:	200015d4 	.word	0x200015d4
 80073fc:	200015d8 	.word	0x200015d8
 8007400:	20001634 	.word	0x20001634
 8007404:	2000163c 	.word	0x2000163c
 8007408:	20001624 	.word	0x20001624
 800740c:	2000114c 	.word	0x2000114c
 8007410:	20001148 	.word	0x20001148
 8007414:	2000162c 	.word	0x2000162c
 8007418:	20001630 	.word	0x20001630

0800741c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007422:	4b2b      	ldr	r3, [pc, #172]	; (80074d0 <vTaskSwitchContext+0xb4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800742a:	4b2a      	ldr	r3, [pc, #168]	; (80074d4 <vTaskSwitchContext+0xb8>)
 800742c:	2201      	movs	r2, #1
 800742e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007430:	e048      	b.n	80074c4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007432:	4b28      	ldr	r3, [pc, #160]	; (80074d4 <vTaskSwitchContext+0xb8>)
 8007434:	2200      	movs	r2, #0
 8007436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007438:	4b27      	ldr	r3, [pc, #156]	; (80074d8 <vTaskSwitchContext+0xbc>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	e012      	b.n	8007466 <vTaskSwitchContext+0x4a>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10c      	bne.n	8007460 <vTaskSwitchContext+0x44>
	__asm volatile
 8007446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744a:	b672      	cpsid	i
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	b662      	cpsie	i
 800745a:	607b      	str	r3, [r7, #4]
}
 800745c:	bf00      	nop
 800745e:	e7fe      	b.n	800745e <vTaskSwitchContext+0x42>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3b01      	subs	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	491d      	ldr	r1, [pc, #116]	; (80074dc <vTaskSwitchContext+0xc0>)
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0e2      	beq.n	8007440 <vTaskSwitchContext+0x24>
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4613      	mov	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	4413      	add	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4a15      	ldr	r2, [pc, #84]	; (80074dc <vTaskSwitchContext+0xc0>)
 8007486:	4413      	add	r3, r2
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	3308      	adds	r3, #8
 800749c:	429a      	cmp	r2, r3
 800749e:	d104      	bne.n	80074aa <vTaskSwitchContext+0x8e>
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	605a      	str	r2, [r3, #4]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	4a0b      	ldr	r2, [pc, #44]	; (80074e0 <vTaskSwitchContext+0xc4>)
 80074b2:	6013      	str	r3, [r2, #0]
 80074b4:	4a08      	ldr	r2, [pc, #32]	; (80074d8 <vTaskSwitchContext+0xbc>)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074ba:	4b09      	ldr	r3, [pc, #36]	; (80074e0 <vTaskSwitchContext+0xc4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3354      	adds	r3, #84	; 0x54
 80074c0:	4a08      	ldr	r2, [pc, #32]	; (80074e4 <vTaskSwitchContext+0xc8>)
 80074c2:	6013      	str	r3, [r2, #0]
}
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20001644 	.word	0x20001644
 80074d4:	20001630 	.word	0x20001630
 80074d8:	20001624 	.word	0x20001624
 80074dc:	2000114c 	.word	0x2000114c
 80074e0:	20001148 	.word	0x20001148
 80074e4:	20000020 	.word	0x20000020

080074e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10c      	bne.n	8007512 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	b672      	cpsid	i
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	b662      	cpsie	i
 800750c:	60fb      	str	r3, [r7, #12]
}
 800750e:	bf00      	nop
 8007510:	e7fe      	b.n	8007510 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007512:	4b07      	ldr	r3, [pc, #28]	; (8007530 <vTaskPlaceOnEventList+0x48>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3318      	adds	r3, #24
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7fe fa6d 	bl	80059fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007520:	2101      	movs	r1, #1
 8007522:	6838      	ldr	r0, [r7, #0]
 8007524:	f000 fb90 	bl	8007c48 <prvAddCurrentTaskToDelayedList>
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20001148 	.word	0x20001148

08007534 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10c      	bne.n	8007560 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	b672      	cpsid	i
 800754c:	f383 8811 	msr	BASEPRI, r3
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	f3bf 8f4f 	dsb	sy
 8007558:	b662      	cpsie	i
 800755a:	617b      	str	r3, [r7, #20]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <vTaskPlaceOnEventListRestricted+0x58>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3318      	adds	r3, #24
 8007566:	4619      	mov	r1, r3
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7fe fa22 	bl	80059b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007578:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	68b8      	ldr	r0, [r7, #8]
 800757e:	f000 fb63 	bl	8007c48 <prvAddCurrentTaskToDelayedList>
	}
 8007582:	bf00      	nop
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20001148 	.word	0x20001148

08007590 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10c      	bne.n	80075c0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075aa:	b672      	cpsid	i
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	b662      	cpsie	i
 80075ba:	60fb      	str	r3, [r7, #12]
}
 80075bc:	bf00      	nop
 80075be:	e7fe      	b.n	80075be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	3318      	adds	r3, #24
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe fa51 	bl	8005a6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ca:	4b1e      	ldr	r3, [pc, #120]	; (8007644 <xTaskRemoveFromEventList+0xb4>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d11d      	bne.n	800760e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	3304      	adds	r3, #4
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fa48 	bl	8005a6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e0:	4b19      	ldr	r3, [pc, #100]	; (8007648 <xTaskRemoveFromEventList+0xb8>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d903      	bls.n	80075f0 <xTaskRemoveFromEventList+0x60>
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	4a16      	ldr	r2, [pc, #88]	; (8007648 <xTaskRemoveFromEventList+0xb8>)
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4a13      	ldr	r2, [pc, #76]	; (800764c <xTaskRemoveFromEventList+0xbc>)
 80075fe:	441a      	add	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	3304      	adds	r3, #4
 8007604:	4619      	mov	r1, r3
 8007606:	4610      	mov	r0, r2
 8007608:	f7fe f9d3 	bl	80059b2 <vListInsertEnd>
 800760c:	e005      	b.n	800761a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	3318      	adds	r3, #24
 8007612:	4619      	mov	r1, r3
 8007614:	480e      	ldr	r0, [pc, #56]	; (8007650 <xTaskRemoveFromEventList+0xc0>)
 8007616:	f7fe f9cc 	bl	80059b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <xTaskRemoveFromEventList+0xc4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d905      	bls.n	8007634 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800762c:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <xTaskRemoveFromEventList+0xc8>)
 800762e:	2201      	movs	r2, #1
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	e001      	b.n	8007638 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007638:	697b      	ldr	r3, [r7, #20]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20001644 	.word	0x20001644
 8007648:	20001624 	.word	0x20001624
 800764c:	2000114c 	.word	0x2000114c
 8007650:	200015dc 	.word	0x200015dc
 8007654:	20001148 	.word	0x20001148
 8007658:	20001630 	.word	0x20001630

0800765c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007664:	4b06      	ldr	r3, [pc, #24]	; (8007680 <vTaskInternalSetTimeOutState+0x24>)
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <vTaskInternalSetTimeOutState+0x28>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	605a      	str	r2, [r3, #4]
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	20001634 	.word	0x20001634
 8007684:	20001620 	.word	0x20001620

08007688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10c      	bne.n	80076b2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	b672      	cpsid	i
 800769e:	f383 8811 	msr	BASEPRI, r3
 80076a2:	f3bf 8f6f 	isb	sy
 80076a6:	f3bf 8f4f 	dsb	sy
 80076aa:	b662      	cpsie	i
 80076ac:	613b      	str	r3, [r7, #16]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d10c      	bne.n	80076d2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076bc:	b672      	cpsid	i
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	b662      	cpsie	i
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80076d2:	f000 ff73 	bl	80085bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076d6:	4b1d      	ldr	r3, [pc, #116]	; (800774c <xTaskCheckForTimeOut+0xc4>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ee:	d102      	bne.n	80076f6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	e023      	b.n	800773e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	4b15      	ldr	r3, [pc, #84]	; (8007750 <xTaskCheckForTimeOut+0xc8>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d007      	beq.n	8007712 <xTaskCheckForTimeOut+0x8a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	d302      	bcc.n	8007712 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800770c:	2301      	movs	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	e015      	b.n	800773e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	429a      	cmp	r2, r3
 800771a:	d20b      	bcs.n	8007734 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	1ad2      	subs	r2, r2, r3
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7ff ff97 	bl	800765c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800772e:	2300      	movs	r3, #0
 8007730:	61fb      	str	r3, [r7, #28]
 8007732:	e004      	b.n	800773e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800773a:	2301      	movs	r3, #1
 800773c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800773e:	f000 ff71 	bl	8008624 <vPortExitCritical>

	return xReturn;
 8007742:	69fb      	ldr	r3, [r7, #28]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3720      	adds	r7, #32
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20001620 	.word	0x20001620
 8007750:	20001634 	.word	0x20001634

08007754 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007754:	b480      	push	{r7}
 8007756:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007758:	4b03      	ldr	r3, [pc, #12]	; (8007768 <vTaskMissedYield+0x14>)
 800775a:	2201      	movs	r2, #1
 800775c:	601a      	str	r2, [r3, #0]
}
 800775e:	bf00      	nop
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	20001630 	.word	0x20001630

0800776c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007774:	f000 f852 	bl	800781c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007778:	4b06      	ldr	r3, [pc, #24]	; (8007794 <prvIdleTask+0x28>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d9f9      	bls.n	8007774 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007780:	4b05      	ldr	r3, [pc, #20]	; (8007798 <prvIdleTask+0x2c>)
 8007782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007790:	e7f0      	b.n	8007774 <prvIdleTask+0x8>
 8007792:	bf00      	nop
 8007794:	2000114c 	.word	0x2000114c
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	e00c      	b.n	80077c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4a12      	ldr	r2, [pc, #72]	; (80077fc <prvInitialiseTaskLists+0x60>)
 80077b4:	4413      	add	r3, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe f8ce 	bl	8005958 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3301      	adds	r3, #1
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b37      	cmp	r3, #55	; 0x37
 80077c6:	d9ef      	bls.n	80077a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077c8:	480d      	ldr	r0, [pc, #52]	; (8007800 <prvInitialiseTaskLists+0x64>)
 80077ca:	f7fe f8c5 	bl	8005958 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077ce:	480d      	ldr	r0, [pc, #52]	; (8007804 <prvInitialiseTaskLists+0x68>)
 80077d0:	f7fe f8c2 	bl	8005958 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077d4:	480c      	ldr	r0, [pc, #48]	; (8007808 <prvInitialiseTaskLists+0x6c>)
 80077d6:	f7fe f8bf 	bl	8005958 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077da:	480c      	ldr	r0, [pc, #48]	; (800780c <prvInitialiseTaskLists+0x70>)
 80077dc:	f7fe f8bc 	bl	8005958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077e0:	480b      	ldr	r0, [pc, #44]	; (8007810 <prvInitialiseTaskLists+0x74>)
 80077e2:	f7fe f8b9 	bl	8005958 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077e6:	4b0b      	ldr	r3, [pc, #44]	; (8007814 <prvInitialiseTaskLists+0x78>)
 80077e8:	4a05      	ldr	r2, [pc, #20]	; (8007800 <prvInitialiseTaskLists+0x64>)
 80077ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077ec:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <prvInitialiseTaskLists+0x7c>)
 80077ee:	4a05      	ldr	r2, [pc, #20]	; (8007804 <prvInitialiseTaskLists+0x68>)
 80077f0:	601a      	str	r2, [r3, #0]
}
 80077f2:	bf00      	nop
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	2000114c 	.word	0x2000114c
 8007800:	200015ac 	.word	0x200015ac
 8007804:	200015c0 	.word	0x200015c0
 8007808:	200015dc 	.word	0x200015dc
 800780c:	200015f0 	.word	0x200015f0
 8007810:	20001608 	.word	0x20001608
 8007814:	200015d4 	.word	0x200015d4
 8007818:	200015d8 	.word	0x200015d8

0800781c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007822:	e019      	b.n	8007858 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007824:	f000 feca 	bl	80085bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007828:	4b10      	ldr	r3, [pc, #64]	; (800786c <prvCheckTasksWaitingTermination+0x50>)
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3304      	adds	r3, #4
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe f919 	bl	8005a6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800783a:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <prvCheckTasksWaitingTermination+0x54>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3b01      	subs	r3, #1
 8007840:	4a0b      	ldr	r2, [pc, #44]	; (8007870 <prvCheckTasksWaitingTermination+0x54>)
 8007842:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007844:	4b0b      	ldr	r3, [pc, #44]	; (8007874 <prvCheckTasksWaitingTermination+0x58>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3b01      	subs	r3, #1
 800784a:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <prvCheckTasksWaitingTermination+0x58>)
 800784c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800784e:	f000 fee9 	bl	8008624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f810 	bl	8007878 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007858:	4b06      	ldr	r3, [pc, #24]	; (8007874 <prvCheckTasksWaitingTermination+0x58>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e1      	bne.n	8007824 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007860:	bf00      	nop
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	200015f0 	.word	0x200015f0
 8007870:	2000161c 	.word	0x2000161c
 8007874:	20001604 	.word	0x20001604

08007878 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	3354      	adds	r3, #84	; 0x54
 8007884:	4618      	mov	r0, r3
 8007886:	f001 f9f3 	bl	8008c70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007890:	2b00      	cmp	r3, #0
 8007892:	d108      	bne.n	80078a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	4618      	mov	r0, r3
 800789a:	f001 f885 	bl	80089a8 <vPortFree>
				vPortFree( pxTCB );
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 f882 	bl	80089a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80078a4:	e01a      	b.n	80078dc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d103      	bne.n	80078b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f001 f879 	bl	80089a8 <vPortFree>
	}
 80078b6:	e011      	b.n	80078dc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80078be:	2b02      	cmp	r3, #2
 80078c0:	d00c      	beq.n	80078dc <prvDeleteTCB+0x64>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	b672      	cpsid	i
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	b662      	cpsie	i
 80078d6:	60fb      	str	r3, [r7, #12]
}
 80078d8:	bf00      	nop
 80078da:	e7fe      	b.n	80078da <prvDeleteTCB+0x62>
	}
 80078dc:	bf00      	nop
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ea:	4b0c      	ldr	r3, [pc, #48]	; (800791c <prvResetNextTaskUnblockTime+0x38>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d104      	bne.n	80078fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078f4:	4b0a      	ldr	r3, [pc, #40]	; (8007920 <prvResetNextTaskUnblockTime+0x3c>)
 80078f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078fc:	e008      	b.n	8007910 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fe:	4b07      	ldr	r3, [pc, #28]	; (800791c <prvResetNextTaskUnblockTime+0x38>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	4a04      	ldr	r2, [pc, #16]	; (8007920 <prvResetNextTaskUnblockTime+0x3c>)
 800790e:	6013      	str	r3, [r2, #0]
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	200015d4 	.word	0x200015d4
 8007920:	2000163c 	.word	0x2000163c

08007924 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <xTaskGetSchedulerState+0x34>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007932:	2301      	movs	r3, #1
 8007934:	607b      	str	r3, [r7, #4]
 8007936:	e008      	b.n	800794a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007938:	4b08      	ldr	r3, [pc, #32]	; (800795c <xTaskGetSchedulerState+0x38>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d102      	bne.n	8007946 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007940:	2302      	movs	r3, #2
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	e001      	b.n	800794a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007946:	2300      	movs	r3, #0
 8007948:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800794a:	687b      	ldr	r3, [r7, #4]
	}
 800794c:	4618      	mov	r0, r3
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	20001628 	.word	0x20001628
 800795c:	20001644 	.word	0x20001644

08007960 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800796c:	2300      	movs	r3, #0
 800796e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d051      	beq.n	8007a1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797a:	4b2a      	ldr	r3, [pc, #168]	; (8007a24 <xTaskPriorityInherit+0xc4>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007980:	429a      	cmp	r2, r3
 8007982:	d241      	bcs.n	8007a08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	2b00      	cmp	r3, #0
 800798a:	db06      	blt.n	800799a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800798c:	4b25      	ldr	r3, [pc, #148]	; (8007a24 <xTaskPriorityInherit+0xc4>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	6959      	ldr	r1, [r3, #20]
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a2:	4613      	mov	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4a1f      	ldr	r2, [pc, #124]	; (8007a28 <xTaskPriorityInherit+0xc8>)
 80079ac:	4413      	add	r3, r2
 80079ae:	4299      	cmp	r1, r3
 80079b0:	d122      	bne.n	80079f8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe f858 	bl	8005a6c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079bc:	4b19      	ldr	r3, [pc, #100]	; (8007a24 <xTaskPriorityInherit+0xc4>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ca:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <xTaskPriorityInherit+0xcc>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d903      	bls.n	80079da <xTaskPriorityInherit+0x7a>
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d6:	4a15      	ldr	r2, [pc, #84]	; (8007a2c <xTaskPriorityInherit+0xcc>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	4a10      	ldr	r2, [pc, #64]	; (8007a28 <xTaskPriorityInherit+0xc8>)
 80079e8:	441a      	add	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4619      	mov	r1, r3
 80079f0:	4610      	mov	r0, r2
 80079f2:	f7fd ffde 	bl	80059b2 <vListInsertEnd>
 80079f6:	e004      	b.n	8007a02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <xTaskPriorityInherit+0xc4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a02:	2301      	movs	r3, #1
 8007a04:	60fb      	str	r3, [r7, #12]
 8007a06:	e008      	b.n	8007a1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a0c:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <xTaskPriorityInherit+0xc4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d201      	bcs.n	8007a1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
	}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	20001148 	.word	0x20001148
 8007a28:	2000114c 	.word	0x2000114c
 8007a2c:	20001624 	.word	0x20001624

08007a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d05a      	beq.n	8007afc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a46:	4b30      	ldr	r3, [pc, #192]	; (8007b08 <xTaskPriorityDisinherit+0xd8>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	693a      	ldr	r2, [r7, #16]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d00c      	beq.n	8007a6a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	b672      	cpsid	i
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	b662      	cpsie	i
 8007a64:	60fb      	str	r3, [r7, #12]
}
 8007a66:	bf00      	nop
 8007a68:	e7fe      	b.n	8007a68 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10c      	bne.n	8007a8c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	b672      	cpsid	i
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	b662      	cpsie	i
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a90:	1e5a      	subs	r2, r3, #1
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d02c      	beq.n	8007afc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d128      	bne.n	8007afc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd ffdc 	bl	8005a6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <xTaskPriorityDisinherit+0xdc>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d903      	bls.n	8007adc <xTaskPriorityDisinherit+0xac>
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad8:	4a0c      	ldr	r2, [pc, #48]	; (8007b0c <xTaskPriorityDisinherit+0xdc>)
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <xTaskPriorityDisinherit+0xe0>)
 8007aea:	441a      	add	r2, r3
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f7fd ff5d 	bl	80059b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007af8:	2301      	movs	r3, #1
 8007afa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007afc:	697b      	ldr	r3, [r7, #20]
	}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3718      	adds	r7, #24
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	20001148 	.word	0x20001148
 8007b0c:	20001624 	.word	0x20001624
 8007b10:	2000114c 	.word	0x2000114c

08007b14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b088      	sub	sp, #32
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b22:	2301      	movs	r3, #1
 8007b24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d06e      	beq.n	8007c0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10c      	bne.n	8007b4e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b38:	b672      	cpsid	i
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	b662      	cpsie	i
 8007b48:	60fb      	str	r3, [r7, #12]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d902      	bls.n	8007b5e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e002      	b.n	8007b64 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b62:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d04d      	beq.n	8007c0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d148      	bne.n	8007c0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007b78:	4b26      	ldr	r3, [pc, #152]	; (8007c14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d10c      	bne.n	8007b9c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8007b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b86:	b672      	cpsid	i
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	b662      	cpsie	i
 8007b96:	60bb      	str	r3, [r7, #8]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	db04      	blt.n	8007bba <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007bba:	69bb      	ldr	r3, [r7, #24]
 8007bbc:	6959      	ldr	r1, [r3, #20]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4a13      	ldr	r2, [pc, #76]	; (8007c18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bca:	4413      	add	r3, r2
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	d11c      	bne.n	8007c0a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fd ff49 	bl	8005a6c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bde:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d903      	bls.n	8007bee <vTaskPriorityDisinheritAfterTimeout+0xda>
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	4a0c      	ldr	r2, [pc, #48]	; (8007c1c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4a07      	ldr	r2, [pc, #28]	; (8007c18 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007bfc:	441a      	add	r2, r3
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	3304      	adds	r3, #4
 8007c02:	4619      	mov	r1, r3
 8007c04:	4610      	mov	r0, r2
 8007c06:	f7fd fed4 	bl	80059b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c0a:	bf00      	nop
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20001148 	.word	0x20001148
 8007c18:	2000114c 	.word	0x2000114c
 8007c1c:	20001624 	.word	0x20001624

08007c20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c24:	4b07      	ldr	r3, [pc, #28]	; (8007c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d004      	beq.n	8007c36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c2c:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007c32:	3201      	adds	r2, #1
 8007c34:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007c36:	4b03      	ldr	r3, [pc, #12]	; (8007c44 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c38:	681b      	ldr	r3, [r3, #0]
	}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr
 8007c44:	20001148 	.word	0x20001148

08007c48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007c52:	4b21      	ldr	r3, [pc, #132]	; (8007cd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c58:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fd ff04 	bl	8005a6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c6a:	d10a      	bne.n	8007c82 <prvAddCurrentTaskToDelayedList+0x3a>
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c72:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4819      	ldr	r0, [pc, #100]	; (8007ce0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007c7c:	f7fd fe99 	bl	80059b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007c80:	e026      	b.n	8007cd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007c8a:	4b14      	ldr	r3, [pc, #80]	; (8007cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007c92:	68ba      	ldr	r2, [r7, #8]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d209      	bcs.n	8007cae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007c9a:	4b12      	ldr	r3, [pc, #72]	; (8007ce4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	; (8007cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3304      	adds	r3, #4
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	f7fd fea7 	bl	80059fa <vListInsert>
}
 8007cac:	e010      	b.n	8007cd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007cae:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	4b0a      	ldr	r3, [pc, #40]	; (8007cdc <prvAddCurrentTaskToDelayedList+0x94>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7fd fe9d 	bl	80059fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007cc0:	4b0a      	ldr	r3, [pc, #40]	; (8007cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d202      	bcs.n	8007cd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007cca:	4a08      	ldr	r2, [pc, #32]	; (8007cec <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	6013      	str	r3, [r2, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3710      	adds	r7, #16
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	20001620 	.word	0x20001620
 8007cdc:	20001148 	.word	0x20001148
 8007ce0:	20001608 	.word	0x20001608
 8007ce4:	200015d8 	.word	0x200015d8
 8007ce8:	200015d4 	.word	0x200015d4
 8007cec:	2000163c 	.word	0x2000163c

08007cf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b08a      	sub	sp, #40	; 0x28
 8007cf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007cfa:	f000 fb15 	bl	8008328 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <xTimerCreateTimerTask+0x84>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d021      	beq.n	8007d4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d0e:	1d3a      	adds	r2, r7, #4
 8007d10:	f107 0108 	add.w	r1, r7, #8
 8007d14:	f107 030c 	add.w	r3, r7, #12
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fd fe03 	bl	8005924 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	9202      	str	r2, [sp, #8]
 8007d26:	9301      	str	r3, [sp, #4]
 8007d28:	2302      	movs	r3, #2
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	460a      	mov	r2, r1
 8007d30:	4911      	ldr	r1, [pc, #68]	; (8007d78 <xTimerCreateTimerTask+0x88>)
 8007d32:	4812      	ldr	r0, [pc, #72]	; (8007d7c <xTimerCreateTimerTask+0x8c>)
 8007d34:	f7fe ff1a 	bl	8006b6c <xTaskCreateStatic>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	4a11      	ldr	r2, [pc, #68]	; (8007d80 <xTimerCreateTimerTask+0x90>)
 8007d3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007d3e:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <xTimerCreateTimerTask+0x90>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d001      	beq.n	8007d4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007d46:	2301      	movs	r3, #1
 8007d48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d10c      	bne.n	8007d6a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d54:	b672      	cpsid	i
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	b662      	cpsie	i
 8007d64:	613b      	str	r3, [r7, #16]
}
 8007d66:	bf00      	nop
 8007d68:	e7fe      	b.n	8007d68 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007d6a:	697b      	ldr	r3, [r7, #20]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20001678 	.word	0x20001678
 8007d78:	08008e6c 	.word	0x08008e6c
 8007d7c:	08007ec1 	.word	0x08007ec1
 8007d80:	2000167c 	.word	0x2000167c

08007d84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b08a      	sub	sp, #40	; 0x28
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
 8007d90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <xTimerGenericCommand+0x32>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	b672      	cpsid	i
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	b662      	cpsie	i
 8007db0:	623b      	str	r3, [r7, #32]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007db6:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <xTimerGenericCommand+0x9c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d02a      	beq.n	8007e14 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b05      	cmp	r3, #5
 8007dce:	dc18      	bgt.n	8007e02 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007dd0:	f7ff fda8 	bl	8007924 <xTaskGetSchedulerState>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	d109      	bne.n	8007dee <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007dda:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <xTimerGenericCommand+0x9c>)
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f107 0110 	add.w	r1, r7, #16
 8007de2:	2300      	movs	r3, #0
 8007de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de6:	f7fe f82f 	bl	8005e48 <xQueueGenericSend>
 8007dea:	6278      	str	r0, [r7, #36]	; 0x24
 8007dec:	e012      	b.n	8007e14 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007dee:	4b0c      	ldr	r3, [pc, #48]	; (8007e20 <xTimerGenericCommand+0x9c>)
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f107 0110 	add.w	r1, r7, #16
 8007df6:	2300      	movs	r3, #0
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f7fe f825 	bl	8005e48 <xQueueGenericSend>
 8007dfe:	6278      	str	r0, [r7, #36]	; 0x24
 8007e00:	e008      	b.n	8007e14 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e02:	4b07      	ldr	r3, [pc, #28]	; (8007e20 <xTimerGenericCommand+0x9c>)
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	f107 0110 	add.w	r1, r7, #16
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	f7fe f921 	bl	8006054 <xQueueGenericSendFromISR>
 8007e12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3728      	adds	r7, #40	; 0x28
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20001678 	.word	0x20001678

08007e24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af02      	add	r7, sp, #8
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2e:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <prvProcessExpiredTimer+0x98>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fd fe15 	bl	8005a6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e48:	f003 0304 	and.w	r3, r3, #4
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d024      	beq.n	8007e9a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	699a      	ldr	r2, [r3, #24]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	18d1      	adds	r1, r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	6978      	ldr	r0, [r7, #20]
 8007e5e:	f000 f8d3 	bl	8008008 <prvInsertTimerInActiveList>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d021      	beq.n	8007eac <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e68:	2300      	movs	r3, #0
 8007e6a:	9300      	str	r3, [sp, #0]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	2100      	movs	r1, #0
 8007e72:	6978      	ldr	r0, [r7, #20]
 8007e74:	f7ff ff86 	bl	8007d84 <xTimerGenericCommand>
 8007e78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d115      	bne.n	8007eac <prvProcessExpiredTimer+0x88>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	b672      	cpsid	i
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	b662      	cpsie	i
 8007e94:	60fb      	str	r3, [r7, #12]
}
 8007e96:	bf00      	nop
 8007e98:	e7fe      	b.n	8007e98 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea0:	f023 0301 	bic.w	r3, r3, #1
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	6978      	ldr	r0, [r7, #20]
 8007eb2:	4798      	blx	r3
}
 8007eb4:	bf00      	nop
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	20001670 	.word	0x20001670

08007ec0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ec8:	f107 0308 	add.w	r3, r7, #8
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 f857 	bl	8007f80 <prvGetNextExpireTime>
 8007ed2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f803 	bl	8007ee4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ede:	f000 f8d5 	bl	800808c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ee2:	e7f1      	b.n	8007ec8 <prvTimerTask+0x8>

08007ee4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007eee:	f7ff f91b 	bl	8007128 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ef2:	f107 0308 	add.w	r3, r7, #8
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f866 	bl	8007fc8 <prvSampleTimeNow>
 8007efc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d130      	bne.n	8007f66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <prvProcessTimerOrBlockTask+0x3c>
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d806      	bhi.n	8007f20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f12:	f7ff f917 	bl	8007144 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f16:	68f9      	ldr	r1, [r7, #12]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff ff83 	bl	8007e24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f1e:	e024      	b.n	8007f6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f26:	4b13      	ldr	r3, [pc, #76]	; (8007f74 <prvProcessTimerOrBlockTask+0x90>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d101      	bne.n	8007f34 <prvProcessTimerOrBlockTask+0x50>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e000      	b.n	8007f36 <prvProcessTimerOrBlockTask+0x52>
 8007f34:	2300      	movs	r3, #0
 8007f36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f38:	4b0f      	ldr	r3, [pc, #60]	; (8007f78 <prvProcessTimerOrBlockTask+0x94>)
 8007f3a:	6818      	ldr	r0, [r3, #0]
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	4619      	mov	r1, r3
 8007f46:	f7fe fddd 	bl	8006b04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007f4a:	f7ff f8fb 	bl	8007144 <xTaskResumeAll>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007f54:	4b09      	ldr	r3, [pc, #36]	; (8007f7c <prvProcessTimerOrBlockTask+0x98>)
 8007f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	f3bf 8f6f 	isb	sy
}
 8007f64:	e001      	b.n	8007f6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007f66:	f7ff f8ed 	bl	8007144 <xTaskResumeAll>
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20001674 	.word	0x20001674
 8007f78:	20001678 	.word	0x20001678
 8007f7c:	e000ed04 	.word	0xe000ed04

08007f80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007f88:	4b0e      	ldr	r3, [pc, #56]	; (8007fc4 <prvGetNextExpireTime+0x44>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <prvGetNextExpireTime+0x16>
 8007f92:	2201      	movs	r2, #1
 8007f94:	e000      	b.n	8007f98 <prvGetNextExpireTime+0x18>
 8007f96:	2200      	movs	r2, #0
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d105      	bne.n	8007fb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fa4:	4b07      	ldr	r3, [pc, #28]	; (8007fc4 <prvGetNextExpireTime+0x44>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]
 8007fae:	e001      	b.n	8007fb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3714      	adds	r7, #20
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	20001670 	.word	0x20001670

08007fc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007fd0:	f7ff f958 	bl	8007284 <xTaskGetTickCount>
 8007fd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007fd6:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <prvSampleTimeNow+0x3c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68fa      	ldr	r2, [r7, #12]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d205      	bcs.n	8007fec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007fe0:	f000 f93c 	bl	800825c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ff2:	4a04      	ldr	r2, [pc, #16]	; (8008004 <prvSampleTimeNow+0x3c>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20001680 	.word	0x20001680

08008008 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	429a      	cmp	r2, r3
 800802c:	d812      	bhi.n	8008054 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1ad2      	subs	r2, r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	429a      	cmp	r2, r3
 800803a:	d302      	bcc.n	8008042 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e01b      	b.n	800807a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008042:	4b10      	ldr	r3, [pc, #64]	; (8008084 <prvInsertTimerInActiveList+0x7c>)
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fd fcd4 	bl	80059fa <vListInsert>
 8008052:	e012      	b.n	800807a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	429a      	cmp	r2, r3
 800805a:	d206      	bcs.n	800806a <prvInsertTimerInActiveList+0x62>
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	429a      	cmp	r2, r3
 8008062:	d302      	bcc.n	800806a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008064:	2301      	movs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	e007      	b.n	800807a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800806a:	4b07      	ldr	r3, [pc, #28]	; (8008088 <prvInsertTimerInActiveList+0x80>)
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3304      	adds	r3, #4
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7fd fcc0 	bl	80059fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800807a:	697b      	ldr	r3, [r7, #20]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20001674 	.word	0x20001674
 8008088:	20001670 	.word	0x20001670

0800808c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008092:	e0d0      	b.n	8008236 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	da1a      	bge.n	80080d0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800809a:	1d3b      	adds	r3, r7, #4
 800809c:	3304      	adds	r3, #4
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10c      	bne.n	80080c0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	b672      	cpsid	i
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	b662      	cpsie	i
 80080ba:	61fb      	str	r3, [r7, #28]
}
 80080bc:	bf00      	nop
 80080be:	e7fe      	b.n	80080be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c6:	6850      	ldr	r0, [r2, #4]
 80080c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ca:	6892      	ldr	r2, [r2, #8]
 80080cc:	4611      	mov	r1, r2
 80080ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f2c0 80ae 	blt.w	8008234 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	695b      	ldr	r3, [r3, #20]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	3304      	adds	r3, #4
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fd fcbf 	bl	8005a6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80080ee:	463b      	mov	r3, r7
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff ff69 	bl	8007fc8 <prvSampleTimeNow>
 80080f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2b09      	cmp	r3, #9
 80080fc:	f200 809b 	bhi.w	8008236 <prvProcessReceivedCommands+0x1aa>
 8008100:	a201      	add	r2, pc, #4	; (adr r2, 8008108 <prvProcessReceivedCommands+0x7c>)
 8008102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008106:	bf00      	nop
 8008108:	08008131 	.word	0x08008131
 800810c:	08008131 	.word	0x08008131
 8008110:	08008131 	.word	0x08008131
 8008114:	080081a9 	.word	0x080081a9
 8008118:	080081bd 	.word	0x080081bd
 800811c:	0800820b 	.word	0x0800820b
 8008120:	08008131 	.word	0x08008131
 8008124:	08008131 	.word	0x08008131
 8008128:	080081a9 	.word	0x080081a9
 800812c:	080081bd 	.word	0x080081bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008136:	f043 0301 	orr.w	r3, r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	18d1      	adds	r1, r2, r3
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800814e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008150:	f7ff ff5a 	bl	8008008 <prvInsertTimerInActiveList>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d06d      	beq.n	8008236 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008160:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008168:	f003 0304 	and.w	r3, r3, #4
 800816c:	2b00      	cmp	r3, #0
 800816e:	d062      	beq.n	8008236 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	441a      	add	r2, r3
 8008178:	2300      	movs	r3, #0
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	2300      	movs	r3, #0
 800817e:	2100      	movs	r1, #0
 8008180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008182:	f7ff fdff 	bl	8007d84 <xTimerGenericCommand>
 8008186:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d153      	bne.n	8008236 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	b672      	cpsid	i
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	b662      	cpsie	i
 80081a2:	61bb      	str	r3, [r7, #24]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80081ba:	e03c      	b.n	8008236 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10c      	bne.n	80081f6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	b672      	cpsid	i
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	b662      	cpsie	i
 80081f0:	617b      	str	r3, [r7, #20]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80081f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	18d1      	adds	r1, r2, r3
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008204:	f7ff ff00 	bl	8008008 <prvInsertTimerInActiveList>
					break;
 8008208:	e015      	b.n	8008236 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008210:	f003 0302 	and.w	r3, r3, #2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d103      	bne.n	8008220 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800821a:	f000 fbc5 	bl	80089a8 <vPortFree>
 800821e:	e00a      	b.n	8008236 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008226:	f023 0301 	bic.w	r3, r3, #1
 800822a:	b2da      	uxtb	r2, r3
 800822c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008232:	e000      	b.n	8008236 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008234:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008236:	4b08      	ldr	r3, [pc, #32]	; (8008258 <prvProcessReceivedCommands+0x1cc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	1d39      	adds	r1, r7, #4
 800823c:	2200      	movs	r2, #0
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe f83e 	bl	80062c0 <xQueueReceive>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	f47f af24 	bne.w	8008094 <prvProcessReceivedCommands+0x8>
	}
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	3730      	adds	r7, #48	; 0x30
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20001678 	.word	0x20001678

0800825c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008262:	e04a      	b.n	80082fa <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008264:	4b2e      	ldr	r3, [pc, #184]	; (8008320 <prvSwitchTimerLists+0xc4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826e:	4b2c      	ldr	r3, [pc, #176]	; (8008320 <prvSwitchTimerLists+0xc4>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7fd fbf5 	bl	8005a6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008290:	f003 0304 	and.w	r3, r3, #4
 8008294:	2b00      	cmp	r3, #0
 8008296:	d030      	beq.n	80082fa <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4413      	add	r3, r2
 80082a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d90e      	bls.n	80082c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082b6:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <prvSwitchTimerLists+0xc4>)
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3304      	adds	r3, #4
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f7fd fb9a 	bl	80059fa <vListInsert>
 80082c6:	e018      	b.n	80082fa <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082c8:	2300      	movs	r3, #0
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	2300      	movs	r3, #0
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	2100      	movs	r1, #0
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff fd56 	bl	8007d84 <xTimerGenericCommand>
 80082d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10c      	bne.n	80082fa <prvSwitchTimerLists+0x9e>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	b672      	cpsid	i
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	b662      	cpsie	i
 80082f4:	603b      	str	r3, [r7, #0]
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082fa:	4b09      	ldr	r3, [pc, #36]	; (8008320 <prvSwitchTimerLists+0xc4>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1af      	bne.n	8008264 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008304:	4b06      	ldr	r3, [pc, #24]	; (8008320 <prvSwitchTimerLists+0xc4>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800830a:	4b06      	ldr	r3, [pc, #24]	; (8008324 <prvSwitchTimerLists+0xc8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a04      	ldr	r2, [pc, #16]	; (8008320 <prvSwitchTimerLists+0xc4>)
 8008310:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008312:	4a04      	ldr	r2, [pc, #16]	; (8008324 <prvSwitchTimerLists+0xc8>)
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	6013      	str	r3, [r2, #0]
}
 8008318:	bf00      	nop
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20001670 	.word	0x20001670
 8008324:	20001674 	.word	0x20001674

08008328 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800832e:	f000 f945 	bl	80085bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008332:	4b15      	ldr	r3, [pc, #84]	; (8008388 <prvCheckForValidListAndQueue+0x60>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d120      	bne.n	800837c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800833a:	4814      	ldr	r0, [pc, #80]	; (800838c <prvCheckForValidListAndQueue+0x64>)
 800833c:	f7fd fb0c 	bl	8005958 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008340:	4813      	ldr	r0, [pc, #76]	; (8008390 <prvCheckForValidListAndQueue+0x68>)
 8008342:	f7fd fb09 	bl	8005958 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008346:	4b13      	ldr	r3, [pc, #76]	; (8008394 <prvCheckForValidListAndQueue+0x6c>)
 8008348:	4a10      	ldr	r2, [pc, #64]	; (800838c <prvCheckForValidListAndQueue+0x64>)
 800834a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800834c:	4b12      	ldr	r3, [pc, #72]	; (8008398 <prvCheckForValidListAndQueue+0x70>)
 800834e:	4a10      	ldr	r2, [pc, #64]	; (8008390 <prvCheckForValidListAndQueue+0x68>)
 8008350:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008352:	2300      	movs	r3, #0
 8008354:	9300      	str	r3, [sp, #0]
 8008356:	4b11      	ldr	r3, [pc, #68]	; (800839c <prvCheckForValidListAndQueue+0x74>)
 8008358:	4a11      	ldr	r2, [pc, #68]	; (80083a0 <prvCheckForValidListAndQueue+0x78>)
 800835a:	2110      	movs	r1, #16
 800835c:	200a      	movs	r0, #10
 800835e:	f7fd fc19 	bl	8005b94 <xQueueGenericCreateStatic>
 8008362:	4603      	mov	r3, r0
 8008364:	4a08      	ldr	r2, [pc, #32]	; (8008388 <prvCheckForValidListAndQueue+0x60>)
 8008366:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008368:	4b07      	ldr	r3, [pc, #28]	; (8008388 <prvCheckForValidListAndQueue+0x60>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008370:	4b05      	ldr	r3, [pc, #20]	; (8008388 <prvCheckForValidListAndQueue+0x60>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	490b      	ldr	r1, [pc, #44]	; (80083a4 <prvCheckForValidListAndQueue+0x7c>)
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fb70 	bl	8006a5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800837c:	f000 f952 	bl	8008624 <vPortExitCritical>
}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20001678 	.word	0x20001678
 800838c:	20001648 	.word	0x20001648
 8008390:	2000165c 	.word	0x2000165c
 8008394:	20001670 	.word	0x20001670
 8008398:	20001674 	.word	0x20001674
 800839c:	20001724 	.word	0x20001724
 80083a0:	20001684 	.word	0x20001684
 80083a4:	08008e74 	.word	0x08008e74

080083a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3b04      	subs	r3, #4
 80083b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80083c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3b04      	subs	r3, #4
 80083c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f023 0201 	bic.w	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3b04      	subs	r3, #4
 80083d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083d8:	4a0c      	ldr	r2, [pc, #48]	; (800840c <pxPortInitialiseStack+0x64>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3b14      	subs	r3, #20
 80083e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3b04      	subs	r3, #4
 80083ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f06f 0202 	mvn.w	r2, #2
 80083f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	3b20      	subs	r3, #32
 80083fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083fe:	68fb      	ldr	r3, [r7, #12]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	08008411 	.word	0x08008411

08008410 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008416:	2300      	movs	r3, #0
 8008418:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800841a:	4b14      	ldr	r3, [pc, #80]	; (800846c <prvTaskExitError+0x5c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008422:	d00c      	beq.n	800843e <prvTaskExitError+0x2e>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	b672      	cpsid	i
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	b662      	cpsie	i
 8008438:	60fb      	str	r3, [r7, #12]
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <prvTaskExitError+0x2c>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	b672      	cpsid	i
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	b662      	cpsie	i
 8008452:	60bb      	str	r3, [r7, #8]
}
 8008454:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008456:	bf00      	nop
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d0fc      	beq.n	8008458 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800845e:	bf00      	nop
 8008460:	bf00      	nop
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	2000001c 	.word	0x2000001c

08008470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008470:	4b07      	ldr	r3, [pc, #28]	; (8008490 <pxCurrentTCBConst2>)
 8008472:	6819      	ldr	r1, [r3, #0]
 8008474:	6808      	ldr	r0, [r1, #0]
 8008476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	f380 8809 	msr	PSP, r0
 800847e:	f3bf 8f6f 	isb	sy
 8008482:	f04f 0000 	mov.w	r0, #0
 8008486:	f380 8811 	msr	BASEPRI, r0
 800848a:	4770      	bx	lr
 800848c:	f3af 8000 	nop.w

08008490 <pxCurrentTCBConst2>:
 8008490:	20001148 	.word	0x20001148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008494:	bf00      	nop
 8008496:	bf00      	nop

08008498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008498:	4808      	ldr	r0, [pc, #32]	; (80084bc <prvPortStartFirstTask+0x24>)
 800849a:	6800      	ldr	r0, [r0, #0]
 800849c:	6800      	ldr	r0, [r0, #0]
 800849e:	f380 8808 	msr	MSP, r0
 80084a2:	f04f 0000 	mov.w	r0, #0
 80084a6:	f380 8814 	msr	CONTROL, r0
 80084aa:	b662      	cpsie	i
 80084ac:	b661      	cpsie	f
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	df00      	svc	0
 80084b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80084ba:	bf00      	nop
 80084bc:	e000ed08 	.word	0xe000ed08

080084c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80084c6:	4b37      	ldr	r3, [pc, #220]	; (80085a4 <xPortStartScheduler+0xe4>)
 80084c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	22ff      	movs	r2, #255	; 0xff
 80084d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	4b2f      	ldr	r3, [pc, #188]	; (80085a8 <xPortStartScheduler+0xe8>)
 80084ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084ee:	4b2f      	ldr	r3, [pc, #188]	; (80085ac <xPortStartScheduler+0xec>)
 80084f0:	2207      	movs	r2, #7
 80084f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084f4:	e009      	b.n	800850a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80084f6:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <xPortStartScheduler+0xec>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	4a2b      	ldr	r2, [pc, #172]	; (80085ac <xPortStartScheduler+0xec>)
 80084fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	b2db      	uxtb	r3, r3
 8008508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800850a:	78fb      	ldrb	r3, [r7, #3]
 800850c:	b2db      	uxtb	r3, r3
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b80      	cmp	r3, #128	; 0x80
 8008514:	d0ef      	beq.n	80084f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008516:	4b25      	ldr	r3, [pc, #148]	; (80085ac <xPortStartScheduler+0xec>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f1c3 0307 	rsb	r3, r3, #7
 800851e:	2b04      	cmp	r3, #4
 8008520:	d00c      	beq.n	800853c <xPortStartScheduler+0x7c>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	b672      	cpsid	i
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	b662      	cpsie	i
 8008536:	60bb      	str	r3, [r7, #8]
}
 8008538:	bf00      	nop
 800853a:	e7fe      	b.n	800853a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800853c:	4b1b      	ldr	r3, [pc, #108]	; (80085ac <xPortStartScheduler+0xec>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	021b      	lsls	r3, r3, #8
 8008542:	4a1a      	ldr	r2, [pc, #104]	; (80085ac <xPortStartScheduler+0xec>)
 8008544:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008546:	4b19      	ldr	r3, [pc, #100]	; (80085ac <xPortStartScheduler+0xec>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800854e:	4a17      	ldr	r2, [pc, #92]	; (80085ac <xPortStartScheduler+0xec>)
 8008550:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	b2da      	uxtb	r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800855a:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <xPortStartScheduler+0xf0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a14      	ldr	r2, [pc, #80]	; (80085b0 <xPortStartScheduler+0xf0>)
 8008560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008564:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008566:	4b12      	ldr	r3, [pc, #72]	; (80085b0 <xPortStartScheduler+0xf0>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a11      	ldr	r2, [pc, #68]	; (80085b0 <xPortStartScheduler+0xf0>)
 800856c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008570:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008572:	f000 f8dd 	bl	8008730 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008576:	4b0f      	ldr	r3, [pc, #60]	; (80085b4 <xPortStartScheduler+0xf4>)
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800857c:	f000 f8fc 	bl	8008778 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008580:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <xPortStartScheduler+0xf8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a0c      	ldr	r2, [pc, #48]	; (80085b8 <xPortStartScheduler+0xf8>)
 8008586:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800858a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800858c:	f7ff ff84 	bl	8008498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008590:	f7fe ff44 	bl	800741c <vTaskSwitchContext>
	prvTaskExitError();
 8008594:	f7ff ff3c 	bl	8008410 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3710      	adds	r7, #16
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	e000e400 	.word	0xe000e400
 80085a8:	20001774 	.word	0x20001774
 80085ac:	20001778 	.word	0x20001778
 80085b0:	e000ed20 	.word	0xe000ed20
 80085b4:	2000001c 	.word	0x2000001c
 80085b8:	e000ef34 	.word	0xe000ef34

080085bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	b672      	cpsid	i
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	b662      	cpsie	i
 80085d6:	607b      	str	r3, [r7, #4]
}
 80085d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80085da:	4b10      	ldr	r3, [pc, #64]	; (800861c <vPortEnterCritical+0x60>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	4a0e      	ldr	r2, [pc, #56]	; (800861c <vPortEnterCritical+0x60>)
 80085e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085e4:	4b0d      	ldr	r3, [pc, #52]	; (800861c <vPortEnterCritical+0x60>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d111      	bne.n	8008610 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085ec:	4b0c      	ldr	r3, [pc, #48]	; (8008620 <vPortEnterCritical+0x64>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00c      	beq.n	8008610 <vPortEnterCritical+0x54>
	__asm volatile
 80085f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fa:	b672      	cpsid	i
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	b662      	cpsie	i
 800860a:	603b      	str	r3, [r7, #0]
}
 800860c:	bf00      	nop
 800860e:	e7fe      	b.n	800860e <vPortEnterCritical+0x52>
	}
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	2000001c 	.word	0x2000001c
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800862a:	4b13      	ldr	r3, [pc, #76]	; (8008678 <vPortExitCritical+0x54>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10c      	bne.n	800864c <vPortExitCritical+0x28>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	b672      	cpsid	i
 8008638:	f383 8811 	msr	BASEPRI, r3
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f3bf 8f4f 	dsb	sy
 8008644:	b662      	cpsie	i
 8008646:	607b      	str	r3, [r7, #4]
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <vPortExitCritical+0x54>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	4a09      	ldr	r2, [pc, #36]	; (8008678 <vPortExitCritical+0x54>)
 8008654:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008656:	4b08      	ldr	r3, [pc, #32]	; (8008678 <vPortExitCritical+0x54>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d105      	bne.n	800866a <vPortExitCritical+0x46>
 800865e:	2300      	movs	r3, #0
 8008660:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	f383 8811 	msr	BASEPRI, r3
}
 8008668:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	2000001c 	.word	0x2000001c
 800867c:	00000000 	.word	0x00000000

08008680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008680:	f3ef 8009 	mrs	r0, PSP
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <pxCurrentTCBConst>)
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	f01e 0f10 	tst.w	lr, #16
 8008690:	bf08      	it	eq
 8008692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	6010      	str	r0, [r2, #0]
 800869c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80086a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80086a4:	b672      	cpsid	i
 80086a6:	f380 8811 	msr	BASEPRI, r0
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	f3bf 8f6f 	isb	sy
 80086b2:	b662      	cpsie	i
 80086b4:	f7fe feb2 	bl	800741c <vTaskSwitchContext>
 80086b8:	f04f 0000 	mov.w	r0, #0
 80086bc:	f380 8811 	msr	BASEPRI, r0
 80086c0:	bc09      	pop	{r0, r3}
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	6808      	ldr	r0, [r1, #0]
 80086c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	f01e 0f10 	tst.w	lr, #16
 80086ce:	bf08      	it	eq
 80086d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80086d4:	f380 8809 	msr	PSP, r0
 80086d8:	f3bf 8f6f 	isb	sy
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop

080086e0 <pxCurrentTCBConst>:
 80086e0:	20001148 	.word	0x20001148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f2:	b672      	cpsid	i
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	b662      	cpsie	i
 8008702:	607b      	str	r3, [r7, #4]
}
 8008704:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008706:	f7fe fdcd 	bl	80072a4 <xTaskIncrementTick>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d003      	beq.n	8008718 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008710:	4b06      	ldr	r3, [pc, #24]	; (800872c <SysTick_Handler+0x44>)
 8008712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008716:	601a      	str	r2, [r3, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f383 8811 	msr	BASEPRI, r3
}
 8008722:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008724:	bf00      	nop
 8008726:	3708      	adds	r7, #8
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	e000ed04 	.word	0xe000ed04

08008730 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008734:	4b0b      	ldr	r3, [pc, #44]	; (8008764 <vPortSetupTimerInterrupt+0x34>)
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <vPortSetupTimerInterrupt+0x38>)
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <vPortSetupTimerInterrupt+0x3c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a0a      	ldr	r2, [pc, #40]	; (8008770 <vPortSetupTimerInterrupt+0x40>)
 8008746:	fba2 2303 	umull	r2, r3, r2, r3
 800874a:	099b      	lsrs	r3, r3, #6
 800874c:	4a09      	ldr	r2, [pc, #36]	; (8008774 <vPortSetupTimerInterrupt+0x44>)
 800874e:	3b01      	subs	r3, #1
 8008750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008752:	4b04      	ldr	r3, [pc, #16]	; (8008764 <vPortSetupTimerInterrupt+0x34>)
 8008754:	2207      	movs	r2, #7
 8008756:	601a      	str	r2, [r3, #0]
}
 8008758:	bf00      	nop
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	e000e010 	.word	0xe000e010
 8008768:	e000e018 	.word	0xe000e018
 800876c:	20000010 	.word	0x20000010
 8008770:	10624dd3 	.word	0x10624dd3
 8008774:	e000e014 	.word	0xe000e014

08008778 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008778:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008788 <vPortEnableVFP+0x10>
 800877c:	6801      	ldr	r1, [r0, #0]
 800877e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008782:	6001      	str	r1, [r0, #0]
 8008784:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008786:	bf00      	nop
 8008788:	e000ed88 	.word	0xe000ed88

0800878c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008792:	f3ef 8305 	mrs	r3, IPSR
 8008796:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2b0f      	cmp	r3, #15
 800879c:	d916      	bls.n	80087cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800879e:	4a19      	ldr	r2, [pc, #100]	; (8008804 <vPortValidateInterruptPriority+0x78>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	4413      	add	r3, r2
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80087a8:	4b17      	ldr	r3, [pc, #92]	; (8008808 <vPortValidateInterruptPriority+0x7c>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	7afa      	ldrb	r2, [r7, #11]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d20c      	bcs.n	80087cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b6:	b672      	cpsid	i
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	b662      	cpsie	i
 80087c6:	607b      	str	r3, [r7, #4]
}
 80087c8:	bf00      	nop
 80087ca:	e7fe      	b.n	80087ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80087cc:	4b0f      	ldr	r3, [pc, #60]	; (800880c <vPortValidateInterruptPriority+0x80>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80087d4:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <vPortValidateInterruptPriority+0x84>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d90c      	bls.n	80087f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	b672      	cpsid	i
 80087e2:	f383 8811 	msr	BASEPRI, r3
 80087e6:	f3bf 8f6f 	isb	sy
 80087ea:	f3bf 8f4f 	dsb	sy
 80087ee:	b662      	cpsie	i
 80087f0:	603b      	str	r3, [r7, #0]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <vPortValidateInterruptPriority+0x68>
	}
 80087f6:	bf00      	nop
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	e000e3f0 	.word	0xe000e3f0
 8008808:	20001774 	.word	0x20001774
 800880c:	e000ed0c 	.word	0xe000ed0c
 8008810:	20001778 	.word	0x20001778

08008814 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08a      	sub	sp, #40	; 0x28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008820:	f7fe fc82 	bl	8007128 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008824:	4b5b      	ldr	r3, [pc, #364]	; (8008994 <pvPortMalloc+0x180>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800882c:	f000 f91a 	bl	8008a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008830:	4b59      	ldr	r3, [pc, #356]	; (8008998 <pvPortMalloc+0x184>)
 8008832:	681a      	ldr	r2, [r3, #0]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4013      	ands	r3, r2
 8008838:	2b00      	cmp	r3, #0
 800883a:	f040 8092 	bne.w	8008962 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01f      	beq.n	8008884 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008844:	2208      	movs	r2, #8
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4413      	add	r3, r2
 800884a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	2b00      	cmp	r3, #0
 8008854:	d016      	beq.n	8008884 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f023 0307 	bic.w	r3, r3, #7
 800885c:	3308      	adds	r3, #8
 800885e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f003 0307 	and.w	r3, r3, #7
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00c      	beq.n	8008884 <pvPortMalloc+0x70>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886e:	b672      	cpsid	i
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	b662      	cpsie	i
 800887e:	617b      	str	r3, [r7, #20]
}
 8008880:	bf00      	nop
 8008882:	e7fe      	b.n	8008882 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d06b      	beq.n	8008962 <pvPortMalloc+0x14e>
 800888a:	4b44      	ldr	r3, [pc, #272]	; (800899c <pvPortMalloc+0x188>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	429a      	cmp	r2, r3
 8008892:	d866      	bhi.n	8008962 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008894:	4b42      	ldr	r3, [pc, #264]	; (80089a0 <pvPortMalloc+0x18c>)
 8008896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008898:	4b41      	ldr	r3, [pc, #260]	; (80089a0 <pvPortMalloc+0x18c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800889e:	e004      	b.n	80088aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80088a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d903      	bls.n	80088bc <pvPortMalloc+0xa8>
 80088b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f1      	bne.n	80088a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80088bc:	4b35      	ldr	r3, [pc, #212]	; (8008994 <pvPortMalloc+0x180>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c2:	429a      	cmp	r2, r3
 80088c4:	d04d      	beq.n	8008962 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2208      	movs	r2, #8
 80088cc:	4413      	add	r3, r2
 80088ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	2308      	movs	r3, #8
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d921      	bls.n	800892c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80088e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d00c      	beq.n	8008914 <pvPortMalloc+0x100>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	b672      	cpsid	i
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	b662      	cpsie	i
 800890e:	613b      	str	r3, [r7, #16]
}
 8008910:	bf00      	nop
 8008912:	e7fe      	b.n	8008912 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	685a      	ldr	r2, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	1ad2      	subs	r2, r2, r3
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008926:	69b8      	ldr	r0, [r7, #24]
 8008928:	f000 f8fe 	bl	8008b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800892c:	4b1b      	ldr	r3, [pc, #108]	; (800899c <pvPortMalloc+0x188>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	4a19      	ldr	r2, [pc, #100]	; (800899c <pvPortMalloc+0x188>)
 8008938:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800893a:	4b18      	ldr	r3, [pc, #96]	; (800899c <pvPortMalloc+0x188>)
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <pvPortMalloc+0x190>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d203      	bcs.n	800894e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008946:	4b15      	ldr	r3, [pc, #84]	; (800899c <pvPortMalloc+0x188>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a16      	ldr	r2, [pc, #88]	; (80089a4 <pvPortMalloc+0x190>)
 800894c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	4b11      	ldr	r3, [pc, #68]	; (8008998 <pvPortMalloc+0x184>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	431a      	orrs	r2, r3
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	2200      	movs	r2, #0
 8008960:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008962:	f7fe fbef 	bl	8007144 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00c      	beq.n	800898a <pvPortMalloc+0x176>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008974:	b672      	cpsid	i
 8008976:	f383 8811 	msr	BASEPRI, r3
 800897a:	f3bf 8f6f 	isb	sy
 800897e:	f3bf 8f4f 	dsb	sy
 8008982:	b662      	cpsie	i
 8008984:	60fb      	str	r3, [r7, #12]
}
 8008986:	bf00      	nop
 8008988:	e7fe      	b.n	8008988 <pvPortMalloc+0x174>
	return pvReturn;
 800898a:	69fb      	ldr	r3, [r7, #28]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3728      	adds	r7, #40	; 0x28
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	20005384 	.word	0x20005384
 8008998:	20005390 	.word	0x20005390
 800899c:	20005388 	.word	0x20005388
 80089a0:	2000537c 	.word	0x2000537c
 80089a4:	2000538c 	.word	0x2000538c

080089a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d04c      	beq.n	8008a54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80089ba:	2308      	movs	r3, #8
 80089bc:	425b      	negs	r3, r3
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	4413      	add	r3, r2
 80089c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	4b23      	ldr	r3, [pc, #140]	; (8008a5c <vPortFree+0xb4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4013      	ands	r3, r2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10c      	bne.n	80089f0 <vPortFree+0x48>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	b672      	cpsid	i
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	b662      	cpsie	i
 80089ea:	60fb      	str	r3, [r7, #12]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00c      	beq.n	8008a12 <vPortFree+0x6a>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	b672      	cpsid	i
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	b662      	cpsie	i
 8008a0c:	60bb      	str	r3, [r7, #8]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	685a      	ldr	r2, [r3, #4]
 8008a16:	4b11      	ldr	r3, [pc, #68]	; (8008a5c <vPortFree+0xb4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d019      	beq.n	8008a54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d115      	bne.n	8008a54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	; (8008a5c <vPortFree+0xb4>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	43db      	mvns	r3, r3
 8008a32:	401a      	ands	r2, r3
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008a38:	f7fe fb76 	bl	8007128 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	4b07      	ldr	r3, [pc, #28]	; (8008a60 <vPortFree+0xb8>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4413      	add	r3, r2
 8008a46:	4a06      	ldr	r2, [pc, #24]	; (8008a60 <vPortFree+0xb8>)
 8008a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008a4a:	6938      	ldr	r0, [r7, #16]
 8008a4c:	f000 f86c 	bl	8008b28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008a50:	f7fe fb78 	bl	8007144 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008a54:	bf00      	nop
 8008a56:	3718      	adds	r7, #24
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	20005390 	.word	0x20005390
 8008a60:	20005388 	.word	0x20005388

08008a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008a6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a70:	4b27      	ldr	r3, [pc, #156]	; (8008b10 <prvHeapInit+0xac>)
 8008a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0307 	and.w	r3, r3, #7
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00c      	beq.n	8008a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	3307      	adds	r3, #7
 8008a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0307 	bic.w	r3, r3, #7
 8008a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	4a1f      	ldr	r2, [pc, #124]	; (8008b10 <prvHeapInit+0xac>)
 8008a94:	4413      	add	r3, r2
 8008a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a9c:	4a1d      	ldr	r2, [pc, #116]	; (8008b14 <prvHeapInit+0xb0>)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008aa2:	4b1c      	ldr	r3, [pc, #112]	; (8008b14 <prvHeapInit+0xb0>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	4413      	add	r3, r2
 8008aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ab0:	2208      	movs	r2, #8
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0307 	bic.w	r3, r3, #7
 8008abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4a15      	ldr	r2, [pc, #84]	; (8008b18 <prvHeapInit+0xb4>)
 8008ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ac6:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <prvHeapInit+0xb4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2200      	movs	r2, #0
 8008acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ace:	4b12      	ldr	r3, [pc, #72]	; (8008b18 <prvHeapInit+0xb4>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	1ad2      	subs	r2, r2, r3
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	; (8008b18 <prvHeapInit+0xb4>)
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	4a0a      	ldr	r2, [pc, #40]	; (8008b1c <prvHeapInit+0xb8>)
 8008af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	4a09      	ldr	r2, [pc, #36]	; (8008b20 <prvHeapInit+0xbc>)
 8008afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008afc:	4b09      	ldr	r3, [pc, #36]	; (8008b24 <prvHeapInit+0xc0>)
 8008afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008b02:	601a      	str	r2, [r3, #0]
}
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	2000177c 	.word	0x2000177c
 8008b14:	2000537c 	.word	0x2000537c
 8008b18:	20005384 	.word	0x20005384
 8008b1c:	2000538c 	.word	0x2000538c
 8008b20:	20005388 	.word	0x20005388
 8008b24:	20005390 	.word	0x20005390

08008b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b085      	sub	sp, #20
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008b30:	4b28      	ldr	r3, [pc, #160]	; (8008bd4 <prvInsertBlockIntoFreeList+0xac>)
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	e002      	b.n	8008b3c <prvInsertBlockIntoFreeList+0x14>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d8f7      	bhi.n	8008b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	68ba      	ldr	r2, [r7, #8]
 8008b50:	4413      	add	r3, r2
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d108      	bne.n	8008b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	441a      	add	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	441a      	add	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d118      	bne.n	8008bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d00d      	beq.n	8008ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	441a      	add	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	e008      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	e003      	b.n	8008bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d002      	beq.n	8008bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	2000537c 	.word	0x2000537c
 8008bd8:	20005384 	.word	0x20005384

08008bdc <__libc_init_array>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	4d0d      	ldr	r5, [pc, #52]	; (8008c14 <__libc_init_array+0x38>)
 8008be0:	4c0d      	ldr	r4, [pc, #52]	; (8008c18 <__libc_init_array+0x3c>)
 8008be2:	1b64      	subs	r4, r4, r5
 8008be4:	10a4      	asrs	r4, r4, #2
 8008be6:	2600      	movs	r6, #0
 8008be8:	42a6      	cmp	r6, r4
 8008bea:	d109      	bne.n	8008c00 <__libc_init_array+0x24>
 8008bec:	4d0b      	ldr	r5, [pc, #44]	; (8008c1c <__libc_init_array+0x40>)
 8008bee:	4c0c      	ldr	r4, [pc, #48]	; (8008c20 <__libc_init_array+0x44>)
 8008bf0:	f000 f8f2 	bl	8008dd8 <_init>
 8008bf4:	1b64      	subs	r4, r4, r5
 8008bf6:	10a4      	asrs	r4, r4, #2
 8008bf8:	2600      	movs	r6, #0
 8008bfa:	42a6      	cmp	r6, r4
 8008bfc:	d105      	bne.n	8008c0a <__libc_init_array+0x2e>
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}
 8008c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c04:	4798      	blx	r3
 8008c06:	3601      	adds	r6, #1
 8008c08:	e7ee      	b.n	8008be8 <__libc_init_array+0xc>
 8008c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0e:	4798      	blx	r3
 8008c10:	3601      	adds	r6, #1
 8008c12:	e7f2      	b.n	8008bfa <__libc_init_array+0x1e>
 8008c14:	08008fac 	.word	0x08008fac
 8008c18:	08008fac 	.word	0x08008fac
 8008c1c:	08008fac 	.word	0x08008fac
 8008c20:	08008fb0 	.word	0x08008fb0

08008c24 <__retarget_lock_acquire_recursive>:
 8008c24:	4770      	bx	lr

08008c26 <__retarget_lock_release_recursive>:
 8008c26:	4770      	bx	lr

08008c28 <memcpy>:
 8008c28:	440a      	add	r2, r1
 8008c2a:	4291      	cmp	r1, r2
 8008c2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c30:	d100      	bne.n	8008c34 <memcpy+0xc>
 8008c32:	4770      	bx	lr
 8008c34:	b510      	push	{r4, lr}
 8008c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c3e:	4291      	cmp	r1, r2
 8008c40:	d1f9      	bne.n	8008c36 <memcpy+0xe>
 8008c42:	bd10      	pop	{r4, pc}

08008c44 <memset>:
 8008c44:	4402      	add	r2, r0
 8008c46:	4603      	mov	r3, r0
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d100      	bne.n	8008c4e <memset+0xa>
 8008c4c:	4770      	bx	lr
 8008c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c52:	e7f9      	b.n	8008c48 <memset+0x4>

08008c54 <cleanup_glue>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	460c      	mov	r4, r1
 8008c58:	6809      	ldr	r1, [r1, #0]
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	b109      	cbz	r1, 8008c62 <cleanup_glue+0xe>
 8008c5e:	f7ff fff9 	bl	8008c54 <cleanup_glue>
 8008c62:	4621      	mov	r1, r4
 8008c64:	4628      	mov	r0, r5
 8008c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c6a:	f000 b869 	b.w	8008d40 <_free_r>
	...

08008c70 <_reclaim_reent>:
 8008c70:	4b2c      	ldr	r3, [pc, #176]	; (8008d24 <_reclaim_reent+0xb4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4283      	cmp	r3, r0
 8008c76:	b570      	push	{r4, r5, r6, lr}
 8008c78:	4604      	mov	r4, r0
 8008c7a:	d051      	beq.n	8008d20 <_reclaim_reent+0xb0>
 8008c7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008c7e:	b143      	cbz	r3, 8008c92 <_reclaim_reent+0x22>
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d14a      	bne.n	8008d1c <_reclaim_reent+0xac>
 8008c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c88:	6819      	ldr	r1, [r3, #0]
 8008c8a:	b111      	cbz	r1, 8008c92 <_reclaim_reent+0x22>
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 f857 	bl	8008d40 <_free_r>
 8008c92:	6961      	ldr	r1, [r4, #20]
 8008c94:	b111      	cbz	r1, 8008c9c <_reclaim_reent+0x2c>
 8008c96:	4620      	mov	r0, r4
 8008c98:	f000 f852 	bl	8008d40 <_free_r>
 8008c9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c9e:	b111      	cbz	r1, 8008ca6 <_reclaim_reent+0x36>
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	f000 f84d 	bl	8008d40 <_free_r>
 8008ca6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008ca8:	b111      	cbz	r1, 8008cb0 <_reclaim_reent+0x40>
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 f848 	bl	8008d40 <_free_r>
 8008cb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008cb2:	b111      	cbz	r1, 8008cba <_reclaim_reent+0x4a>
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 f843 	bl	8008d40 <_free_r>
 8008cba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008cbc:	b111      	cbz	r1, 8008cc4 <_reclaim_reent+0x54>
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 f83e 	bl	8008d40 <_free_r>
 8008cc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008cc6:	b111      	cbz	r1, 8008cce <_reclaim_reent+0x5e>
 8008cc8:	4620      	mov	r0, r4
 8008cca:	f000 f839 	bl	8008d40 <_free_r>
 8008cce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008cd0:	b111      	cbz	r1, 8008cd8 <_reclaim_reent+0x68>
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 f834 	bl	8008d40 <_free_r>
 8008cd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cda:	b111      	cbz	r1, 8008ce2 <_reclaim_reent+0x72>
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 f82f 	bl	8008d40 <_free_r>
 8008ce2:	69a3      	ldr	r3, [r4, #24]
 8008ce4:	b1e3      	cbz	r3, 8008d20 <_reclaim_reent+0xb0>
 8008ce6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ce8:	4620      	mov	r0, r4
 8008cea:	4798      	blx	r3
 8008cec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008cee:	b1b9      	cbz	r1, 8008d20 <_reclaim_reent+0xb0>
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008cf6:	f7ff bfad 	b.w	8008c54 <cleanup_glue>
 8008cfa:	5949      	ldr	r1, [r1, r5]
 8008cfc:	b941      	cbnz	r1, 8008d10 <_reclaim_reent+0xa0>
 8008cfe:	3504      	adds	r5, #4
 8008d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d02:	2d80      	cmp	r5, #128	; 0x80
 8008d04:	68d9      	ldr	r1, [r3, #12]
 8008d06:	d1f8      	bne.n	8008cfa <_reclaim_reent+0x8a>
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f000 f819 	bl	8008d40 <_free_r>
 8008d0e:	e7ba      	b.n	8008c86 <_reclaim_reent+0x16>
 8008d10:	680e      	ldr	r6, [r1, #0]
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f814 	bl	8008d40 <_free_r>
 8008d18:	4631      	mov	r1, r6
 8008d1a:	e7ef      	b.n	8008cfc <_reclaim_reent+0x8c>
 8008d1c:	2500      	movs	r5, #0
 8008d1e:	e7ef      	b.n	8008d00 <_reclaim_reent+0x90>
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
 8008d22:	bf00      	nop
 8008d24:	20000020 	.word	0x20000020

08008d28 <__malloc_lock>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__malloc_lock+0x8>)
 8008d2a:	f7ff bf7b 	b.w	8008c24 <__retarget_lock_acquire_recursive>
 8008d2e:	bf00      	nop
 8008d30:	20005394 	.word	0x20005394

08008d34 <__malloc_unlock>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__malloc_unlock+0x8>)
 8008d36:	f7ff bf76 	b.w	8008c26 <__retarget_lock_release_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	20005394 	.word	0x20005394

08008d40 <_free_r>:
 8008d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d044      	beq.n	8008dd0 <_free_r+0x90>
 8008d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4a:	9001      	str	r0, [sp, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d52:	bfb8      	it	lt
 8008d54:	18e4      	addlt	r4, r4, r3
 8008d56:	f7ff ffe7 	bl	8008d28 <__malloc_lock>
 8008d5a:	4a1e      	ldr	r2, [pc, #120]	; (8008dd4 <_free_r+0x94>)
 8008d5c:	9801      	ldr	r0, [sp, #4]
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	b933      	cbnz	r3, 8008d70 <_free_r+0x30>
 8008d62:	6063      	str	r3, [r4, #4]
 8008d64:	6014      	str	r4, [r2, #0]
 8008d66:	b003      	add	sp, #12
 8008d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d6c:	f7ff bfe2 	b.w	8008d34 <__malloc_unlock>
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	d908      	bls.n	8008d86 <_free_r+0x46>
 8008d74:	6825      	ldr	r5, [r4, #0]
 8008d76:	1961      	adds	r1, r4, r5
 8008d78:	428b      	cmp	r3, r1
 8008d7a:	bf01      	itttt	eq
 8008d7c:	6819      	ldreq	r1, [r3, #0]
 8008d7e:	685b      	ldreq	r3, [r3, #4]
 8008d80:	1949      	addeq	r1, r1, r5
 8008d82:	6021      	streq	r1, [r4, #0]
 8008d84:	e7ed      	b.n	8008d62 <_free_r+0x22>
 8008d86:	461a      	mov	r2, r3
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	b10b      	cbz	r3, 8008d90 <_free_r+0x50>
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	d9fa      	bls.n	8008d86 <_free_r+0x46>
 8008d90:	6811      	ldr	r1, [r2, #0]
 8008d92:	1855      	adds	r5, r2, r1
 8008d94:	42a5      	cmp	r5, r4
 8008d96:	d10b      	bne.n	8008db0 <_free_r+0x70>
 8008d98:	6824      	ldr	r4, [r4, #0]
 8008d9a:	4421      	add	r1, r4
 8008d9c:	1854      	adds	r4, r2, r1
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	6011      	str	r1, [r2, #0]
 8008da2:	d1e0      	bne.n	8008d66 <_free_r+0x26>
 8008da4:	681c      	ldr	r4, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	6053      	str	r3, [r2, #4]
 8008daa:	4421      	add	r1, r4
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	e7da      	b.n	8008d66 <_free_r+0x26>
 8008db0:	d902      	bls.n	8008db8 <_free_r+0x78>
 8008db2:	230c      	movs	r3, #12
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	e7d6      	b.n	8008d66 <_free_r+0x26>
 8008db8:	6825      	ldr	r5, [r4, #0]
 8008dba:	1961      	adds	r1, r4, r5
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf04      	itt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	6063      	str	r3, [r4, #4]
 8008dc6:	bf04      	itt	eq
 8008dc8:	1949      	addeq	r1, r1, r5
 8008dca:	6021      	streq	r1, [r4, #0]
 8008dcc:	6054      	str	r4, [r2, #4]
 8008dce:	e7ca      	b.n	8008d66 <_free_r+0x26>
 8008dd0:	b003      	add	sp, #12
 8008dd2:	bd30      	pop	{r4, r5, pc}
 8008dd4:	20005398 	.word	0x20005398

08008dd8 <_init>:
 8008dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dda:	bf00      	nop
 8008ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dde:	bc08      	pop	{r3}
 8008de0:	469e      	mov	lr, r3
 8008de2:	4770      	bx	lr

08008de4 <_fini>:
 8008de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de6:	bf00      	nop
 8008de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dea:	bc08      	pop	{r3}
 8008dec:	469e      	mov	lr, r3
 8008dee:	4770      	bx	lr
